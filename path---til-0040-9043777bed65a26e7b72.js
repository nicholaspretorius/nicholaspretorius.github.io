webpackJsonp([0x95db0e121f39],{460:function(e,o){e.exports={data:{markdownRemark:{html:'<h3>Who killed the Junior Developer?</h3>\n<p><a href="https://medium.com/@melissamcewen/who-killed-the-junior-developer-33e9da2dc58c">Thought provoking piece</a> by Melissa McEwen on the difficulty junior developers face in finding jobs. To my reading, the article focuses more on the poor prospects of the mentoring relationship between seniors and juniors with a hint about the economics of hiring juniors than the difficulty of finding jobs per se. The piece then fleshes out some ideas around the lack of willingness for companies to support juniors. The piece then ends off with a bombshell saying "It’s not just a sign that an individual company is broken, it’s a sign the entire industry is broken." and leaves it at that.</p>\n<p>Whoa... I hear you, but...</p>\n<p>I agree, that this is an industry issue, but the industry is made up of individuals companies, and those companies are made up of individuals. So where to start?</p>\n<ol>\n<li>If you are hiring...</li>\n</ol>\n<p>If you are a manager and you need to hire a developer, clearly define what the role of that person will be. Focus on the 80% of the task you need the candidate to deliver on daily. Once that is done, consider what level of developer is needed for this delivery. Often times, you need senior developers for "design" or "architecture" work. You need seniors to solve the hard problems and to guide projects and teams. You need a mix of juniors and intermediates to implement and rollout the work. The reason seniors may not have time to mentor is because they do not have time to work and solve the hard problem in a sustainable, sensible manner. Their time is likely being taken up doing chaotic, scope-creepy work that is unplanned, unscoped and poorly managed. I find it helps to think about a factory production line: You need the best, experienced people to design the prototype, to answer the hard questions and to create the solid foundation to solve the problem. From there, you need a mix of intermediates/juniors to implement with the seniors to guide. Master/apprentice is the goal. </p>\n<p>The reason definition also helps is that it is far easier to prepare and train a junior for a specific set of tasks than an amorphous, undefined collection of "possible" tasks. Related to that, a lot of development experience is knowing which questions to ask and building up a reliable, repeatable way in which to solve any particular problem. I find that many times, the difference between an experienced developer and an inexperienced developer is that experienced developers know which questions to ask, they have a history of problems solved that over time build into an intuition in being able to ever more rapidly recognise classes of problems and what their causes <em>might</em> be. </p>\n<p>Thinking to my junior days, a lot of time is spent butting your head against things because: <br/>\na. It doesn\'t work <br/>\nb. You have no idea why it doesn\'t work <br/>\nc. You have no idea how to dig yourself out of that hole. <br/></p>\n<p>As you gain experience you start learn: <br/>\na. It doesn\'t work<br/>\nb. You have a collection of skills by which you can determine the cause of not working<br/>\nc. You have a further set of skills by which, once the cause is found, to work yourself out of the problem.<br/></p>\n<p>Finally, as a manager do not create "wishlist" positions. Do not list every keyword and jargon you can think of. It does not help you, it does not help the candidate.</p>\n<ol start="2">\n<li>Full-stack shmack. </li>\n</ol>\n<p>"Full-stack" as a buzzword is bullshit. It\'s a lazy marketing term that allows for managers and teams not to define roles and tasks as laid out in point 1. Yes, there are developers who can do it all, but the ones who can do it well are few and far between and if you speak to them, you will find they will have a preference.\nIf you can do it all, that is great! I am jealous and I really do wish I was better at more languages. </p>\n<p>To my mind, being full-stack means that you are flexible and that management can use you where they need you in a pinch. It also means, you are likely to get shoehorned into work you do not want to do if you are not clear about what type of work you WANT to do. The primary rule again, define. Now back to that manager, if you need a full-stack developer, it is because you: <br/>\na. Need someone flexible, a utility player. <br/>\nb. Need a one-member-band to run a solo project or near-solo project.<br/>\nc. You have not bothered with point 1 above. <br/></p>\n<p>If the answer is a or b, go back to point 1 and define this in those terms. Many skilled developers like to come in and save a project or come in to handle things themselves. There is an appeal there. If this is the case, a junior is not going to help you anyway. Better not to waste the time and effort. </p>\n<ol start="3">\n<li>Donkey work. </li>\n</ol>\n<p>Every company has donkey work to be done. All that shit you don\'t want to do or did so much of as a junior you vowed never to do it again. Companies need people for this, senior developers need people for this. Machine learning and automation may herald the end of some of this stuff, but until then, if you fill up senior plates with shit, they will shovel crappy code. </p>\n<p>The trick here is, you should not just hire a junior and only give them donkey work. You need to build them up. The donkey work is their to teach them some things. What front-end developer worth their salt has not spent far too long marking up HTML emails, doing crappy banners and trying to get some arcane CMS template to render in IE? </p>\n<p>Developers need to do this type of work, and juniors need to accept it willingly. Raises will come, better work will come, but if you don\'t have experience, be prepared to shovel and shovel hard. This may even create the space a senior developer needs to solve the donkey problem in the first place.</p>\n<ol start="4">\n<li>Compensation. </li>\n</ol>\n<p>This varies market to market and company to company, but all job posts should come with a salary indication other than "market rates apply". Any job post I see with "market rates apply" signals caution. You then get juniors trying to score higher than their worth rates and companies trying to score lower than they are worth offers to candidates. Both are doing themselves and the "industry" a disservice. Wny would I want to work for someone who claims long term value and growth but is not willing to put their money where their mouth is? </p>\n<p>Naming the price also lets candidates see where in the market they can reasonably look to find a place and possibly the path of progression they might be entering into. As an employer, name your price. As a candidate, define what you are willing to work for. </p>\n<p>A customer does not walk into a shop with no price tags unless they have a lot of money in their wallet or are just window shopping.</p>\n<ol start="5">\n<li>What is junior? </li>\n</ol>\n<p>Finally, I am not sure what a "junior" is really. Web development is about skills and solving problems effectively. Someone may have worked for a year and become a really good developer and grokked a lot that someone doing HTML emailers for 3 year may not have. Junior is also, to my mind, somewhat of a derogatory term. If you are 30 years old and have decided to change careers you are not a "junior". You have experience and skills that may come to bear in unexpected ways in your new career. I prefer the term "novice" or "rookie" to "junior". The level-terminology is also a little better: entry-level, mid-level, high-level, advanced or pro-level. </p>',frontmatter:{title:"TIL 0040"}}},pathContext:{slug:"/til0040/"}}}});
//# sourceMappingURL=path---til-0040-9043777bed65a26e7b72.js.map