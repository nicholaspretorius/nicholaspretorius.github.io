{"data":{"markdownRemark":{"html":"<p><a href=\"https://auth0.com/\">Auth0</a>, in short, is \"authentication-as-a-service\". When building an app or service, you let Auth0 handle the user registration, login, password resets etc. Alongside Auth0 taking care of those nitty-gritties, Auth0 also lets you quite easily add social logins, RBAC (Role-Based-ACcess) and permission management amongst other features. </p>\n<p>Auth0 has a mountain of <a href=\"https://auth0.com/docs\">documentation</a> and a vast trove of <a href=\"https://auth0.com/blog/\">tutorials</a> available. The very first time used Nest.js (and Auth0) it was according to one of their <a href=\"https://auth0.com/blog/full-stack-typescript-apps-part-1-developing-backend-apis-with-nestjs/\">tutorials</a>. </p>\n<p>Auth0 are also the people behind the site <a href=\"https://jwt.io/\">jwt.io</a>, which is <em>incredibly</em> useful for examining your JWTs (JSON Web Tokens) quickly and easily. </p>\n<p>Despite all of this, while working with Auth0, it took me a while to get a handle on some of their documentation. My feeling is that, at times, they are quite verbose, and technical, but not \"plain spoken\". To me, they don't call a spade a spade. This lead to some confusion in understanding how to implement their \"Auth0-risation\". </p>\n<p>What follows is my attempt to explain two of the primary Auth0 concepts in plain language. </p>\n<p>When working with the Auth0 JS client, at least in my case, it is imperative to understand two things: </p>\n<h3>1. Not All Tokens Are The Same!</h3>\n<p>If Auth0 is talking about <code>responseType</code>, the main two types are: </p>\n<ul>\n<li><code>id token</code>: This gives you the \"user profile\". Typically, this is what you would use with a SPA (single page application) where your \"backend\" is part of the same application or monolith. Critically, <code>id token</code> does NOT give you permissions in the JWT! </li>\n<li><code>token</code>: This actually means <code>access_token</code> (Why did they not name it 'access token'?). If what you want to see permissions directly in your JWT - this is what you want! Also, you will NOT get personal details in this token. Generally, this is what you use when authorising access to API endpoints where you API is NOT part of the monolith. i.e. Your API is going to be consumed by multiple applications. </li>\n</ul>\n<p><em>Note:</em> Keep in mind, I am speaking <em>broadly</em>. In my case, I am working on a single application, served on one URL, but in fact, the client and the API are \"microservices\". While they \"appear\" as the same application, they are in fact separate apps. Similarly, I suppose there are ways to get permissions using id tokens. They just do not appear directly in the JWT as far as I have seen.  </p>\n<h3>2. Custom Login Flow or Not?</h3>\n<p>It is not at all clear to me whether you can <em>actually</em> have a <em>\"custom designed login page/flow\"</em> using Auth0. Auth0 <em>says</em> that you can, and they have \"examples\" of this. However, I would argue that the documentation of the Authentication API contradicts this. </p>\n<p>Now, before we begin, I need to explain what I mean when saying <em>\"custom designed login/flow\"</em>. Effectively, what I mean is: The app will have a custom designed login page using \"email\" and \"password\" to login. At no point will the Auth0 \"Lock\" UI appear (Auth0 Lock is the Auth0 login UI). And at <em>no</em> point, will the user see anything that indicates Auth0 is being used. </p>\n<p>With that out of the way, Auth0 <a href=\"https://auth0.com/docs/libraries/when-to-use-lock#when-to-implement-lock-vs-a-custom-ui\">basically says</a> that if you do not want to use the \"Lock UI\", then you need to use the one of Auth0's APIs. </p>\n<p>The crux of the Auth0 wording is <a href=\"%22https://auth0.com/docs/libraries/when-to-use-lock#custom-user-interface\">this</a>: </p>\n<p>\"With Auth0's library for <a href=\"https://auth0.com/docs/libraries/auth0js\">Web</a>, you can customize the behavior and flow of the process used to trigger signup and authentication. You can also directly use the <a href=\"https://auth0.com/docs/auth-api\">Authentication API</a>, without any wrapper at all, if you so choose.\"</p>\n<p>Auth0 has two primary APIs. I would summarise them as follows: </p>\n<ol>\n<li>Authentication API: The \"Authentication API\" for public-facing user login, registration etc.</li>\n<li>Management API: The \"Management API\" is more for \"internal\" or \"team\" applications and lets you manage your <em>Auth0</em> account. </li>\n</ol>\n<p>In my case, I want to register and login everyday, public users. As the Auth0 documentation quote above indicates, if I want \"custom ui\" the \"Authentication API\" is what I need. </p>\n<p>In order to implement a \"custom\" UI for my login - which I want to be done via email and password only. The Authentication API has 3 options for <a href=\"https://auth0.com/docs/api/authentication#login\">login</a>. </p>\n<ol>\n<li>Social - Google, Facebook, Twitter etc. There are a myriad of options. </li>\n<li>Database/AD/LDAP (Passive) - Essentially, this is your username/password or email/password combination. </li>\n<li>Enterprise (SAML and Others) - Essentially, Windows Azure Active Directory or similar. </li>\n</ol>\n<p>Option 2 it is! </p>\n<p>As such, to log a user in, the API endpoint I need is <code>/authorize</code>. The description of which says the following: </p>\n<p>\"Use this endpoint for browser based (passive) authentication. It <em>returns a 302 redirect to the Auth0 Login Page that will show the Login Widget</em> where the user can login with email and password.\"</p>\n<p>Let's rewind. So, as Auth0 has told me, ff I want to create a \"custom design login page\" (as I have defined it), I need to use the \"Authentication API\", of which I need to use the <code>/authorize</code> endpoint, which, as described, <em>returns a 302 redirecto the AUTH0 Login Page</em>. </p>\n<p>To me, that is NOT what I am looking for when wanting a <em>\"custom designed login/flow\"</em>. I suppose that <em>technically</em>, the \"page\" can be custom designed, but it still goes to the Auth0 page! Going to an Auth0 branded page seems to defeat the entire purpose of having a custom UI! Why go to all the effort to make it custom when it goes to Auth0 anyway? </p>\n<p>I hope that I have managed to tease out some of the Auth0 jargon at least a little. If not, please let me know or if I have misunderstood any of the above?  </p>","frontmatter":{"title":"Working with Auth0."}}},"pageContext":{"slug":"/til0144/"}}