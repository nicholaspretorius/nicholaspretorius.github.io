{"data":{"markdownRemark":{"html":"<h3>Using .reverse()</h3>\n<pre><code>function reverse(str) {\n  // const arr = str.split(\"\");\n  const arr = Array.from(str);\n  return arr.reverse().join(\"\");\n}\n</code></pre>\n<h3>Using .reduce()</h3>\n<pre><code>function reverseReduce(str) {\n  return str.split(\"\").reduce((result, letter) => {\n    return letter + result;\n  }, \"\");\n}\n</code></pre>\n<h3>Using for... of</h3>\n<pre><code>function reverseForOf(str) {\n  let reversed = \"\";\n\n  for (let letter of str) {\n    reversed = letter + reversed;\n  }\n\n  return reversed;\n}\n</code></pre>\n<h3>Using a for() loop</h3>\n<pre><code>function reverseLoop(str) {\n  const arr = str.split(\"\");\n  const rev = [];\n\n  for (var i = arr.length - 1; i >= 0; i--) {\n    rev.push(arr[i]);\n  }\n\n  return rev.join(\"\");\n}\n</code></pre>\n<h3>Using a while() loop</h3>\n<pre><code>function reverseWhile(str) {\n  let count = str.length - 1;\n  let revStr = \"\";\n  while (count >= 0) {\n    revStr += str.charAt(count);\n    count -= 1;\n  }\n  return revStr;\n}\n</code></pre>\n<h3>Tests.</h3>\n<pre><code>test('Reverse function exists', () => {\n  expect(reverse).toBeDefined();\n});\n\ntest('Reverse reverses a string', () => {\n  expect(reverse('abcd')).toEqual('dcba');\n});\n\ntest('Reverse reverses a string', () => {\n  expect(reverse('  abcd')).toEqual('dcba  ');\n});\n</code></pre>","frontmatter":{"title":"5 Ways to Reverse a String."}}},"pageContext":{"slug":"/til0113/"}}