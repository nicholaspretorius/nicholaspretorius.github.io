{"data":{"markdownRemark":{"html":"<p>When working with Docker, it can be a bit of a chore to have to pass your environment variables in from the command line. Fortunately Docker has built in support for environment variables coming from a .env file. As such, it is really easy to set your docker-compose.yml file up to make use of environment variables.</p>\n<p>Unlike when working with .env files in Node.js or Python, you do not need to install anything or do any setup. Let's say you wanted to pass your bcrypt secret key and your Auth0 client secret into your app via environment variables - you could do this in your <code>.env</code> file:</p>\n<pre><code>SECRET_KEY=A98evJHg19as7kFMxzXoq9ByEnpnmdBTKIdBZTXPgzvYQtpvzy\nAUTH0_SECRET=lKtgyz0z6wceZ7kJYZjNeRY05dzlhNCqzItHIBbjj2HY7aFs136m5ptDm7wa30Rt\n</code></pre>\n<p>Then, in your <code>docker-compose.yml</code> file, you would specify the environment variables in the format: </p>\n<p><code>VARIABLE_NAME=${ENV_FILE_VARIABLE_NAME}</code></p>\n<p>As such, you could do something like this (Note the \"environment\" section):</p>\n<pre><code>...\nservices:\n  api:\n    build:\n      context: ./services/users\n      dockerfile: Dockerfile\n    entrypoint: [\"/usr/src/app/entrypoint.sh\"]\n    volumes:\n      - ./services/api:/usr/src/app\n    ports:\n      - 5001:5000\n    environment:\n      - FLASK_ENV=development\n      - APP_SETTINGS=project.config.DevelopmentConfig\n      - SECRET_KEY=${SECRET_KEY}\n      - AUTH0_SECRET=${AUTH0_SECRET}\n    depends_on:\n      - db\n...\n</code></pre>\n<p>Simples!</p>","frontmatter":{"title":"Docker Environment Variables."}}},"pageContext":{"slug":"/til0146/"}}