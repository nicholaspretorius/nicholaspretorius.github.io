{"data":{"markdownRemark":{"html":"<p>In life, it is a good idea to wash regularly, brush your teeth, clean and iron your clothes etc. In coding, it is much the same. Code hygiene is important. Fortunately, it is pretty easy to implement! In my own work, I have found a few things to go a long way in helping you keep your code and project clean! </p>\n<p>Firstly, dependencies. When working with Python, it is good practice to have your project run within a virtual environment or venv (Think of venv as a kind of package.json for Python). This ensure that you do not have global dependency issues with your project and keeps all your project dependencies in one place. In order to set this up for a new project, change into your project directory and run the following from the command line: </p>\n<p>Depending on your version of python, run: <code>python -m venv env</code></p>\n<p>This will install the venv into your working directory. </p>\n<p>To activate this, you run: <code>source env/bin/activate</code></p>\n<p>In your .gitignore file, be sure to add env/ to since you do not want to include this folder in your repo. </p>\n<p>Also, remember to ensure all your dependencies are listed in a <code>requirements.txt</code> file. (See end for an example)</p>\n<h3>Code Style</h3>\n<p>Python has many code style guides, and one I have been using is <a href=\"http://flake8.pycqa.org/en/latest/\">flake8</a></p>\n<p>Effectively, flake8 will ensure that your code is adhering to specific style guides. If you are working in VS Code, you can set this up in your working directory by creating a .vscode folder and adding a settings.json file to it. In that file add the following: </p>\n<pre><code>{\n    \"python.pythonPath\": \"env/bin/python3.7\",\n    \"python.linting.flake8Enabled\": true,\n    \"python.linting.enabled\": true,\n}\n</code></pre>\n<p>What this does, is sets your VS Code Python interpreter to the Python version in your venv (be sure to use your specific Python version). Setting both flake8 and linting to true will mean that VS Code will run your code through flake8 and will highlight any deviations from the flake8 rules. VS Code will prompt you to install flake8, if not, you can install via: </p>\n<p><code>python -m pip install flake8</code></p>\n<p>If you need to manage specific flake8 rules, you can set them in a setup.cfg file as follows: </p>\n<pre><code>[flake8]\nmax-line-length = 88\n</code></pre>\n<p>You can also run flake8 directly from the command line via: </p>\n<p><code>flake8 path/to/code</code></p>\n<p>This will then return any deviations via messages in the command line. You can correct them as needed. (If correctly setup, VS Code should highlight these with little red squares in the sidebar indicating where in the file the problems appear)</p>\n<h3>Formatting</h3>\n<p>While code style is one thing, formatting is another. A very popular library for this in the Python world is <a href=\"https://black.readthedocs.io/en/stable/\">black</a></p>\n<p>As always, you can install via: <code>pip install black</code></p>\n<p>You can also ensure that VS Code assists you in this by adding the relevant line to your settings.json file as follows: </p>\n<p><code>\"python.formatting.provider\": \"black\"</code></p>\n<p>From there, to run black you enter: </p>\n<ul>\n<li>To check for any problems only, run: <code>black project --check</code> </li>\n<li>To check what the suggested change will be, run: <code>black project --diff</code></li>\n<li>To execute the changes run: <code>black project</code></li>\n</ul>\n<p>While your preference may differ, I prefer to make all my commits to repo and then run flake8 and black afterwards. That way, I can double-check the changes from the Git diff viewer in VS Code before commiting them to repo. This helps me ensure I am aware of what the changes are separate of my actual code changes. </p>\n<h3>Sorting dependencies</h3>\n<p>Another item that may fall to personal prefernce, but I feel it is a good practice is to sort your imports/dependencies alphebetically. You can use <a href=\"https://readthedocs.org/projects/isort/\">isort</a> for this.</p>\n<p>Similar to the other tools above, you can install via: <code>pip install isort</code></p>\n<p>To run the checks, do the following: </p>\n<ul>\n<li>To check for possible changes run: <code>isort path_to_code/*/*.py --check-only</code></li>\n<li>To check what the suggested changes are, run: <code>isort path_to_code/*/*.py --diff</code></li>\n<li>To make the changes, run: <code>isort path_to_code/*/*.py</code></li>\n</ul>\n<p>As before, I prefer to run isort after my other changes are already commited so I am sure what is being changed. </p>\n<h3>Conflicts</h3>\n<p>In the past, I have run into a conflict betweem black and isort in the way they manage certain rules. This creates a \"loop\" effect where black changes the import one way, then isort another. In a CI/CD environment this is not ideal to say the least. In any event, there is a solution! </p>\n<p>Create a <code>.isort.cfg</code> file, and in it, add the following (depending on your ruleset, this will vary - see this <a href=\"https://github.com/timothycrosley/isort/issues/694\">issue</a> for more detail):</p>\n<pre><code>[settings]\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\nuse_parentheses=True\nline_length=88\n</code></pre>\n<p>Ideally, all of this will be wrapped up into a nice Docker environment for development and release... but that is a topic for another time! In the meantime, I am sure your team mates will appreciate the extra care and attention you have paid to your Python hygiene! </p>\n<h3>Requirements</h3>\n<pre><code>black==19.3b0\nflake8===3.7.8\nisort==4.3.21\n</code></pre>","frontmatter":{"title":"Python Hygiene."}}},"pageContext":{"slug":"/til0139/"}}