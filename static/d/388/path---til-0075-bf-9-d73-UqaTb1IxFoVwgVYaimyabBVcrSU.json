{"data":{"markdownRemark":{"html":"<p>I have been avoiding this. Ever since I first encountered the binary tree in the Daily Coding Problems, I have been procrastinating on this topic. If ever my impostor syndrome regarding my abilities or designation as a 'programmer' had effect it is in situations like this. But, I can't avoid it forever, and you every journey starts with one step, so here we go!</p>\n<h3>Binary Trees</h3>\n<p>A binary tree is a data structure that has at most, two children. Since a binary tree can only have at most 2 children, we name them left or right. </p>\n<h4>Use Cases</h4>\n<ul>\n<li>Typically trees are used to store hierarchical information - ie. files in a computer</li>\n<li>Manipulate hierarchical data</li>\n<li>Make information easy to search (tree traversal)</li>\n<li>Manipulate sorted lists of data</li>\n<li>Multi-stage decision making</li>\n<li>Router algorithms</li>\n</ul>\n<h4>Attributes</h4>\n<ul>\n<li>Moderate access/search (quicker than linked list, slower than arrays)</li>\n<li>Moderate insertion/deletion (quicker than arrays, slower than unordered linked lists)</li>\n<li>Trees donâ€™t have an upper limit on number of nodes as nodes are linked using pointers. </li>\n</ul>\n<h4>Properties</h4>\n<p>A node on a tree contains the following: </p>\n<ol>\n<li>Data</li>\n<li>A pointer to the left child</li>\n<li>A pointer to the right child</li>\n</ol>\n<h4>Terms</h4>\n<ul>\n<li>A node with no parent is the root node. </li>\n<li>A node with no children is called a leaf. </li>\n</ul>\n<h4>Code</h4>\n<p>Below is the most basic definition of a node in a binary tree: </p>\n<pre><code>class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n\n    // Todo\n}\n</code></pre>\n<p>To be continued...</p>\n<p>Hat Tip to <a href=\"https://www.geeksforgeeks.org/binary-tree-set-1-introduction/\">Geeks for Geeks</a></p>","frontmatter":{"title":"Binary Trees: Part 1"}}},"pageContext":{"slug":"/til0075/"}}