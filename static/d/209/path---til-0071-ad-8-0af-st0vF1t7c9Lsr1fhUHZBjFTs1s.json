{"data":{"markdownRemark":{"html":"<p>Despite the GUI interfaces provided for working with Git by VS Code and IntelliJ, I tend to stick to the command line when working with Git. It is likely due to the fact that, while learning the Git basics, I followed the online Git tutorial and that stuck, regardless, these are some Git commands I use often: </p>\n<p><code>git branch</code> // list branches</p>\n<p><code>git status</code> // tells you what status you git repo is in</p>\n<p><code>git fetch</code> // fetch latest from remote</p>\n<p><code>git pull</code> // pull latest changes in repo branch</p>\n<p><code>git add .</code> // stage all changes for commit</p>\n<p><code>git commit -m \"Type message here\"</code> // commit with a message</p>\n<p><code>git log -3</code> // view commit logs for previous 3 commits</p>\n<p><code>git remote -v</code> // list remotes</p>\n<p><code>git remote add origin master</code> // add a remote</p>\n<p><code>git remote remove remoteName</code> // remove a remote</p>\n<p><code>git set branch --set-upstream branchName remoteName/branchName</code> // having created a local branch, add it to the remote</p>\n<p><code>git checkout branchName</code> // switch to another branch</p>\n<p><code>git checkout -b branchName</code> // create a new branch from the current branch with a name and check it out</p>\n<p><code>git clone repoUrlGoesHere</code> // clone a git repo</p>\n<p><code>git branch -m newBranchName</code> // rename the current local branch</p>\n<p><code>git branch -m oldBranchName newBranchName</code> // rename another local branch</p>\n<p><code>git branch -d branchName</code> // delete a local branch</p>\n<p><code>git push remoteName branchName</code> // push a local branch to remote</p>\n<p><code>git config --global --get http.proxy</code> // get git http.proxy setting</p>\n<p><code>git config --global --get https.proxy</code> // get git https.proxy setting</p>\n<p><code>git config --global --unset http.proxy</code> // unset the above</p>\n<p><code>git config --global --unset https.proxy</code> // unset the above</p>\n<p><code>git config --global http.proxy http://proxyUser:proxyPassword@proxyLocation.proxyTld:proxyPort</code> // set the git http.proxy</p>\n<p><code>git config --global https.proxy http://proxyUser:proxyPassword@proxyLocation.proxyTld:proxyPort</code> // set the git https.proxy</p>","frontmatter":{"title":"Git Cheat Sheet."}}},"pageContext":{"slug":"/til0071/"}}