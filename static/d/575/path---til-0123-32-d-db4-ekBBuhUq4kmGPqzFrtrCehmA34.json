{"data":{"markdownRemark":{"html":"<p>As part of the Udacity React Nanodegree course, the section on Redux has students building a basic implementation of Redux. The app is a small \"Todos\" app with our own rudimentary implementation of Redux (matching the basis API) with the UI written in plain JavaScript. </p>\n<p>From there, our rudimentary \"Redux\" implementation is supplemented with a very basic example of middleware. This implementation is ultimately replaced by Redux itself with Redux middleware added. Based on the fact that our DIY version of Redux matched the Redux API, switching over was very straightfoward. Thereafter, the UI is re-written into React, with both the vanilla JS UI and the React UI present on the page at once. Redoing the UI in React and plugging in the existing state implementation. </p>\n<p>The progression of this tutorial was ingenius in that it revealed, very practically the following things: </p>\n<ul>\n<li>The building blocks and principles of Redux. </li>\n<li>Illustrated the use of the Redux building blocks and how they come together. </li>\n<li>The usefulness and flexibility that having state separate from UI provides. </li>\n</ul>\n<p>Having gone through the example, I was blown away by how easily the refactored React UI was able to \"plug into\" the existing Redux state management. Granted, the premise of the app is very simple, so there will likely be more complexity with a more complex app, but my intial impressions are positive. Overall, my feeling of how Tyler and the team represented Redux did a lot to \"demystify\" it to me. I feel, more so than before, have a decent grasp on the concepts and I look forward to using Redux and learning more about it in the near future. </p>\n<p><a href=\"https://github.com/nicholaspretorius/redux101\">Repo</a></p>","frontmatter":{"title":"Redux Impressions."}}},"pageContext":{"slug":"/til0123/"}}