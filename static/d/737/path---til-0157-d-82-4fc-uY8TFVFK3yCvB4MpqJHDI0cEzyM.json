{"data":{"markdownRemark":{"html":"<p><a href=\"https://www.cypress.io/\">Cypress</a> is a fantastic tool for running end-to-end test on your applications. If you are running your app through Docker, you can set Cypress up for this too. </p>\n<p>In your front-end client root directory, you can create a file named <code>Dockerfile-cypress</code>. This will contain: </p>\n<pre><code>FROM cypress/browsers:chrome65-ff57\n\n# set working directory\nWORKDIR /usr/src/app\n\nENV PATH /usr/src/app/node_modules/.bin:$PATH\n\n# install cypress\nRUN npm install cypress\n\n# copy cypress files and folders\nCOPY cypress /usr/src/app/cypress\nCOPY cypress.json /usr/src/app/cypress.json\n\n# confirm the cypress install\nRUN ./node_modules/.bin/cypress verify\n</code></pre>\n<p>Then, from your <code>docker-compose.yml</code> file, you can add a stage for Cypress that depends on your front-end stage, for example: </p>\n<pre><code>cypress:\n    build:\n      context: ./path/to/frontend\n      dockerfile: Dockerfile-cypress\n    depends_on:\n      - name_of_frontend_service\n    network_mode: \"host\"\n</code></pre>\n<p>From there, you can then run Cypress via docker-compose by: </p>\n<p><code>docker-compose run cypress ./node_modules/.bin/cypress run</code></p>","frontmatter":{"title":"Running Cypress in Docker."}}},"pageContext":{"slug":"/til0157/"}}