{"data":{"markdownRemark":{"html":"<p>Following on from yesterday's post, in addtion to getting WordPress, MySQL and phpMyAdmin running from one <code>docker-compose up</code> command, I wanted to run the React client accessing the WP REST API from that same command.</p>\n<p>In order to do so, I created a <code>Dockerfile</code> in the /client folder (the /client folder was created via the <code>npx create-react-app client</code> command).  This added the /client folder into the root directory of the project. I placed the Dockerfile within that. The Dockerfile looks like this: </p>\n<pre><code>FROM node:13.6.0-alpine\n\n# set working directory\nWORKDIR /var/www/html/client\n\n# add `/var/www/html/node_modules/.bin` to $PATH\nENV PATH /var/www/html/node_modules/.bin:$PATH\n\n# install and cache app dependencies\nCOPY package.json /var/www/html/client/package.json\nCOPY package-lock.json /var/www/html/client/package-lock.json\nRUN npm ci\n\n# start app\nCMD [\"npm\", \"start\"]\n</code></pre>\n<p>Furthermore, in the <code>docker-compose.yml</code> file from yesterday, you add a new service called 'client'. You will notice that the I have added a React environment variable named <code>REACT_APP_WP_API</code>. This is set to <code>http://localhost:8080</code> since that is where the WordPress site is running from. The reason I am no longer using the \"proxy\" field within React's <code>package.json</code> file is because, within the container running React, there is nothing running on localhost:8080. As such, it is set in the running React app so that it referers to port 8080 on the machine running the containers localhost. The React client will be found on <code>http://localhost:3000</code>.</p>\n<p>Add the following service named 'client' to the <code>docker-compose.yml</code> file:</p>\n<pre><code>client:\n    depends_on:\n      - wordpress\n    build:\n      context: ./client\n      dockerfile: Dockerfile\n    volumes:\n      - \"./client:/var/www/html/client\"\n      - \"/var/www/html/node_modules\"\n    ports:\n      - 3000:3000\n    environment:\n      - NODE_ENV=development\n      - REACT_APP_WP_API=http://localhost:8080\n</code></pre>\n<p>As a result, the entire <code>docker-compose.yml</code> will looks as follows: </p>\n<pre><code>version: \"3\"\n\nservices:\n  # database\n  db:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}\n      MYSQL_DATABASE: ${MYSQL_DATABASE}\n      MYSQL_USER: ${MYSQL_USER}\n      MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n    networks:\n      - wpsite\n  # phpMyAdmin\n  phpmyadmin:\n    depends_on:\n      - db\n    image: phpmyadmin/phpmyadmin\n    restart: always\n    ports:\n      - \"8081:80\"\n    environment:\n      PMA_HOST: db\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}\n    networks:\n      - wpsite\n  # WordPress\n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    ports:\n      # 8000 on localhost, to 80 on container\n      - \"8080:80\"\n    restart: always\n    # ./ on local machine maps to /var/www/html on Apache, which is where WP files are stored\n    volumes: [\"./:/var/www/html\"]\n    environment:\n      # 'db' is service above. 3306 is default port on MySQL\n      WORDPRESS_DB_HOST: db:3306\n      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}\n      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}\n    networks:\n      - wpsite\n  client:\n    depends_on:\n      - wordpress\n    build:\n      context: ./client\n      dockerfile: Dockerfile\n    volumes:\n      - \"./client:/var/www/html/client\"\n      - \"/var/www/html/node_modules\"\n    ports:\n      - 3000:3000\n    environment:\n      - NODE_ENV=development\n      - REACT_APP_WP_API=http://localhost:8080\nnetworks:\n  wpsite:\nvolumes:\n  db_data:\n</code></pre>\n<p>With this setup, you can now setup and run and entire working WordPress installation with MySQL, phpMyAdmin and a running React client with one 'docker-compose up` command! </p>","frontmatter":{"title":"Running WordPress and React with Docker."}}},"pageContext":{"slug":"/til0154/"}}