{"data":{"markdownRemark":{"html":"<p>Today I began a new nanodegree from Udacity, the <a href=\"https://www.udacity.com/course/full-stack-web-developer-nanodegree--nd0044\">Full Stack Web Developer Nanodegree</a>. After successfully completing my <a href=\"https://confirm.udacity.com/2A67P92L\">React Developer Nanodegree</a>, I decided it was time to get some legitimacy behind my <em>backend</em> development credentials. While I have been developing with Node.js and MongoDB for some time, my JavaScript knowledge, both front-end and back, is mostly self-taught. Apart from dabbling in some PHP and Java, I have never really dug into another programming language in a meaningful capacity. As such, while JavaScript works throughout the stack, I felt it was time to learn a new language and to start a journey towards adding a <em>polyglot developer</em> feather in my cap . My knowledge of SQL is also limited so this is fantastic opportunity to fill in some of the larger gaps in my working knowledge. </p>\n<p>That being said, here are some of my notes I have kept handy for working with Python (assuming Python2 and 3 are installed - depending on your setup):</p>\n<h3>Command Line.</h3>\n<p>In the command line: </p>\n<ul>\n<li><code>python --version</code> displays the Python 2 version number.</li>\n<li><code>python3 --version</code> displays the Python 3 version number.</li>\n<li><code>python3</code> enters the Python3 REPL (Read Evaluate Print Loop).</li>\n<li><code>pip --version</code> Python Package Installer. Is the equivalent of NPM for Python packages.</li>\n<li><code>pip install --upgrade pip</code> Upgrades pip.</li>\n</ul>\n<p>Once in the Python REPL: </p>\n<ul>\n<li>Pressing Ctrl + z will put the running code in the background. (You can enter 'fg' to bring it back to the foreground).</li>\n<li>Pressing Ctrl + c or Ctrl + d will 'kill' the REPL.</li>\n</ul>\n<h3>Running Python Code.</h3>\n<p>When working with Python, it is useful to set a Virtual Environment or 'venv' to keep version numbers for projects in harmony. (I think of this as keeping a .nvmrc to set the Node version or having an \"engine\" field in your package.json file):</p>\n<ul>\n<li><code>python3.7.4 -m venv env</code> will setup up the venv. </li>\n<li><code>course env/bin/activate</code> will activate (or re-activate the venv)</li>\n<li><code>deactivate</code> will deactivate the venv. </li>\n</ul>\n<h3>Flask.</h3>\n<p>Flask is a lightweight framework for Python, primarily for building APIs. (Similar to Express for Node.js):</p>\n<ul>\n<li><code>pip install Flask</code> will install Flask from pip.</li>\n<li><code>pip freeze > requirements.txt</code> will write all your dependencies to a requirements.txt file. (Similar to package.json)</li>\n<li><code>pip install pylint</code> will install 'Pylint' into the venv for development purposes. (In a way, similar to NVM, you can have different dependecies available in your particular project venv)</li>\n</ul>\n<h3>VS Code.</h3>\n<ul>\n<li>Installed the \"autopep8\" extension for automatic code formatting for .py files. </li>\n<li>Installed the \"pylint\" extension for linting of .py files. </li>\n<li>Installed the Python extension for overall VS Code improvements for .py files.</li>\n</ul>\n<p>This might also be a good time to review my <a href=\"/til0055/\">Postgres Cheat Sheet</a> from a while back...</p>","frontmatter":{"title":"Python Basics: Cheat Sheet."}}},"pageContext":{"slug":"/til0135/"}}