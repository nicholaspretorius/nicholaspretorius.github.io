{"data":{"markdownRemark":{"html":"<p>Today I started learning some Redux. As I understand it, Redux, in short is a <em>predictable state container</em> for JavaScript apps with the primary goal being to improve the predictability of state in an application. Instead of mixing application state in amongst UI code all over the app, Redux stores all data in once location. This data store is a state tree. Essentially one JavaScript object outside of the UI. The UI will then reference the state. </p>\n<p>There are 4 elements in Redux: </p>\n<ol>\n<li>The state.</li>\n<li>Getting the state.</li>\n<li>Listening for changes to the state.</li>\n<li>Updating the state. </li>\n</ol>\n<p>These functionalities are distributed amongst the following (simplified example): </p>\n<ol>\n<li>Store = state (+ the function of the store)</li>\n<li>Getting the state = getState function. </li>\n<li>Listening for changes to the state = subscribe function. </li>\n<li>Updating the state = dispatch function. </li>\n</ol>\n<h3>Actions.</h3>\n<p>Actions are events that trigger changes to state. They are javascript objects with a <em>required</em> type property and an <em>optional</em> payload. </p>\n<h3>Actions Creators.</h3>\n<p>Action creators are functions that create/return action objects. </p>\n<h3>Reducers.</h3>\n<p>Reducers are functions that take in state and actions and return new (not-mutated) state. </p>\n<h3>Store.</h3>\n<p>The store returns the store object. createStore must be passed a reducer with which to operate on the store. The store itself has three methods: </p>\n<ul>\n<li>getState()</li>\n<li>subscribe()</li>\n<li>dispatch()</li>\n</ul>\n<p>These methods have access to the state of the store via closure. </p>\n<p>Here is a rudimentary example of a \"Redux\" store. </p>\n<pre><code>// library code\nfunction createStore(reducer) {\n  let state;\n  let listeners = [];\n\n  const getState = () => state;\n\n  const subscribe = listener => {\n    listeners.push(listener);\n    return () => {\n      listeners = listeners.filter(l => l !== listener);\n    };\n  };\n\n  const dispatch = action => {\n    state = reducer(state, action);\n    listeners.forEach(listener => listener()); // invoke all the listeners\n  };\n\n  return {\n    getState,\n    subscribe,\n    dispatch\n  };\n}\n\n// app code: dev writes reducer function\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case \"ADD_TODO\":\n      return state.concat([action.todo]); // is pure since concat returns a new array not a mutated array.\n    case \"REMOVE_TODO\":\n      return state.filter(todo => todo.id !== action.id);\n    case \"TOGGLE_TODO\":\n      return state.map(todo =>\n        todo.id !== action.id ? todo : Object.assign({}, todo, { complete: !todo.complete })\n      );\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(todos);\n\nstore.subscribe(() => {\n  console.log(\"Update state: \", store.getState());\n});\n\nstore.dispatch({\n  type: \"ADD_TODO\",\n  todo: {\n    id: 1,\n    name: \"Learn Redux\",\n    complete: false\n  }\n});\n\n// const unsubscibe = store.subscribe(() => {\n//   console.log(\"Update state again: \", store.getState());\n// });\n\n// unsubscribe();\n</code></pre>","frontmatter":{"title":"Redux Notes."}}},"pageContext":{"slug":"/til0122/"}}