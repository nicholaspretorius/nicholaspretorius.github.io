{"data":{"markdownRemark":{"html":"<p>When working with <a href=\"https://docs.pytest.org/en/latest/\">Pytest</a>, it is tempting to keep re-using the same old commands. However, there are some really useful options you can pass in via the command line in order to change the set of tests being run and most likely speed up your workflow.</p>\n<p>Take for example, your basic <code>pytest</code> command as a base: </p>\n<ul>\n<li><code>pytest \"project/tests\"</code></li>\n</ul>\n<p>The above command is running Pytest out of the 'project/tests' folder. </p>\n<p>Here are some useful variations to try for running tests:  </p>\n<ul>\n<li>Without warnings: <code>pytest \"project/tests\" -p no:warnings</code></li>\n<li>That failed in last run (extremely useful!): <code>users pytest \"project/tests\" --lf</code></li>\n<li>With local variables in traceback: <code>pytest \"project/tests\" -l</code></li>\n<li>Stop after first failure: <code>pytest \"project/tests\" -x</code></li>\n<li>...or stop after second failure: <code>pytest \"project/tests\" --maxfail=2</code></li>\n<li>With coverage: <code>pytest \"project/tests\" -p no:warnings --cov=\"project\"</code></li>\n<li>With coverage as an HTML page (remember to exclude /htmlcov from your repo): <code>pytest \"project/tests\" -p no:warnings --cov=\"project\" --cov-report html</code></li>\n<li>With only \"registration\" in the test name: <code>pytest \"project/tests\" -k registration</code></li>\n<li>List the two slowest tests: <code>pytest \"project/tests\" --durations=2</code></li>\n</ul>\n<p>Hopefully some of these will help streamline your Pytest-ing workflows! </p>","frontmatter":{"title":"Useful Pytest Commands."}}},"pageContext":{"slug":"/til0142/"}}