{"data":{"markdownRemark":{"html":"<p>Below are some thoughts on React: </p>\n<ul>\n<li>\n<p>Use <code>npx create-react-app projectName</code> instead of the traditional <code>npm install create-react-app</code> -> <code>create-react-app projectName</code> route. It's quicker, easier and gets away from the challenge of managing global versions of npm packages. Read more about <a href=\"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\">npx here</a>.</p>\n</li>\n<li>\n<p><code>&#x3C;React.Fragment></code> lets you contain a component without an extra surrounding div. </p>\n</li>\n<li>\n<p>In React, you pass arrow functions for event handling when you want to pass parameters. For example:</p>\n</li>\n</ul>\n<pre><code>&#x3C;a className=\"page-link\" onClick={() => props.onPaginate(page)}>\n    {page}\n&#x3C;/a>\n</code></pre>\n<ul>\n<li>\n<p>You can pass child HTML elements of a component to the component via this.props.children. Children is an array. </p>\n</li>\n<li>\n<p>When managing events, essentially, you want to bubble the event up to the controlling parent. It's bubbles all the way up...</p>\n</li>\n<li>\n<p>In <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\">React Dev Tools</a> (which you really should install - its great!), you can get a handle on a selected element to evaluate it on the Dev Tools console via $r. You can then apply functions to this such as $r.click(); This is similar to, in the 'Elements' tab in Dev Tools where you can access and element via $0. Sidenote: I use the 'Darcula' theme!</p>\n</li>\n<li>\n<p>Props are what you <em>pass</em> to a component. </p>\n</li>\n<li>\n<p>State is private or local to a component and is not shared with other components. Should you want to share state, you need to <em>lift the state up</em> to a parent component so you can share it. One-way data flow! </p>\n</li>\n<li>\n<p>Components that do not have their own state are known as <em>Controlled Components</em>. Often times, if there is no state and if there are no extra functions within the component, you can use a <em>Stateless Function Component</em>. </p>\n</li>\n<li>\n<p>Stateless function components can be easily setup via VS Code Simple React Snippets via: </p>\n</li>\n</ul>\n<p><code>imr</code></p>\n<ul>\n<li>You can then create your stateless function component via: </li>\n</ul>\n<p><code>sfc</code></p>\n<ul>\n<li>There seems to be a fair amount of <em>lifting</em> in React (and I don't mean weights :) ). As you grow your component base, you often find yourself <em>lifting state up</em>.</li>\n</ul>\n<h4>Lifecycle Hooks</h4>\n<ol>\n<li>Mount -> constructor, render, componentDidMount</li>\n<li>Update -> render, componentDidUpdate</li>\n<li>Unmount -> componentWillUnmount</li>\n</ol>\n<p><code>// note that render will recursively render all child components.</code></p>\n<h4>Thoughts</h4>\n<p>As I spend more time using React, it strikes me as being a lot simpler in constrast to Angular. While my experience is extremely limited, it seems that React is quite rigid in the approach you need to take with it. Also, as indicated by comparing the React Tutorial with the Angular Tour of Heroes Tutorial, React does a lot less. No routing, no http. It is just a view and, it seems, is primarily concerned with passing props down and bubbling events up. This pattern seems to be often repeated. </p>\n<p>Maybe it was a lack of experience and not fully understanding the AngularJs ecosystem when I first started learning it all those years ago, or maybe it is that Angular is more <em>magical</em>, but it seems to me that while React is a little strange to get going with at first, it seems to be a lot stricter in the way it expects you to code. And while this might furstrate a beginner or inexperienced user, as I go, I find that this is actually really great in that you need to stick to some fundamental rules, and then the rest is all JavaScript (or JSX rather). </p>\n<p>Anyway, I am sure I have skewed a lot of the above, it's early days, but, despite some initial trepidation, I find I am really enjoying learning React!</p>","frontmatter":{"title":"React Notes Continued."}}},"pageContext":{"slug":"/til0066/"}}