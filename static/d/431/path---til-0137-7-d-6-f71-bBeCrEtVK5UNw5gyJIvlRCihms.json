{"data":{"markdownRemark":{"html":"<p>Welcome to 2020! </p>\n<p><a href=\"https://www.getpostman.com/\">Postman</a> is an immensely useful tool for working with, documenting and testing APIs. </p>\n<h3>Collections</h3>\n<p>Firstly, it is advisable to setup a <a href=\"https://learning.getpostman.com/docs/postman/collections/intro-to-collections/\">collection</a> when creating your API calls in Postman. These can be managed in folders, so that you can group them in any way that makes sense to you. This enables you to group together all your various projects API calls together so it all makes sense. Rather than having all kinds of disparate API calls flooding your Postman interface. Furthermore, you can run tests automatically in batches in <em>collections</em> and against <em>environments</em>.</p>\n<h3>Variables</h3>\n<p>Here's a tip - never hardcode the url for your API! The smart thing to do is to use <a href=\"https://learning.getpostman.com/docs/postman/variables-and-environments/variables/\">environment variables</a>.</p>\n<ul>\n<li>In the Postman URL bar, enter your url as follows: <code>{{url}}/todos</code></li>\n</ul>\n<p><code>{{url}}</code> is the name of your environment variable. This lets you update urls if necessary without having to manually go and make changes through your entire collection. </p>\n<p>Similarly, you can use environment variables for other things. For example: </p>\n<p>If you have a collection of API calls, you can capture the ID  in the response to a POST request, and then set that ID as the value of an environment variable which you can subsequently use in follow-up calls in your collection. For example to run a GET request to an endpoint i.e. <code>/todos/{{id_goes_here}}</code></p>\n<p>This is immensely useful when running tests on your collections. Speaking of which, yes, you can write automated tests for your API calls in JavaScript!</p>\n<h3>Tests</h3>\n<p>One incredibly useful feature of Postman is that you can write automated JavaScript tests. What does this JavaScript look like you might ask? </p>\n<p>In the \"Tests\" tab of your API view:</p>\n<pre><code>// check for a 201 response code\npm.test(\"response status code is 201\", function () {\n    pm.response.to.have.status(201);\n});\n</code></pre>\n<pre><code>// check for specific field values\npm.test(\"response contains a user with id, email and active fields\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    pm.expect(jsonData.id).to.be.a('number');\n    pm.expect(jsonData.email).to.be.a('string');\n    pm.expect(jsonData.email).to.contain('@');\n    pm.expect(jsonData.email).to.contain('.');\n    pm.expect(jsonData.active).to.be.a('boolean');\n})\n</code></pre>\n<pre><code>// setup environment variable to be used by other API calls\nvar jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"user_id\", jsonData.user.id);\n</code></pre>\n<p>From here, this enables you to setup any subsequent API calls in your collection or test run that rely on this particular ID to get passed through in the URL bar as follows: </p>\n<ul>\n<li><code>{{url}}/users/{{user_id}}</code></li>\n</ul>\n<h3>Pre-Request Scripts</h3>\n<p>Similarly, you can do various things \"pre-flight\" to the API call which can be useful. For example, if you have a collection that creates users with unique email addresses, hardcoding the same email address might not be ideal for multiple runs. As such, in the \"Pre-request\" tab of your API call window, you can do something like this. Using an imaginary POST to <code>/users</code>: </p>\n<pre><code class=\"language-//\">const {Property} = require('postman-collection');\nlet randomWord = Property.replaceSubstitutions(\"{{$randomWord}}\");\n</code></pre>\n<pre><code>// use Postman dyanmic variable $randomWord\nvar email_address = randomWord + \"@domain.com\";\n</code></pre>\n<pre><code>// JSON.stringify will serialize the object so that Postman can save it\npm.environment.set('user_email', JSON.stringify(email_address));```\n</code></pre>\n<p>What the above will do, is enable you to do the following in your the JSON body of your POST request. Which is great because now you don't have to hardcode any silly email addresses like \"test@test.com\": </p>\n<pre><code>{\n    \"email\": {{user_email}}\n}\n</code></pre>\n<p>Note: Another very useful feature is dynamic variables (as used above). You can find out more about Postman's dynamic variables <a href=\"https://learning.getpostman.com/docs/postman/variables-and-environments/variables-list/\">here</a></p>\n<p>Another note: Apparently, Postman uses the <a href=\"https://github.com/marak/Faker.js/\">faker</a> library beneath its dynamic variables if you were wondering...</p>\n<h3>Conclusion</h3>\n<p>Taking the approach above, enables you to setup a collection of API calls with dynamic and environment variables that can change dynamically. This alleviates the need to repetitively and manually run API calls to check for correct behaviours. Granted, there may be overlap with your API unit and integration tests, but to be honest, I find Postman very easy to work with and quite intuitive - at worst, its a few hours extra work that enables you to quickly and easily setup and share API calls. At best, it is another layer testing and documentation on top of the rest of your testing and documentation! ;)</p>\n<p><em>PS.</em> Another quick tip is to save examples of API posts and responses for documentation purposes. This lets other developers in your team see what API requests and responses are <em>supposed</em> to look like when working correctly. </p>","frontmatter":{"title":"Postman Cheat Sheet."}}},"pageContext":{"slug":"/til0137/"}}