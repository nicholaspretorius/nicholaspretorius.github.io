{"data":{"markdownRemark":{"html":"<p>To test API endpoints that sit behind Auth0 authorisation you can use your <a href=\"https://auth0.com/\">Auth0</a> \"Test Application\" to generate auth tokens. This will enable you to run integration tests on your endpoints without having to make use of Auth0's <code>/authorize</code> endpoint (which responds with a 302 redirect, making it tricky to test with). </p>\n<p>To get started, you first need to ensure that you have the appropriate permissions and grant types setup for your API. You can do this by navigating to your \"Test Application\" in the Auth0 dashboard. Click on the \"API\" tab, make sure the correct application is switched on. Next to the switch is a dropdown arrow, when clicking on it, you can then select the appropriate permissions needed. Save your changes. </p>\n<p>Once that is done, on the \"Settings\" tab, click on the \"Show Advanced Settings\" at the bottom of the page, click on <a href=\"https://auth0.com/docs/applications/reference/grant-types-available\">\"Grant Types\"</a> and then select \"Client Credentials\" (You can leave the others unselected). Save your changes. </p>\n<h3>Auth Token</h3>\n<p>In order to make API calls from Python, I use the <a href=\"https://requests.readthedocs.io/en/master/\">requests</a> library. </p>\n<p>Install as a dependency via: <code>pip install requests</code> or update your <code>requirements.txt</code> file and install as needed.</p>\n<p>Keep in mind that with the \"client credentials\" auth flow, you make use of your Auth0 client secret. This value <em>must</em> not be made public. As such, you should be passing this value in from environment variables into your app config so that they are not exposed at any point. </p>\n<p>The Auth0 domain, client ID and audience are values that are made visible using Auth0's front-end authentication flows, so these are not critical to keep secret. However, in the example below, I have kept those in environment variables too for consistency. </p>\n<p>You can setup your request in Pytest as follows: </p>\n<pre><code>import json\nimport os\nimport requests\n\ndef get_auth0_access_token():\n\n    domain = os.environ.get(\"AUTH0_DOMAIN\")\n\n    payload = {\n        \"client_id\": os.environ.get(\"AUTH0_CLIENT_TEST_ID\"),\n        \"client_secret\": os.environ.get(\"AUTH0_SECRET\"),\n        \"audience\": os.environ.get(\"AUTH0_AUDIENCE\"),\n        \"grant_type\": \"client_credentials\",\n    }\n\n    headers = {\"content-type\": \"application/json\"}\n\n    res = requests.post(\n        f\"https://{domain}/oauth/token\", data=json.dumps(payload), headers=headers\n    )\n\n    access_token = res.json()[\"access_token\"]\n\n    return access_token\n</code></pre>\n<p>You now have a function that will get you an access_token when needed in your tests. For example: </p>\n<pre><code>def test_sanity_check_success(test_app):\n    access_token = get_auth0_access_token()\n    client = test_app.test_client()\n\n    res = client.get(\n        \"/sanity\",\n        headers={\"Authorization\": f\"Bearer {access_token}\"},\n        content_type=\"application/json\",\n    )\n\n    data = json.loads(res.data.decode())\n    assert res.status_code == 200\n    assert res.content_type == \"application/json\"\n    assert \"world!\" in data[\"hello\"]\n</code></pre>\n<p><em>Please Note:</em> It is <strong>imperative</strong> that you keep your Auth0 Client Secret secret. As such, the above flow is <em>not</em> suitable for front-end only, SPA auth flows! </p>\n<p>Primarily, the \"client credential\" flow is for machine-to-machine authorisation - which unit/integration testing is. As such, do not use this in your SPA, or add this API call into your Postman collection.</p>","frontmatter":{"title":"Retrieve Auth0 Auth Tokens for Testing."}}},"pageContext":{"slug":"/til0145/"}}