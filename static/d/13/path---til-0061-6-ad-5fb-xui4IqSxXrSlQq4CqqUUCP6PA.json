{"data":{"markdownRemark":{"html":"<ul>\n<li>React components (except for function components) define super(props) in the constructor (when used)</li>\n<li>Components (except for function components) extend React.Component and have a render function which returns the component. </li>\n<li>Class components display information via this.props. Function components do not make use of this.</li>\n<li>React is <em>only</em> a view.</li>\n<li>When you call setState in a component, React automatically updates the child components.</li>\n</ul>\n<h4>Lifting State</h4>\n<blockquote>\n<p>\"...the best approach is to store the game's state in the parent Board component instead of in each Square. The Board component can tell each Square what to display by passing a prop...\" - <a href=\"https://reactjs.org/tutorial/tutorial.html#lifting-state-up\">Lifing state</a> </p>\n</blockquote>\n<ul>\n<li>\n<p>Declare the shared state in the parent component. Parent component can pass the state back down to the children by using props. This keeps the children in sync with each other and with the parent component. </p>\n</li>\n<li>\n<p>Lifting state into a parent component is common in React when refactoring. </p>\n</li>\n</ul>\n<blockquote>\n<p>\"In React, however, it is a convention to use on [Event] names for props which represent events and handle [Event] for the methods which handle the events.\" - <a href=\"https://reactjs.org/tutorial/tutorial.html#lifting-state-up\">Lifting state</a></p>\n</blockquote>\n<ul>\n<li>Child components should not store state and the inform parents of events which are bubbled up. These are ‘dumb’ or rather ‘controlled components’. </li>\n</ul>\n<h4>Benefits of immutability</h4>\n<ul>\n<li>\n<p>Complex features become simple - for example, time-travel. Avoiding direct data mutation lets us keep previous versions of history intact and can be re-used later. </p>\n</li>\n<li>\n<p>Detecting changes - detecting change in mutable object is difficult as they are modified directly. This detection requires mutable object to be compared to previous copies of itself and the entire object tree to be traversed. Detecting changes in immutable object is easier since if the object being reference is different than the previous one, the object has changed. </p>\n</li>\n<li>\n<p>Re-rendering - the primary benefit is that you can build pure components. Easily determine change and then determine if re-render is required. </p>\n</li>\n<li>\n<p>Function components only contain one render function - as such, can re-write it to only be a function that takes props as an argument and is not a class. In a class, you need a proper arrow function to access this. In function component, you do not need to access this, so you do not need the arrow function to access the props. </p>\n</li>\n</ul>\n<h4>Key</h4>\n<ul>\n<li>Strongly recommended to assign proper keys when building dynamic lists! </li>\n</ul>\n<blockquote>\n<p>\"key is a special and reserved property in React (along with ref, a more advanced feature). When an element is created, React extracts the key property and stores the key directly on the returned element. Even though key may look like it belongs in props, key cannot be referenced using this.props.key. React automatically uses key to decide which components to update. A component cannot inquire about its key.\" - <a href=\"https://reactjs.org/tutorial/tutorial.html#picking-a-key\">Picking a key</a> </p>\n</blockquote>","frontmatter":{"title":"React Tutorial Notes."}}},"pageContext":{"slug":"/til0061/"}}