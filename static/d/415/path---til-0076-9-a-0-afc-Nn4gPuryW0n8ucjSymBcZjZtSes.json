{"data":{"markdownRemark":{"html":"<p>At work, I often work on the front-end of Java projects. Oftentimes, this means setting up Java projects eventhough you only need to work on the front-end. This type of setup may involve, but not be limited to: </p>\n<ul>\n<li>Setting up Java</li>\n<li>Setting up Maven</li>\n<li>Setting up Payara</li>\n<li>Setting up Postgres</li>\n<li>Running batch commands</li>\n<li>Running SQL scripts</li>\n<li>Installing SSL certificates</li>\n<li>Configuring proxy settings</li>\n<li>Etc</li>\n</ul>\n<p>Doing tasks like this can sometimes be frustrating, especially when local builds fail due to obscure reasons that you don't fully comprehend. Below are some random throughts on this: </p>\n<ul>\n<li>When using Maven, check that your settings.xml file is correctly configured - typically found in <code>C:\\Users\\username\\.m2</code>. Make sure to check for things such as usernames &#x26; passwords are correct, proxy settings are what they should be. </li>\n<li>If you run <code>java -version</code> in your terminal and get an unrecognised command message, it means that you JAVA_HOME environment variable is not setup correctly, and you will need to run java commands and keytool from the folder where you java.exe is located. Rather than having to do that, ensure you env variable is setup correctly! </li>\n<li>Ensure your .npmrc file is correctly configured, either with your npm-registry or nexus repository locations or your http.proxy settings. </li>\n<li>If you are using Nexus, make sure the npm modules are in the repository. </li>\n<li>Ensure that the necessary SSL certificates are present in your keystore, these may need to be in your JRE lib/security/cacerts or in your Payara keystore. </li>\n<li>When using Postgres, ensure that your local database names, usernames and passwords are correct. Additionally, make sure that your usernames have the correct roles. </li>\n<li>Make sure you have run the necessary scripts.</li>\n<li>Make sure you have run the necessary terminal commands. </li>\n<li>In Enterprise applications, you will often need to use IntelliJ plugins such as CheckStyle, FindBugs and SonarLint, make sure that you have setup the necessary .xml files for these to reference. </li>\n</ul>\n<p>Hopefully, all of the necessary steps will be laid out in Confluence (or similar) to assist with the necessary setups. If not, ask your fellow developers for some assistance, and in the process, make notes that you can refer back to and then re-trace your steps and re-write the steps into a how-to article that you can contribute to the team and project. </p>\n<p>Even though you may not be a Java developer, it often takes a non-Java developer to write out an article, in plain, understandable, step-by-step language that other developers can follow! </p>","frontmatter":{"title":"Java Tips for Non-Java Developers."}}},"pageContext":{"slug":"/til0076/"}}