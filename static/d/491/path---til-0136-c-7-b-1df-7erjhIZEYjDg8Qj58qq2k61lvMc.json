{"data":{"markdownRemark":{"html":"<p>Just some useful examples on basic SQL usage: </p>\n<p>/* ERD - <a href=\"https://video.udacity-data.com/topher/2017/October/59e946e7_erd/erd.png\">https://video.udacity-data.com/topher/2017/October/59e946e7_erd/erd.png</a> */</p>\n<p>/* all */\n<code>SELECT * from orders;</code></p>\n<p>/* column selectors */\n<code>SELECT id, account_id, occurred_at FROM orders;</code></p>\n<p>/* using limit */\n<code>SELECT * FROM orders LIMIT 10;</code></p>\n<p>/* combined */\n<code>SELECT occurred_at, account_id, channel FROM web_events LIMIT 15;</code></p>\n<p>/* order by (default is ASC) */\n<code>SELECT id, occurred_at, total_amt_usd FROM orders ORDER BY occurred_at DESC LIMIT 10;</code></p>\n<p>/* ASC */\n<code>SELECT id, occurred_at, total_amt_usd FROM orders ORDER BY occurred_at LIMIT 10;</code></p>\n<p>/* Write a query to return the top 5 orders in terms of largest total<em>amt</em>usd. Include the id, account<em>id, and total</em>amt<em>usd */\n`SELECT id, occurred</em>at, total<em>amt</em>usd\nFROM orders\nORDER BY total<em>amt</em>usd DESC\nLIMIT 10;`</p>\n<p>/* Write a query to return the lowest 20 orders in terms of smallest total<em>amt</em>usd. Include the id, account<em>id, and total</em>amt<em>usd */\n`SELECT id, occurred</em>at, total<em>amt</em>usd\nFROM orders\nORDER BY total<em>amt</em>usd\nLIMIT 20;`</p>\n<p>/* Write a query that displays the order ID, account ID, and total dollar amount for all the orders, sorted first by the account ID (in ascending order), and then by the total dollar amount (in descending order).*/\n<code>SELECT id, account_id, total_amt_usd FROM orders ORDER BY account_id, total_amt_usd DESC;</code></p>\n<p>/* Now write a query that again displays order ID, account ID, and total dollar amount for each order, but this time sorted first by total dollar amount (in descending order), and then by account ID (in ascending order). */\n<code>SELECT id, account_id, total_amt_usd FROM orders ORDER BY total_amt_usd DESC, account_id;</code></p>\n<p>/* Pulls the first 5 rows and all columns from the orders table that have a dollar amount of gloss<em>amt</em>usd greater than or equal to 1000. */\n<code>SELECT * FROM orders WHERE gloss_amt_usd >= 1000 LIMIT 5;</code></p>\n<p>/* Pulls the first 10 rows and all columns from the orders table that have a total<em>amt</em>usd less than 500. */\n<code>SELECT * FROM orders WHERE total_amt_usd &#x3C; 500 LIMIT 10;</code></p>\n<p>/* Filter the accounts table to include the company name, website, and the primary point of contact (primary<em>poc) just for the Exxon Mobil company in the accounts table. */\n`SELECT name, website, primary</em>poc\nFROM accounts\nWHERE name LIKE 'Exxon Mobil';`</p>\n<p>/* OR */\n<code>SELECT name, website, primary_poc FROM accounts WHERE name = 'Exxon Mobil';</code></p>\n<p>/* Create a column that divides the standard<em>amt</em>usd by the standard<em>qty to find the unit price for standard paper for each order. Limit the results to the first 10 orders, and include the id and account</em>id fields. */\n<code>SELECT id, account_id, standard_amt_usd/standard_qty AS \"Unit Price\" FROM orders LIMIT 10;</code></p>\n<p>/* OR */\n<code>SELECT id, account_id, standard_amt_usd/standard_qty AS unit_price FROM orders LIMIT 10;</code></p>\n<p>/* Write a query that finds the percentage of revenue that comes from poster paper for each order. You will need to use only the columns that end with <em>usd. (Try to do this without using the total column.) Display the id and account</em>id fields also. */\n<code>SELECT id, account_id, poster_amt_usd/(standard_amt_usd + gloss_amt_usd + poster_amt_usd) AS post_per FROM orders LIMIT 10;</code></p>\n<p>/* All the companies whose names start with 'C'. */\n<code>SELECT id, name, website FROM accounts WHERE name LIKE 'C%';</code></p>\n<p>/* All companies whose names contain the string 'one' somewhere in the name. */\n<code>SELECT id, name, website FROM accounts WHERE name LIKE '%one%';</code></p>\n<p>/* All companies whose names end with 's'. */\n<code>SELECT id, name, website FROM accounts WHERE name LIKE '%s';</code></p>\n<p>/* Use the accounts table to find the account name, primary<em>poc, and sales</em>rep<em>id for Walmart, Target, and Nordstrom. */\n`SELECT name, primary</em>poc, sales<em>rep</em>id\nFROM accounts\nWHERE name IN ('Walmart', 'Target', 'Nordstrom')\nORDER BY name;`</p>\n<p>/* Use the web<em>events table to find all information regarding individuals who were contacted via the channel of organic or adwords. */\n`SELECT *\nFROM web</em>events\nWHERE channel IN ('organic', 'adwords')\nORDER BY id;`</p>\n<p>/* Use the accounts table to find the account name, primary poc, and sales rep id for all stores except Walmart, Target, and Nordstrom. */\n<code>SELECT name, primary_poc, sales_rep_id FROM accounts WHERE name NOT IN ('Walmart', 'Target', 'Nordstrom') ORDER BY name;</code></p>\n<p>/* Use the web<em>events table to find all information regarding individuals who were contacted via any method except using organic or adwords methods. */\n`SELECT *\nFROM web</em>events\nWHERE channel NOT IN ('organic', 'adwords')\nORDER BY id;`</p>\n<p>/* All the companies whose names do not start with 'C'. */\n<code>SELECT name, id FROM accounts WHERE name NOT LIKE 'C%' ORDER BY name;</code></p>\n<p>/* All companies whose names do not contain the string 'one' somewhere in the name. */\n<code>SELECT name, id FROM accounts WHERE name NOT LIKE '%one%' ORDER BY name;</code></p>\n<p>/* All companies whose names do not end with 's'. */\n<code>SELECT name, id FROM accounts WHERE name NOT LIKE '%s' ORDER BY name;</code></p>\n<p>/* Write a query that returns all the orders where the standard<em>qty is over 1000, the poster</em>qty is 0, and the gloss<em>qty is 0. */\n`SELECT *\nFROM orders\nWHERE standard</em>qty > 1000 AND poster<em>qty = 0 AND gloss</em>qty = 0;`</p>\n<p>/* Using the accounts table, find all the companies whose names do not start with 'C' and end with 's'. */\n<code>SELECT name, id, website FROM accounts WHERE name NOT LIKE 'C%' AND name LIKE '%s' ORDER BY name;</code></p>\n<p>/* query that displays the order date and gloss<em>qty data for all orders where gloss</em>qty is between 24 and 29 <em>/\n/</em> with BETWEEN */\n<code>SELECT occurred_at, gloss_qty FROM orders WHERE gloss_qty BETWEEN 24 AND 29 ORDER BY gloss_qty;</code></p>\n<p>/* without */\n<code>SELECT occurred_at, gloss_qty FROM orders WHERE gloss_qty > 24 AND gloss_qty &#x3C; 29 ORDER BY gloss_qty;</code></p>\n<p>/* Use the web<em>events table to find all information regarding individuals who were contacted via the organic or adwords channels, and started their account at any point in 2016, sorted from newest to oldest. */\n`SELECT *\nFROM web</em>events\nWHERE channel IN ('organic', 'adwords') AND occurred<em>at BETWEEN '2016-01-01T00:00:00.000Z' AND '2016-12-31T11:59:59.000Z'\nORDER BY occurred</em>at DESC;`</p>\n<p>/* OR */\n<code>SELECT * FROM web_events WHERE channel IN ('organic', 'adwords') AND occurred_at BETWEEN '2016-01-01' AND '2017-01-01' ORDER BY occurred_at DESC;</code></p>\n<p>/* Find list of orders ids where either gloss<em>qty or poster</em>qty is greater than 4000. */\n<code>SELECT id, gloss_qty, poster_qty FROM orders WHERE gloss_qty > 4000 OR poster_qty > 4000;</code></p>\n<p>/* Write a query that returns a list of orders where the standard<em>qty is zero and either the gloss</em>qty or poster<em>qty is over 1000. */\n`SELECT id, standard</em>qty, gloss<em>qty, poster</em>qty\nFROM orders\nWHERE standard<em>qty = 0 AND (gloss</em>qty > 1000 OR poster_qty > 1000);`</p>\n<p>/* Find all the company names that start with a 'C' or 'W', and the primary contact contains 'ana' or 'Ana', but it doesn't contain 'eana'. */\n<code>SELECT id, name, primary_poc FROM accounts WHERE (name LIKE 'C%' OR name LIKE 'W%') AND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%') AND (primary_poc NOT LIKE '%eana%'));</code></p>\n<p><code>SELECT * FROM accounts WHERE (name LIKE 'C%' OR name LIKE 'W%') AND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%') AND primary_poc NOT LIKE '%eana%');</code></p>\n<p>/* JOIN <em>/\n`SELECT orders.</em>\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id;`</p>\n<p>/* only name from accounts and occurred<em>at from orders */\n`SELECT accounts.name, orders.occurred</em>at\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id;`</p>\n<p>/* all the data from the accounts table, and all the data from the orders table. */\n<code>SELECT * FROM orders JOIN accounts ON orders.account_id = accounts.id;</code></p>\n<p>/* all data from orders only <em>/\n`SELECT orders.</em>\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id;`</p>\n<p>/* standard<em>qty, gloss</em>qty, and poster<em>qty from the orders table, and the website and the primary</em>poc from the accounts table. */\n<code>SELECT orders.standard_qty, orders.gloss_qty, orders.poster_qty, accounts.website, accounts.primary_poc FROM orders JOIN accounts ON orders.account_id = accounts.id;</code></p>\n<p>/* more options */\n<code>SELECT orders.account_id, orders.total_amt_usd, accounts.name FROM orders JOIN accounts ON orders.account_id = accounts.id ORDER BY orders.total_amt_usd DESC;</code></p>\n<p>/* join three tables with all data */\n<code>SELECT * FROM web_events JOIN accounts ON web_events.account_id = accounts.id JOIN orders ON accounts.id = orders.account_id</code></p>\n<p>/* use aliases */\n<code>SELECT o.standard_qty, o.gloss_qty, o.poster_qty, a.website, a.primary_poc FROM orders o JOIN accounts a ON o.account_id = a.id;</code></p>\n<p>/* Provide a table for all web<em>events associated with account name of Walmart. There should be three columns. Be sure to include the primary</em>poc, time of the event, and the channel for each event. Additionally, you might choose to add a fourth column to assure only Walmart events were chosen. */\n<code>SELECT a.name, a.primary_poc, w.channel FROM web_events w JOIN accounts a ON w.account_id = a.id WHERE a.name LIKE 'Walmart';</code></p>\n<p>/* a table that provides the region for each sales<em>rep along with their associated accounts. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name. */\n`SELECT\nr.name region</em>name,\ns.name rep<em>name,\na.name account</em>name\nFROM sales<em>reps s\nJOIN region r\nON s.region</em>id = r.id\nJOIN accounts a\nON s.id = a.sales<em>rep</em>id\nORDER BY account_name;`</p>\n<p>/* Provide the name for each region for every order, as well as the account name and the unit price they paid (total<em>amt</em>usd/total) for the order. Your final table should have 3 columns: region name, account name, and unit price. A few accounts have 0 for total, so I divided by (total + 0.01) to assure not dividing by zero. */\n<code>SELECT region.name region_name, accounts.name account_name, (orders.total_amt_usd/(orders.total + 0.01)) AS unit_price FROM orders JOIN accounts ON orders.account_id = accounts.id JOIN sales_reps ON accounts.sales_rep_id = sales_reps.id JOIN region ON sales_reps.region_id = region.id;</code></p>\n<p>/* Provide a table that provides the region for each sales<em>rep along with their associated accounts. This time only for the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.*/\n`SELECT\nr.name region</em>name,\ns.name rep<em>name,\na.name account</em>name\nFROM region r\nJOIN sales<em>reps s\nON r.id = s.region</em>id\nJOIN accounts a\nON s.id = a.sales<em>rep</em>id\nWHERE r.name = 'Midwest'\nORDER BY a.name;`</p>\n<p>/* Provide a table that provides the region for each sales<em>rep along with their associated accounts. This time only for accounts where the sales rep has a first name starting with S and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.*/\n`SELECT\nr.name region</em>name,\ns.name rep<em>name,\na.name account</em>name\nFROM region r\nJOIN sales<em>reps s\nON r.id = s.region</em>id\nJOIN accounts a\nON s.id = a.sales<em>rep</em>id\nWHERE s.name LIKE 'S%' AND r.name = 'Midwest'\nORDER BY a.name;`</p>\n<p>/* Provide a table that provides the region for each sales<em>rep along with their associated accounts. This time only for accounts where the sales rep has a last name starting with K and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name.*/\n`SELECT\nr.name region</em>name,\ns.name rep<em>name,\na.name account</em>name\nFROM region r\nJOIN sales<em>reps s\nON r.id = s.region</em>id\nJOIN accounts a\nON s.id = a.sales<em>rep</em>id\nWHERE s.name LIKE '% K%' AND r.name = 'Midwest'\nORDER BY a.name;`</p>\n<p>/* Provide the name for each region for every order, as well as the account name and the unit price they paid (total<em>amt</em>usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100. Your final table should have 3 columns: region name, account name, and unit price. In order to avoid a division by zero error, adding .01 to the denominator here is helpful total<em>amt</em>usd/(total+0.01).*/\n<code>SELECT r.name region_name, a.name account_name, (o.total_amt_usd/(o.total + 0.01)) unit_price FROM orders o JOIN accounts a ON o.account_id = a.id JOIN sales_reps s ON a.sales_rep_id = s.id JOIN region r ON s.region_id = r.id WHERE o.standard_qty > 100;</code></p>\n<p>/* Provide the name for each region for every order, as well as the account name and the unit price they paid (total<em>amt</em>usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the smallest unit price first. In order to avoid a division by zero error, adding .01 to the denominator here is helpful (total<em>amt</em>usd/(total+0.01).*/\n<code>SELECT r.name region_name, a.name account_name, (o.total_amt_usd/(o.total + 0.01)) unit_price FROM orders o JOIN accounts a ON o.account_id = a.id JOIN sales_reps s ON a.sales_rep_id = s.id JOIN region r ON s.region_id = r.id WHERE o.standard_qty > 100 AND o.poster_qty > 50 ORDER BY unit_price;</code></p>\n<p>/* Provide the name for each region for every order, as well as the account name and the unit price they paid (total<em>amt</em>usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the largest unit price first. In order to avoid a division by zero error, adding .01 to the denominator here is helpful (total<em>amt</em>usd/(total+0.01). */\n<code>SELECT r.name region_name, a.name account_name, (o.total_amt_usd/(o.total + 0.01)) unit_price FROM orders o JOIN accounts a ON o.account_id = a.id JOIN sales_reps s ON a.sales_rep_id = s.id JOIN region r ON s.region_id = r.id WHERE o.standard_qty > 100 AND o.poster_qty > 50 ORDER BY unit_price DESC;</code></p>\n<p>/* What are the different channels used by account id 1001? Your final table should have only 2 columns: account name and the different channels. You can try SELECT DISTINCT to narrow down the results to only the unique values. */\n<code>SELECT DISTINCT a.name, w.channel FROM web_events w JOIN accounts a ON w.account_id = a.id WHERE w.account_id = 1001;</code></p>\n<p>/* Find all the orders that occurred in 2015. Your final table should have 4 columns: occurred<em>at, account name, order total, and order total</em>amt<em>usd. */\n`SELECT\no.occurred</em>at date,\na.name account,\no.total total,\no.total<em>amt</em>usd amount\nFROM orders o\nJOIN accounts a\nON o.account<em>id = a.id\nWHERE o.occurred</em>at BETWEEN '2015-01-01' AND '2015-12-31'\nORDER BY date;/* ERD - <a href=\"https://video.udacity-data.com/topher/2017/October/59e946e7_erd/erd.png\">https://video.udacity-data.com/topher/2017/October/59e946e7_erd/erd.png</a> */`</p>","frontmatter":{"title":"SQL Cheat Sheet."}}},"pageContext":{"slug":"/til0136/"}}