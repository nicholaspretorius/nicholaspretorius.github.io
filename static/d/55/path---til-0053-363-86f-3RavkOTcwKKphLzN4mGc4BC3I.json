{"data":{"markdownRemark":{"html":"<p>As part of the learning process, I have recently been spending some time looking into Vue.js and React.js. My initial thoughts are: </p>\n<h4>Vue.js</h4>\n<p>Vue.js seems to sit somewhere between AngularJs and React in that:</p>\n<ul>\n<li>Vue uses custom attributes such as v-model and v-for which are akin to Angular ng-model or ng-repeat (ngFor). </li>\n<li>Vue seems to use props and data, which on the surface seems React-like.</li>\n<li>It's interesting that Vue uses .vue files which separate out/contain template, script and style in sections in one file. This looks like it would be useful in small applications, but I am not sure how well it will work once apps get larger? (Maybe if components are kept small and data-flow is well managed it won't be an issue.) </li>\n<li>Vue seems to 'just work' in a way that reminds me of the original AngularJs.</li>\n</ul>\n<h4>React</h4>\n<p>React.js looks to be quite different to Angular in several ways: </p>\n<ul>\n<li>Everything is JavaScript.</li>\n<li>Webpack/Babel was a bit tricky to setup (I did not use create-react-app). *</li>\n<li>Very component based.</li>\n<li>Seems to be <em>just</em> a view layer (whereas AngularJs bundles most of what you need together into one opinionated framework).</li>\n<li>Redux is interesting... </li>\n</ul>\n<p>Overall, it is far too early for me to have much of an opinion either way, but it is interesting to be trying something different for a change! </p>\n<ul>\n<li>Regarding Webpack/Babel - The part I struggled with in setting up Webpack/Babel was that <code>import</code> would not be recognised. I tried updating to @babel without any luck. Then attempted using plugin-dynamic-import and node-plugin-dynamic import without success. Finally, I updated to Webpack 4 and removed the plugins and it just seemed to work! :)</li>\n</ul>","frontmatter":{"title":"First Thoughts: Vue and React."}}},"pageContext":{"slug":"/til0053/"}}