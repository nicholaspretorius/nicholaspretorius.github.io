{"data":{"markdownRemark":{"html":"<p>I completed the first course's materials in the Udacity React Nanodegree program today. After spending the first few sections getting up to speed, the content today covered React Router, paticularly, react-router-dom. To finalise this section of the course, there is a practical course project to consolidate the course content so far. As part of the requirements, Udacity has styelguides to adhere to when coding for this. Here they are: </p>\n<ul>\n<li><a href=\"http://udacity.github.io/frontend-nanodegree-styleguide/index.html\">HTML</a></li>\n<li><a href=\"http://udacity.github.io/frontend-nanodegree-styleguide/css.html\">CSS</a></li>\n<li><a href=\"http://udacity.github.io/frontend-nanodegree-styleguide/javascript.html\">JavaScript</a></li>\n<li><a href=\"https://udacity.github.io/git-styleguide/\">Git</a></li>\n</ul>\n<p>In particular, I found the Git styleguide of interest since, to date, I have not worked on a project with a Git-specific guideline. Granted, I have worked on projects with guidelines on repo-usage, but we did not have such detailed instructions. I think I will find these quite useful in future:</p>\n<ul>\n<li>feat: a new feature</li>\n<li>fix: a bug fix</li>\n<li>docs: changes to documentation</li>\n<li>style: formatting, missing semi colons, etc; no code change</li>\n<li>refactor: refactoring production code</li>\n<li>test: adding tests, refactoring test; no production code change</li>\n<li>chore: updating build tasks, package manager configs, etc; no production code change</li>\n</ul>","frontmatter":{"title":"Udacity Git Commit Message Styleguide."}}},"pageContext":{"slug":"/til0120/"}}