{"data":{"markdownRemark":{"html":"<p>Some useful examples on basic SQL usage: </p>\n<p>Based on the following <a href=\"https://video.udacity-data.com/topher/2017/October/59e946e7_erd/erd.png\">ERD(Entity Relationship Diagram)</a></p>\n<h4>All.</h4>\n<p><code>SELECT * from orders;</code></p>\n<h4>Column selectors.</h4>\n<pre><code class=\"language-SELECT\">FROM orders;```\n\n#### Using limit. \n\n`SELECT *\nFROM orders\nLIMIT 10;`\n\n#### Combined.\n\n`SELECT occurred_at, account_id, channel\nFROM web_events\nLIMIT 15;`\n\n#### Order by. \n\nDefault is ASC.\n\n`SELECT id, occurred_at, total_amt_usd\nFROM orders\nORDER BY occurred_at DESC\nLIMIT 10;`\n\n\n#### ASC.\n\n`SELECT id, occurred_at, total_amt_usd\nFROM orders\nORDER BY occurred_at\nLIMIT 10;`\n\n#### Examples: \n\nWrite a query to return the top 5 orders in terms of largest total_amt_usd. Include the id, account_id, and total_amt_usd:\n\n`SELECT id, occurred_at, total_amt_usd\nFROM orders\nORDER BY total_amt_usd DESC\nLIMIT 10;`\n\nWrite a query to return the lowest 20 orders in terms of smallest total_amt_usd. Include the id, account_id, and total_amt_usd:\n\n`SELECT id, occurred_at, total_amt_usd\nFROM orders\nORDER BY total_amt_usd\nLIMIT 20;`\n\nWrite a query that displays the order ID, account ID, and total dollar amount for all the orders, sorted first by the account ID (in ascending order), and then by the total dollar amount (in descending order):\n\n`SELECT id, account_id, total_amt_usd\nFROM orders\nORDER BY account_id, total_amt_usd DESC;`\n\nNow write a query that again displays order ID, account ID, and total dollar amount for each order, but this time sorted first by total dollar amount (in descending order), and then by account ID (in ascending order):\n\n`SELECT id, account_id, total_amt_usd\nFROM orders\nORDER BY total_amt_usd DESC, account_id;`\n\nPulls the first 5 rows and all columns from the orders table that have a dollar amount of gloss_amt_usd greater than or equal to 1000:\n\n`SELECT * \nFROM orders\nWHERE gloss_amt_usd >= 1000\nLIMIT 5;`\n\nPulls the first 10 rows and all columns from the orders table that have a total_amt_usd less than 500:\n\n`SELECT * \nFROM orders\nWHERE total_amt_usd &#x3C; 500\nLIMIT 10;`\n\nFilter the accounts table to include the company name, website, and the primary point of contact (primary_poc) just for the Exxon Mobil company in the accounts table:\n\n`SELECT name, website, primary_poc\nFROM accounts\nWHERE name LIKE 'Exxon Mobil';`\n\nOR\n\n`SELECT name, website, primary_poc\nFROM accounts\nWHERE name = 'Exxon Mobil';`\n\nCreate a column that divides the standard_amt_usd by the standard_qty to find the unit price for standard paper for each order. Limit the results to the first 10 orders, and include the id and account_id fields:\n\n`SELECT id, account_id, standard_amt_usd/standard_qty AS \"Unit Price\"\nFROM orders\nLIMIT 10;`\n\nOR\n\n`SELECT id, account_id, standard_amt_usd/standard_qty AS unit_price\nFROM orders\nLIMIT 10;`\n\nWrite a query that finds the percentage of revenue that comes from poster paper for each order. You will need to use only the columns that end with _usd. (Try to do this without using the total column.) Display the id and account_id fields also:\n\n`SELECT id, account_id, \n   poster_amt_usd/(standard_amt_usd + gloss_amt_usd + poster_amt_usd) AS post_per\nFROM orders\nLIMIT 10;`\n\nAll the companies whose names start with 'C':\n\n`SELECT id, name, website \nFROM accounts\nWHERE name LIKE 'C%';`\n\nAll companies whose names contain the string 'one' somewhere in the name:\n\n`SELECT id, name, website \nFROM accounts\nWHERE name LIKE '%one%';`\n\nAll companies whose names end with 's':\n\n`SELECT id, name, website \nFROM accounts\nWHERE name LIKE '%s';`\n\nUse the accounts table to find the account name, primary_poc, and sales_rep_id for Walmart, Target, and Nordstrom:\n\n`SELECT name, primary_poc, sales_rep_id\nFROM accounts\nWHERE name IN ('Walmart', 'Target', 'Nordstrom')\nORDER BY name;`\n\nUse the web_events table to find all information regarding individuals who were contacted via the channel of organic or adwords:\n\n`SELECT *\nFROM web_events\nWHERE channel IN ('organic', 'adwords')\nORDER BY id;`\n\nUse the accounts table to find the account name, primary poc, and sales rep id for all stores except Walmart, Target, and Nordstrom:\n\n`SELECT name, primary_poc, sales_rep_id \nFROM accounts\nWHERE name NOT IN ('Walmart', 'Target', 'Nordstrom')\nORDER BY name;`\n\nUse the web_events table to find all information regarding individuals who were contacted via any method except using organic or adwords methods:\n\n`SELECT *\nFROM web_events\nWHERE channel NOT IN ('organic', 'adwords')\nORDER BY id;`\n\nAll the companies whose names do not start with 'C':\n\n`SELECT name, id\nFROM accounts\nWHERE name NOT LIKE 'C%'\nORDER BY name;`\n\nAll companies whose names do not contain the string 'one' somewhere in the name:\n\n`SELECT name, id\nFROM accounts\nWHERE name NOT LIKE '%one%'\nORDER BY name;`\n\nAll companies whose names do not end with 's':\n\n`SELECT name, id\nFROM accounts\nWHERE name NOT LIKE '%s'\nORDER BY name;`\n\nWrite a query that returns all the orders where the standard_qty is over 1000, the poster_qty is 0, and the gloss_qty is 0:\n\n`SELECT *\nFROM orders\nWHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0;`\n\nUsing the accounts table, find all the companies whose names do not start with 'C' and end with 's':\n\n`SELECT name, id, website\nFROM accounts\nWHERE name NOT LIKE 'C%' AND name LIKE '%s'\nORDER BY name;`\n\nQuery that displays the order date and gloss_qty data for all orders where gloss_qty is between 24 and 29:\n\nWith BETWEEN:\n\n`SELECT occurred_at, gloss_qty\nFROM orders\nWHERE gloss_qty BETWEEN 24 AND 29\nORDER BY gloss_qty;`\n\nWithout:\n\n`SELECT occurred_at, gloss_qty\nFROM orders\nWHERE gloss_qty > 24 AND gloss_qty &#x3C; 29\nORDER BY gloss_qty;`\n\nUse the web_events table to find all information regarding individuals who were contacted via the organic or adwords channels, and started their account at any point in 2016, sorted from newest to oldest:\n\n`SELECT * \nFROM web_events\nWHERE channel IN ('organic', 'adwords') AND occurred_at BETWEEN '2016-01-01T00:00:00.000Z' AND '2016-12-31T11:59:59.000Z'\nORDER BY occurred_at DESC;`\n\nOR\n\n`SELECT *\nFROM web_events\nWHERE channel IN ('organic', 'adwords') AND occurred_at BETWEEN '2016-01-01' AND '2017-01-01'\nORDER BY occurred_at DESC;`\n\nFind list of orders ids where either gloss_qty or poster_qty is greater than 4000:\n\n`SELECT id, gloss_qty, poster_qty \nFROM orders \nWHERE gloss_qty > 4000 OR poster_qty > 4000;`\n\nWrite a query that returns a list of orders where the standard_qty is zero and either the gloss_qty or poster_qty is over 1000:\n\n`SELECT id, standard_qty, gloss_qty, poster_qty \nFROM orders \nWHERE standard_qty = 0 AND (gloss_qty > 1000 OR poster_qty > 1000);`\n\nFind all the company names that start with a 'C' or 'W', and the primary contact contains 'ana' or 'Ana', but it doesn't contain 'eana':\n\n`SELECT id, name, primary_poc\nFROM accounts \nWHERE (name LIKE 'C%' OR name LIKE 'W%') \nAND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%') AND (primary_poc NOT LIKE '%eana%'));`\n\n`SELECT *\nFROM accounts\nWHERE (name LIKE 'C%' OR name LIKE 'W%') \n           AND ((primary_poc LIKE '%ana%' OR primary_poc LIKE '%Ana%') \n           AND primary_poc NOT LIKE '%eana%');`\n\n\n#### JOINs.\n\n`SELECT orders.*\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id;`\n\nOnly name from accounts and occurred_at from orders:\n\n`SELECT accounts.name, orders.occurred_at\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id;`\n\nAll the data from the accounts table, and all the data from the orders table:\n\n`SELECT *\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id;`\n\nAll data from orders only:\n\n`SELECT orders.*\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id;`\n\nStandard_qty, gloss_qty, and poster_qty from the orders table, and the website and the primary_poc from the accounts table:\n\n`SELECT orders.standard_qty, orders.gloss_qty, orders.poster_qty, accounts.website, accounts.primary_poc\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id; `\n\nMore options:\n\n`SELECT orders.account_id, orders.total_amt_usd, accounts.name\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id\nORDER BY orders.total_amt_usd DESC;`\n\nJoin three tables with all data:\n\n`SELECT *\nFROM web_events\nJOIN accounts\nON web_events.account_id = accounts.id\nJOIN orders\nON accounts.id = orders.account_id`\n\n#### Aliases.\n\n`SELECT o.standard_qty, o.gloss_qty, o.poster_qty, a.website, a.primary_poc\nFROM orders o\nJOIN accounts a\nON o.account_id = a.id; `\n\nProvide a table for all web_events associated with account name of Walmart. There should be three columns. Be sure to include the primary_poc, time of the event, and the channel for each event. Additionally, you might choose to add a fourth column to assure only Walmart events were chosen:\n\n`SELECT a.name, a.primary_poc, w.channel\nFROM web_events w\nJOIN accounts a\nON w.account_id = a.id\nWHERE a.name LIKE 'Walmart';`\n\nA table that provides the region for each sales_rep along with their associated accounts. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name:\n\n`SELECT \nr.name region_name,\ns.name rep_name, \na.name account_name\nFROM sales_reps s\nJOIN region r\nON s.region_id = r.id\nJOIN accounts a\nON s.id = a.sales_rep_id\nORDER BY account_name;`\n\nProvide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. Your final table should have 3 columns: region name, account name, and unit price. A few accounts have 0 for total, so I divided by (total + 0.01) to assure not dividing by zero:\n\n`SELECT \nregion.name region_name,\naccounts.name account_name,\n(orders.total_amt_usd/(orders.total + 0.01)) AS unit_price\nFROM orders\nJOIN accounts\nON orders.account_id = accounts.id\nJOIN sales_reps\nON accounts.sales_rep_id = sales_reps.id\nJOIN region\nON sales_reps.region_id = region.id;`\n\nProvide a table that provides the region for each sales_rep along with their associated accounts. This time only for the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name:\n\n`SELECT \nr.name region_name, \ns.name rep_name, \na.name account_name\nFROM region r\nJOIN sales_reps s\nON r.id = s.region_id\nJOIN accounts a\nON s.id = a.sales_rep_id\nWHERE r.name = 'Midwest'\nORDER BY a.name;`\n\n\nProvide a table that provides the region for each sales_rep along with their associated accounts. This time only for accounts where the sales rep has a first name starting with S and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name:\n\n`SELECT \nr.name region_name, \ns.name rep_name, \na.name account_name\nFROM region r\nJOIN sales_reps s\nON r.id = s.region_id\nJOIN accounts a\nON s.id = a.sales_rep_id\nWHERE s.name LIKE 'S%' AND r.name = 'Midwest'\nORDER BY a.name;`\n\nProvide a table that provides the region for each sales_rep along with their associated accounts. This time only for accounts where the sales rep has a last name starting with K and in the Midwest region. Your final table should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) according to account name:\n\n`SELECT \nr.name region_name, \ns.name rep_name, \na.name account_name\nFROM region r\nJOIN sales_reps s\nON r.id = s.region_id\nJOIN accounts a\nON s.id = a.sales_rep_id\nWHERE s.name LIKE '% K%' AND r.name = 'Midwest'\nORDER BY a.name;`\n\nProvide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100. Your final table should have 3 columns: region name, account name, and unit price. In order to avoid a division by zero error, adding .01 to the denominator here is helpful total_amt_usd/(total+0.01):\n\n`SELECT \nr.name region_name,\na.name account_name,\n(o.total_amt_usd/(o.total + 0.01)) unit_price\nFROM orders o\nJOIN accounts a\nON o.account_id = a.id\nJOIN sales_reps s\nON a.sales_rep_id = s.id\nJOIN region r\nON s.region_id = r.id\nWHERE o.standard_qty > 100;`\n\nProvide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the smallest unit price first. In order to avoid a division by zero error, adding .01 to the denominator here is helpful (total_amt_usd/(total+0.01):\n\n`SELECT \nr.name region_name,\na.name account_name,\n(o.total_amt_usd/(o.total + 0.01)) unit_price\nFROM orders o\nJOIN accounts a\nON o.account_id = a.id\nJOIN sales_reps s\nON a.sales_rep_id = s.id\nJOIN region r\nON s.region_id = r.id\nWHERE o.standard_qty > 100 AND o.poster_qty > 50\nORDER BY unit_price;`\n\nProvide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50. Your final table should have 3 columns: region name, account name, and unit price. Sort for the largest unit price first. In order to avoid a division by zero error, adding .01 to the denominator here is helpful (total_amt_usd/(total+0.01):\n\n`SELECT \nr.name region_name,\na.name account_name,\n(o.total_amt_usd/(o.total + 0.01)) unit_price\nFROM orders o\nJOIN accounts a\nON o.account_id = a.id\nJOIN sales_reps s\nON a.sales_rep_id = s.id\nJOIN region r\nON s.region_id = r.id\nWHERE o.standard_qty > 100 AND o.poster_qty > 50\nORDER BY unit_price DESC;`\n\nWhat are the different channels used by account id 1001? Your final table should have only 2 columns: account name and the different channels. You can try SELECT DISTINCT to narrow down the results to only the unique values:\n\n`SELECT DISTINCT\na.name,\nw.channel\nFROM web_events w\nJOIN accounts a\nON w.account_id = a.id\nWHERE w.account_id = 1001;`\n\nFind all the orders that occurred in 2015. Your final table should have 4 columns: occurred_at, account name, order total, and order total_amt_usd:\n\n`SELECT \no.occurred_at date,\na.name account,\no.total total,\no.total_amt_usd amount\nFROM orders o\nJOIN accounts a\nON o.account_id = a.id\nWHERE o.occurred_at BETWEEN '2015-01-01' AND '2015-12-31'\nORDER BY date;/* ERD - https://video.udacity-data.com/topher/2017/October/59e946e7_erd/erd.png */`\n</code></pre>","frontmatter":{"title":"SQL Cheat Sheet."}}},"pageContext":{"slug":"/til0136/"}}