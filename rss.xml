<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[PostCode]]></title><description><![CDATA[Rudimentary 'Today I Learned' log.]]></description><link>https://nicholaspretorius.github.io</link><generator>RSS for Node</generator><lastBuildDate>Wed, 03 Jan 2018 19:37:20 GMT</lastBuildDate><item><title><![CDATA[TIL 0025]]></title><description><![CDATA[Node.js, Nodemailer + Express Handlebars, Express + TypeScript Nodemailer-express-handlebars is a useful plugin for Nodemailer that allows…]]></description><link>https://nicholaspretorius.github.io/til0025/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0025/</guid><pubDate>Wed, 03 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Node.js, Nodemailer + Express Handlebars, Express + TypeScript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nodemailer-express-handlebars is a useful plugin for Nodemailer that allows you to use Handlebars templates in your HTML emails | &lt;a href=&quot;https://github.com/yads/nodemailer-express-handlebars&quot;&gt;Link&lt;/a&gt; &lt;br/&gt;
The documentation on that page does not provide a full usage example and is really short on details. I then found this article which was incredibly helpful! | &lt;a href=&quot;http://excellencenodejsblog.com/express-nodemailer-sending-mails/&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
...
var hbs = require(&apos;nodemailer-express-handlebars&apos;);
var options = {
viewEngine : {
    extname: &apos;.hbs&apos;, // handlebars extension
    layoutsDir: &apos;views/email/&apos;, // location of handlebars templates
    defaultLayout: &apos;template&apos;, // name of main template
    partialsDir: &apos;views/email/&apos;, // location of your subtemplates aka. header, footer etc
},
viewPath: &apos;views/email&apos;,
extName: &apos;.hbs&apos;
};
...
mailer.use(&apos;compile&apos;, hbs(options));
mailer.sendMail({
from: &apos;test@test.com&apos;,
to: req.body.to,
subject: req.body.subject,
template: &apos;template&apos;,
context: {
    firstName: req.body.firstName,
    lastName: req.body.lastName,
    ...
}
}, function(error, response)...) 
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Most of my day was then spent trying to figure out how best to put Node.js, Express and its dependencies into a working app via Webpack. I have not been very successful so far... My main issue at present is that when I run Webpack I get a lot of errors that say things like: Module not found: Error: Can&apos;t resolve &apos;./decode/&apos; etc &lt;br/&gt;
I did however, find two articles which look promising and that I will be picking for clues:
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;TypeScript, Express and Node.js | &lt;a href=&quot;http://brianflove.com/2016/11/08/typescript-2-express-node/&quot;&gt;Link&lt;/a&gt; &lt;br/&gt;
This is a great article, however, he uses Grunt to build his TypeScript which is not quite what I am looking for. &lt;/li&gt;
&lt;li&gt;TypeScript, ExpressJS API with Webpack | &lt;a href=&quot;https://medium.com/@Pierre_anthill/typescript-expressjs-api-with-webpack-4655126d884b&quot;&gt;Link&lt;/a&gt;&lt;br/&gt;
Another great article that look to cover most of what I am looking for.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0024]]></title><description><![CDATA[PowerShell, Plain JS Post, Enabling CORS on Express and Express Body Parser Determine the version of PowerShell you are running…]]></description><link>https://nicholaspretorius.github.io/til0024/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0024/</guid><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;PowerShell, Plain JS Post, Enabling CORS on Express and Express Body Parser&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Determine the version of PowerShell you are running: $PSVersionTable.PSVersion&lt;/li&gt;
&lt;li&gt;Determine the execution policy on PowerShell (this is necessary to determine whether you can ru PowerShell scripts): Get-ExecutionPolicy&lt;/li&gt;
&lt;li&gt;Useful resource for setting up Invoke-RestMethod calls via PowerShell scripts | &lt;a href=&quot;https://www.jokecamp.com/blog/invoke-restmethod-powershell-examples/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable CORS on an Express server | &lt;a href=&quot;https://enable-cors.org/server_expressjs.html&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
app.use(function(req, res, next) {
res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept&quot;);
next();
});
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;To use req.body inside of Express you need to load Body Parser | &lt;a href=&quot;https://stackoverflow.com/questions/10005939/how-do-i-consume-the-json-post-data-in-an-express-application/10007542#10007542&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First install it: npm i body-parser&lt;/p&gt;
&lt;pre&gt;
var express = require(&apos;express);
var bodyParser = require(&apos;body-parser&apos;);
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;var app = express();&lt;/p&gt;
&lt;p&gt;app.use(bodyParser.json());&lt;/p&gt;
&lt;p&gt;app.post(&apos;/&apos;, function(req, res) {
console.log(req.body);
})
app.listen(8000);&lt;/p&gt;
&lt;/pre&gt;
* In package.json check: &quot;main&quot;: &quot;app.js&quot;, then you can just run: nodemon instead of: nodemon app.js
* npm i pug --save
* mkdir view &amp;&amp; cd_$
* touch index.pug
* Then:
&lt;pre&gt;
    app.set(&apos;view engine&apos;, &apos;pug&apos;);
    ..
    app.get(&apos;/&apos;, (req, res) =&gt; {
        res.render(&apos;index&apos;, {title=&apos;Hello world!&apos;});
    });
&lt;/pre&gt;
* Pug templating 101 (Assume we have var colors = [&apos;red&apos;, &apos;blue&apos;, &apos;green&apos;])
&lt;pre&gt;
    doctype html
    html(lang=&quot;en&quot;)
        head
            title= title
        body
            div.wrapper
            .content
            ul
                each color in colors
                   li color
            p#main Hi!
            #secondary
            if hint 
                p
                    i Hint: #{hint}
            else 
                p (There is no hint)
&lt;/pre&gt;
* Pug locals
&lt;pre&gt;
    app.get(&apos;/cards&apos;, (req, res) =&gt; {
        res.locals.prompt = &quot;What is your question?&quot;;
        res.locals.hint = &quot;Think about something.&quot;; // interpolated from #{hint} above
        res.render(&apos;card&apos;);
        // res.render(&apos;card&apos;, {prompt: &apos;What is your...&apos;, hint: &apos;Think about...&apos;});
    });
&lt;/pre&gt;
* Pug Partials &lt;br/&gt;
In the layout.pug file (along with a: mkdir includes)
&lt;pre&gt;
...
header 
    include includes/header.pug
...
block content
...
    include includes/footer.pug
&lt;/pre&gt;
In the index.pug file: 
&lt;pre&gt;
extends layout.pug
&lt;p&gt;block content
section#wrapper
h1 Hello world!&lt;/p&gt;
&lt;/pre&gt;
&lt;h3&gt;Eloquent JavaScript Chapter 4: Data Structures&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Almost all JavaScript values have properties except null and undefined.&lt;/li&gt;
&lt;li&gt;value.prop prop must be a valid variable name and directly names the propery.&lt;/li&gt;
&lt;li&gt;value[prop] prop is &lt;strong&gt;evaluated&lt;/strong&gt; to get the property name. &lt;/li&gt;
&lt;li&gt;The elements of an array are stored in properties with numbers for their names. &lt;/li&gt;
&lt;li&gt;Properties that contain functions are called methods. Examples are .toUppercase, .toLowerCase for strings. Array have pop(), push(), .join() amongst others. &lt;/li&gt;
&lt;li&gt;You can delete an object property with: delete object.propertyName;&lt;/li&gt;
&lt;li&gt;console.log(&quot;propertyName&quot; in object); // false&lt;/li&gt;
&lt;li&gt;array.shift(); will return (and remove) the first item in the array, as opposed to .pop() which will return and remove the last item in the array. &lt;/li&gt;
&lt;li&gt;Similarly .unshift() add an item to the beginning of an array and .push() adds an item to the end of an array. &lt;/li&gt;
&lt;li&gt;indexOf(x) returns the index of the first instance of x in the array whereas lastIndexOf(x) returns the index of the last instance of x in the array. Both take an optional second argument to indicate where to start the search from. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.slice() takes two parameters, start(inclusive), end(exclusive) and returns an array of the items between start and end. If no second parameter is supplied, it takes all the items after the start.&lt;/p&gt;
&lt;pre&gt;
console.log([0, 1, 2, 3, 4].slice(2, 4));
console.log([0, 1, 2, 3, 4].slice(2));
&lt;/pre&gt; 
&lt;/li&gt;
&lt;li&gt;array1.concat(array2); will put two arrays into one and return the resulting array. &lt;/li&gt;
&lt;li&gt;&quot;   somestring  \n&quot;.trim(); will remove all the whitespace (spaces, tabs, newlines) from the string&lt;/li&gt;
&lt;li&gt;Strings, numbers and booleans are not objects and are &lt;strong&gt;immutable&lt;/strong&gt; which means you cannot add properties to them. &lt;/li&gt;
&lt;li&gt;Whenever a function is called, a special variable names &apos;arguments&apos; is added to the environment in which the function body runs. arguments has a .length property. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Math.random();&lt;/p&gt;
&lt;pre&gt;
console.log(Math.floor(Math.random()*10));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All global variables are stored in the global object, that is window.&lt;/p&gt;
&lt;pre&gt;
var myVar = 10;
console.log(&quot;myVar&quot; in window);
console.log(window.myVar);
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0023]]></title><description><![CDATA[Eloquent JavaScript Chapter 3: Functions Recursion - Generally, recursion can be up to 10 times slower than looping. However, recursion can…]]></description><link>https://nicholaspretorius.github.io/til0023/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0023/</guid><pubDate>Mon, 01 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Eloquent JavaScript Chapter 3: Functions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recursion - Generally, recursion can be up to 10 times slower than looping. However, recursion can be more elegant, as such, the programmer must determine whether efficiency or simplicity is more appropriate. &lt;/p&gt;
&lt;pre&gt;

function power(base, exponent) {
    if (exponent == undefined) {
        exponent = 2;
    }

    var result = 1;

    for (var count = 0; count &lt; exponent; count++) {
        result *= base;
    }
    
    return result;
}

function powerR(base, exponent) {
    if (exponent == 0)
        return 1;
    else
        return base * power(base, exponent - 1);
}

console.log(&quot;Recursive: &quot;, powerR(2, 3));
console.log(&quot;Loop: &quot;, power(2,3));
&lt;/li&gt;
&lt;/ul&gt;
&lt;/pre&gt;
* Closures - The ability to reference an instance of a local variable in an enclosing function.
&lt;pre&gt;
function multiplier(factor) {
    return function(number) {
            console.log(&quot;Factor: &quot;, factor, &quot; Number: &quot;, number);
            return number * factor;
        };
    }
&lt;pre&gt;&lt;code&gt;var twice = multiplier(3);
console.log(twice(5));
&lt;/code&gt;&lt;/pre&gt;
&lt;/pre&gt;
* Lexical scope is the variable &apos;visibility&apos; of variables within a program via combinations of scope. Essentially, local scopes have access to those scope around them. They do not have access to scopes inside of them.  
* Function declarations can be placed anywhere within the program as they are effectively hoisted to the top of the scope when running. 
&lt;pre&gt;
    foo(&apos;bar&apos;);
    // function declaration
    function foo(string) {
        console.log(&apos;Foo&apos;, string);
    }
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Expression functions need to be declared before they are used. &lt;/p&gt;
&lt;pre&gt;
// function definition
var foo = function(string) {
    return &apos;Foo&apos; + string;
}
console.log(foo(&apos;bar&apos;));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;In JavaScript you can have optional arguments/parameters. If there are too many, the extras get ignored. If there are too few, the missing params get undefined. &lt;/li&gt;
&lt;li&gt;There are basically two ways functions are introduced:
Replication - You find there is code repeated in your program and you write a function to remove this repetition.
Purpose - You have something you need to do, so you write a function to do it. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&apos;How difficult it is to find a good name for a function is a good indication of how clear a concept it is that you’re trying to wrap.&apos; - Marijn Haverbeke&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;There are generally three types of functions:
Pure functions - return values and receive values, they do not access global variables or have side effects. They do not rely on side-effects from elsewhere.
Side effect functions - do not return a value and typically adjust globals. These can be difficult to reason about.
Combination functions - these are functions that combine both the approaches&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TWIL 0003]]></title><description><![CDATA[Thoughts on improving JavaScript coding ability. As 2018 begins, one of my primary goals for the first quarter is to improve my JavaScript…]]></description><link>https://nicholaspretorius.github.io/twil0003/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/twil0003/</guid><pubDate>Mon, 01 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Thoughts on improving JavaScript coding ability.&lt;/h3&gt;
&lt;p&gt;As 2018 begins, one of my primary goals for the first quarter is to improve my JavaScript coding abilities. I have been building websites for many years, but when I think on my knowledge, I feel as though I am a very reactionary developer. That is to say, I do what needs to be done for the job at hand and move onto the next without too much reflection on what I have just done. This means I am productive and I do a good job, but I feel there is a deeper understanding of the language and how best to use it that is missing. In order to do so, I have decided on the following approach to better understand and code JavaScript. (Keeping in mind that I am writing code as my day job too): &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read JavaScript programming books to better understand the language from the ground up. I will be reading: &lt;br/&gt;&lt;br/&gt;
Eloquent JavaScript by Marijn Haverbeke  (January). &lt;br/&gt;
JavaScript: The Good Parts by Douglas Crockford (February) &lt;br/&gt;
JavaScript Design Patterns by Addy Osmani (March) &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Based on my reading, I will write Feynman Method-like summaries of what I read and publish them to this site. &lt;/li&gt;
&lt;li&gt;Code the challenges and examples from the above books and publish them on this site.&lt;/li&gt;
&lt;li&gt;Spend at least 15-30 minutes a day reading and learning from the Mozilla JavaScript documentation. | &lt;a href=&quot;https://developer.mozilla.org/bm/docs/Web/JavaScript&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Watch JavaScript coding videos and write the code in them along with some summaries. I will be doing the following courses: &lt;br/&gt;&lt;br/&gt;
Ultimate Angular (January) | &lt;a href=&quot;https://ultimateangular.com/&quot;&gt;Link&lt;/a&gt; &lt;br/&gt;
Team Treehouse&apos;s Fullstack JavaScript track | &lt;a href=&quot;https://teamtreehouse.com/tracks/full-stack-javascript&quot;&gt;Link&lt;/a&gt; &lt;br/&gt;
Tyler McGinnis&apos; React Courses (March) | &lt;a href=&quot;https://tylermcginnis.com/courses/&quot;&gt;Link&lt;/a&gt; &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Take the knowledge and best practice learned (hopefully) from the above and ACTUALLY apply it. It is one thing to know something, it is quite another to do! &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many people know they should eat healthier, exercise more, eat donuts less and so on. The reality is that we often do not &lt;strong&gt;live&lt;/strong&gt; the way we &lt;strong&gt;know&lt;/strong&gt; we should. In my case it is similar when it comes to coding. Sometimes the knowing goes out the window and I end up writing code that works, but might not be the best code I could write. Much like in life, most people cannot go from the couch to running a marathon in one day. Instead you need to build new habits, day by day, reshape and remove old ones and put one foot in front of the other until you get to the level you aspire to. &lt;/p&gt;
&lt;h5&gt;Updates&lt;/h5&gt;
&lt;h6&gt;02/01/2018&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;I read Chapter 4 of Eloquent JavaScript - my notes can be found here &lt;a href=&quot;/til0024&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I did not review the MDN docs, however, I did spend quite a bit of time learning some Express basics. &lt;/li&gt;
&lt;li&gt;I did not do a Feynman-like method review of the chapter, I will work on this | &lt;a href=&quot;https://mattyford.com/blog/2014/1/23/the-feynman-technique-model&quot;&gt;Link&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;
Essentially the goal is to: &lt;/li&gt;
&lt;li&gt;Write the title of the topic on the top of the page&lt;/li&gt;
&lt;li&gt;Summarise the concept in plain language using analogies where effective&lt;/li&gt;
&lt;li&gt;Review what you don&apos;t understand to fill in the gaps&lt;/li&gt;
&lt;li&gt;Simplify - pretend you are teaching it to someone else&lt;/li&gt;
&lt;li&gt;I watched around an hours of code, but watched the &lt;a href=&quot;https://teamtreehouse.com/library/express-basics-2&quot;&gt;Treehouse Express Basics&lt;/a&gt; videos instead since it is very relevant to my current tasks at work. &lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;03/01/2018&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;Did not review MDN documents again... I think I need to do this for the first 15-30 minutes in the morning when I get in. Hopefully it will set the tone for the day. &lt;/li&gt;
&lt;li&gt;No Feynman-like reviews either, I think I may need to remove this from the list as I am finding myself short of time. &lt;/li&gt;
&lt;li&gt;I have not yet read Eloquent JavaScript today, pressure to learn Node.js, Express and other things means I am spending my time research these topics and continuing with the video courses. &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0022]]></title><description><![CDATA[FizzBuzz and other exercises Exercise 2 from Eloquent JavaScript  Exercise 3 from Eloquent JavaScript Exercise 4 from Eloquent JavaScript…]]></description><link>https://nicholaspretorius.github.io/til0022/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0022/</guid><pubDate>Sat, 30 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;FizzBuzz and other exercises&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Exercise 2 from Eloquent JavaScript &lt;/p&gt;
&lt;pre&gt;
//Problem: Print out all numbers from 1 to 100. When divisible by 3 print Fizz, then divisible by 5 print Buzz, when divisible by both 3 and 5 print FizzBuzz
// Solution: JS - Loop through all the numbers, check modulo 3, 5 and 3 and 5, print appropriate word

function fizzBuzz(min, max) {
    
    function fizzOrBuzz (number, divisorA, divisorB) {
        if (divisorB) {
            return ((number % divisorA === 0) &amp;&amp; (number % divisorB === 0))  
        } else {
            return number % divisorA === 0
        }
    }
    
    for (var i = min; i &lt;= max; i++) {
        if (fizzOrBuzz(i, 3, 5)) {
            console.log(&apos;FizzBuzz (&apos;, i , &apos;)&apos;);
        } else if (fizzOrBuzz(i, 3)) {
            console.log(&apos;Fizz (&apos;, i, &apos;)&apos;);
        } else if (fizzOrBuzz(i, 5)) {
            console.log(&apos;Buzz (&apos;, i , &apos;)&apos;);
        } else {
            console.log(i);
        }
    }
}

fizzBuzz(1, 100);
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exercise 3 from Eloquent JavaScript&lt;/p&gt;
&lt;pre&gt;
// Problem: Draw out a chessboard of 8*8 using the space and # characters, alternating the start character. 
// Solution: JS - Use a loop to draw out the columns then at the end, alternate a boolean to start with one character or the other. 

function chessBoard(spread) {
    var blank = false;
    var a = &apos; &apos;, b = &apos;#&apos;, row = &apos;&apos;;
    
    for (var c = 1; c &lt;= spread*spread; c++) {
        if (c % spread === 0) {
            row += &apos;\n&apos;
        }
        else if(blank) {
            row += a;
            blank = !blank;
        } else {
            row += b
            blank = !blank;
        }
    }
    console.log(row);
}

chessBoard(8);
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exercise 4 from Eloquent JavaScript &lt;/p&gt;
&lt;pre&gt;
// Problem: Return the minimum number between two numbers
// Solution: Accept two arguments and determime which is less

function min(a, b) {
    if (typeof(a) === &apos;number&apos; &amp;&amp; typeof(b) === &apos;number&apos;) {
        var min = a &lt; b;
        return min ? a : b
    } else {
        return NaN;
    }   
}

console.log(min(3,-9));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exercise 5 from Eloquent JavaScript &lt;/p&gt;
&lt;pre&gt;
// Problem: Use recursion to determine whether a number is even, if even, return true
// Solution: Create a function that returns true if number is 0, false if number is 1, else subtract 2 from the number

function isEven(number){
    if(number &lt; 0) {
        number = number * -1;
    }

    if (number === 0) {
        return true;
    } else if (number === 1) {
        return false;
    } else {
        number -= 2;
        return isEven(number);
    }
}

console.log(isEven(-34));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exercise 6 from Eloquent JavaScript &lt;/p&gt;
&lt;pre&gt;
// Problem: Create a function that counts how many times a provided letter appears in a string
// Solution: Loop through the string using .charAt to determine whether the letter is a match
function countChars(string, letter){
    var count = 0;
    for (var i = 0; i &lt; string.length; i++) {
        if (string.charAt(i) === letter) {
            count+=1;
        }
    }
    return count;
}

console.log(countChars(&apos;chakkalakka&apos;, &apos;a&apos;));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate prime numbers in a range&lt;/p&gt;
&lt;pre&gt;
function getPrimes(min, max) {

    function isPrimeBruteForce(number){
        for (var i = 2; i &lt; (number - 1); i++) {
            if (number % i === 0) {
                return false;
            }
        }
        return true
    }

    if (min &lt; max &amp;&amp; min &gt; 1 &amp;&amp; max &gt; 1) {
        var primes = [];
        
        for (var i = min; i &lt; max; i++) {
            if(isPrimeBruteForce(i)) {
                primes.push(i);
            }
        }     
        return primes;
    } else {
        return -1;
    }
}

console.log(getPrimes(3, 100));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exercise 7 from Eloquent JavaScript&lt;/p&gt;
&lt;pre&gt;
function range(start, end, increment) {
    var arr = [];
    var inc = 1;
    if (increment) {
        inc = increment;
    } 
    for (var i = start; i &lt;= end; i+=inc) {
        arr.push(i);
    }
    return arr;
}

function sum(array) {
    var sum = 0;
    for (var i = 0; i &lt; array.length; i++) {
        sum = sum + array[i];
    }
    return sum;
}

console.log(sum(range(1,10, 2)));
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0021]]></title><description><![CDATA[TypeScript Fundamentals and AngularJS Performance Completed the videos for Ultimate Angular Typscript Fundamentals and AngularJS Performance…]]></description><link>https://nicholaspretorius.github.io/til0021/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0021/</guid><pubDate>Fri, 29 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;TypeScript Fundamentals and AngularJS Performance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the videos for Ultimate Angular Typscript Fundamentals and AngularJS Performance | &lt;a href=&quot;https://ultimateangular.com/courses/&quot;&gt;Link&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;ng-repeats through large data collections can be batched in order to increase performance. | &lt;a href=&quot;https://github.com/UltimateAngular/angular-1-performance-src/blob/master/08-ng-repeat-batching/js/components/todos.component.js#L42&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using &apos;track by&apos; on ng-repeat is more performant as AngularJS does not need to attach its own keys at run-time&lt;/li&gt;
&lt;li&gt;ng-if is more perfomant than ng-show/ng-hide as AngularJS does not need to set watchers on each instance. It destroys them when no longer required. &lt;/li&gt;
&lt;li&gt;Use ng-model-options with debounce on input fields as it will reduce the number of digest cycles required. This also delays the evaluation so that you do not need to instantly display validation and can wait a little while. &lt;/li&gt;
&lt;li&gt;When using AngularJS expressions, you can limit the evaluations required by AngularJS storing an evaluation in a value so that AngularJS does not need to evaluate the terms or function on each digest cycle. If the evaluation is only needed once, the bind-once syntax of :: can be used. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http calls can be batched if within +- 10 milliseconds of each by using &lt;/p&gt;
&lt;pre&gt;
angular
.module(&apos;app&apos;, [])
.config(function ($httpProvider) {
	$httpProvider.useApplyAsync(true);
});
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strict Dependency Injection (Strict DI) can be used for minification for performance as follows: &lt;/p&gt;
&lt;pre&gt;
controller: [&apos;CounterService&apos;, function (CounterService) {
this.$onInit = function () {
  this.count = CounterService.getInitialCount();
};
this.increment = function () {
  this.count = CounterService.incrementCount(this.count);
};
this.decrement = function () {
  this.count = CounterService.decrementCount(this.count);
};
}]
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On production builds, there is no need for all the AngularJS specific .data that gets added at runtime. This can be turned off by doing: &lt;/p&gt;
&lt;pre&gt;
angular
.module(&apos;app&apos;, [])
.config(function($compileProvider) {
	$compileProvider.debugInfoEnabled(false);
})
;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;The $onDestroy lifecycle hook can be used on AngularJS ^1.5 to do garbage collection and remove data bindings, especially when using things like EventHandlers. This can save significantly on memory usage during the lifespan of the Single Page Application. &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0020]]></title><description><![CDATA[Terminal, Node.js Continued, Triangles, Yarn and TypeScript ps aux | To show processes running kill -9 processId | processId being the…]]></description><link>https://nicholaspretorius.github.io/til0020/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0020/</guid><pubDate>Thu, 28 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Terminal, Node.js Continued, Triangles, Yarn and TypeScript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ps aux | To show processes running&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kill -9 processId | processId being the number of the process you want to kill&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node.js fs and querystring | &lt;a href=&quot;https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback&quot;&gt;Link&lt;/a&gt; and &lt;a href=&quot;https://nodejs.org/api/querystring.html#querystring_querystring_parse_str_sep_eq_options&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Triangle exercise from &lt;a href=&quot;http://eloquentjavascript.net/02_program_structure.html#h_umoXp9u0e7&quot;&gt;Eloquent JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
/* Triangle Exercise from Eloquent JavaScript 28/12/2017 (http://eloquentjavascript.net/02_program_structure.html#h_umoXp9u0e7) */
function drawTriangle(limit, char) {
    var string = &apos;&apos;;
    for (var i = 1; i &lt; limit; i++) {
        for (var j = 0; j &lt; i; j++){ // var j = i; j &lt; limit; j++ for inverted triangle
            string += char;
        }
        string += &apos;\n&apos;
        //string += &apos;!&apos;;
    }
    console.log(string);
}

drawTriangle(8, &apos;#&apos;);
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JS Types: String, Boolean, undefined, null, Object, Number, Symbol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AST = abstract syntax tree | &lt;a href=&quot;http://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hold CMD while hovering on a symbol in VS Code and it will display an overlay of the definition. CMD + Click will open the file at the definition. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMD + D to select next occurrence of a word in VS Code. Shift + CMD + F is find and replace. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Right click &quot;Rename symbol&quot; or FN + F2 shortcut rename symbol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yarn global add typescript&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yarn init -y | -y flag is to answer yes to all init options&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yarn add -D typescript webpack webpack-dev-server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tsc --init | Creates a ts project for you in the folder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tsc -w | Runs tsc in watch mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Union types and type alias&lt;/p&gt;
&lt;pre&gt;
// Specify type alias with union types # or $
type ValidSymbols = &apos;#&apos; | &apos;$&apos;
const symbol = &apos;#&apos;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0019]]></title><description><![CDATA[Gatsby to GitHub Pages, Gatsby RSS and Angular.js npm i --save-dev gh-pages |  Link Add RSS to Gatsby |  Link Completed the Ultimate Angular…]]></description><link>https://nicholaspretorius.github.io/til0019/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0019/</guid><pubDate>Tue, 26 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Gatsby to GitHub Pages, Gatsby RSS and Angular.js&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;npm i --save-dev gh-pages | &lt;a href=&quot;https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add RSS to Gatsby | &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-feed&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Completed the Ultimate Angular 1.x Pro videos&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0018]]></title><description><![CDATA[Node.js Basics and 200 badges on Treehouse You can access the command line arguments in node.js using process.argv console.dir, console…]]></description><link>https://nicholaspretorius.github.io/til0018/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0018/</guid><pubDate>Sat, 23 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Node.js Basics and 200 badges on Treehouse&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You can access the command line arguments in node.js using process.argv&lt;/li&gt;
&lt;li&gt;console.dir, console.error&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
    https.get(url, (res) =&gt; {
        const response = &quot;&quot;;
        res.on(&apos;data&apos;, data =&gt; {
            response += data.toString();
        })
        res.on(&apos;end&apos;, () =&gt; {
            const result = JSON.parse(response);
            console.dir(result);
        })
    });
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;200 badges on Treehouse! &lt;a href=&quot;https://teamtreehouse.com/nicholaspretorius&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;200 OK, 500 Internal Server Error, 404 Not Found, 301 Moved permanently&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0017]]></title><description><![CDATA[Node.js, Azure Logic Apps and Terminal Node.js. Mind. Blown. |  Link nodemon app.js |  Link Nodemailer |  Link Azure Logic App with SMTP…]]></description><link>https://nicholaspretorius.github.io/til0017/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0017/</guid><pubDate>Fri, 22 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Node.js, Azure Logic Apps and Terminal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Node.js. Mind. Blown. | &lt;a href=&quot;https://nodejs.org/en/docs/guides/getting-started-guide/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nodemon app.js | &lt;a href=&quot;https://nodemon.io/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nodemailer | &lt;a href=&quot;https://nodemailer.com/about/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Azure Logic App with SMTP - have not yet found a way to make this work with TLS? | &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/connectors/connectors-create-api-smtp&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In Mac Terminal: Home is Ctrl + A, End is Ctrl + End&lt;/li&gt;
&lt;li&gt;Next word ESC then f, previous word ESC then b&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0016]]></title><description><![CDATA[Git, Azure and Deploying a AngularJS app from VS Code If you are working behind a corporate proxy, first setup Git for this: git config…]]></description><link>https://nicholaspretorius.github.io/til0016/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0016/</guid><pubDate>Thu, 21 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Git, Azure and Deploying a AngularJS app from VS Code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If you are working behind a corporate proxy, first setup Git for this: git config --global http.proxy &lt;a href=&quot;http://username:password@proxy:port&quot;&gt;http://username:password@proxy:port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check it looks right: git config --global --get http.proxy&lt;/li&gt;
&lt;li&gt;You can also unset it: git config --global --unset http.proxy&lt;/li&gt;
&lt;li&gt;In the Azure portal, select your App Service, then select Deployment Options and configure your local Git as a deployment source. Take note of your deployment credentials&lt;/li&gt;
&lt;li&gt;git checkout your-branch&lt;/li&gt;
&lt;li&gt;Add your azure instance as a remote via: git remote add azure &lt;a href=&quot;https://your.provided.azure.git&quot;&gt;https://your.provided.azure.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check that the remote added by running: git remote -v&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since the AngularJS app runs from the dist folder,  you will need to: touch .deployment | code .deployment &lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
[config]
folder = dist
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;You will also need to remove the dist/ line from your .gitignore&lt;/li&gt;
&lt;li&gt;git add --all &lt;/li&gt;
&lt;li&gt;git commit -m &quot;.deployment for deploying from repo to Azure. Update .gitignore for this purpose. Adding /dist&quot;&lt;/li&gt;
&lt;li&gt;git push azure your-branch&lt;/li&gt;
&lt;li&gt;Note that Azure deploys from the master branch by default, to change this, you can add an Azure App Setting on your App Service called deployment_branch with the name of your-branch. Remember to stop and start your App Service once this has been done. &lt;/li&gt;
&lt;li&gt;Once your push has been successful, check your App Service URL. &lt;/li&gt;
&lt;li&gt;Next steps: Use Deployment Slots to manage moving your Development service through Staging/UAT to Production.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0015]]></title><description><![CDATA[Regex alternations and dependency depression Use | as an alternation in regex patterns The past few days I have been working through some…]]></description><link>https://nicholaspretorius.github.io/til0015/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0015/</guid><pubDate>Wed, 20 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Regex alternations and dependency depression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use | as an alternation in regex patterns&lt;/li&gt;
&lt;li&gt;The past few days I have been working through some tutorials, one on React and the other on AngularJs 1.6. While I am making progress, I am not sure what to make of the incredible amount of config and boilerplate one has to setup in order to get going. I understand that modern JS apps have a lot on their plate and one needs to cater to all these different development processes and build processes, but with it seems to me that the same convenience that makes NPM so powerful is the same thing that makes it so tricky to figure out what is happening when something goes wrong. While I have managed to get the projects running, on one occassion there is a NPM registry completely missing. On the other, I have forked a repo directly and run npm install and out of the box, babel/register cannot load... &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0014]]></title><description><![CDATA[AngularJs i18n, NPM, Screenshots and More config You switch locales for AngularJs by including the necessary i18n locale file |  Link…]]></description><link>https://nicholaspretorius.github.io/til0014/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0014/</guid><pubDate>Tue, 19 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;AngularJs i18n, NPM, Screenshots and More config&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You switch locales for AngularJs by including the necessary i18n locale file | &lt;a href=&quot;https://github.com/angular/angular.js/tree/master/src/ngLocale&quot;&gt;Link&lt;/a&gt; | &lt;a href=&quot;https://docs.angularjs.org/guide/i18n&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install a specific version of a NPM package | npm i -D package-name@1.2.3&lt;/li&gt;
&lt;li&gt;Screenshot on Mac CMD + Shift + 4 then select area on page | Ctrl + CMD + Shift + 4 will save to clipboard. &lt;/li&gt;
&lt;li&gt;Continued with Fullstack.io React tutorial - discovered an empty karma-sourcemap-loader npm package and raised an issue | &lt;a href=&quot;https://github.com/demerzel3/karma-sourcemap-loader/issues/37&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Config, config, congif, ficong, confee, confi, confused...&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0013]]></title><description><![CDATA[Terminal commands, Chrome tabs on Windows, NPM and More React. mkdir folder name && cd $ . mkdir -p sub folder name/{sub sub1,sub sub2,sub…]]></description><link>https://nicholaspretorius.github.io/til0013/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0013/</guid><pubDate>Sun, 17 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Terminal commands, Chrome tabs on Windows, NPM and More React.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mkdir folder&lt;em&gt;name &amp;#x26;&amp;#x26; cd $&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;mkdir -p sub&lt;em&gt;folder&lt;/em&gt;name/{sub&lt;em&gt;sub1,sub&lt;/em&gt;sub2,sub_sub3} &amp;#x26;&amp;#x26; touch filename.js&lt;/li&gt;
&lt;li&gt;Switch Chrome tabs on Windows with Ctrl + Tab or Ctrl + Shift + Tab, &lt;/li&gt;
&lt;li&gt;npm i -S dep1 dep2 dep3 &lt;/li&gt;
&lt;li&gt;npm i -D devDep1 devDep2 devDep3&lt;/li&gt;
&lt;li&gt;Following along with the Fullstack.io React Yelp Clone tutorial | &lt;a href=&quot;https://www.fullstackreact.com/articles/react-tutorial-cloning-yelp/&quot;&gt;Link&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;This tutorial seems to be somewhat outdated. It does however, take you through the proces of configuring your environment manually (more or less) which, I think, will be valuable longer term. Note that you may run into issues with npm start when configuring the CSS Modules and loaders. The best thing to do here is to take a look at the packages.json file in the GitHub repo and compare the version numbers. When I installed the dependencies, I received the latest in everything and this broken some of the code. Setting the dependencies to the versions on GitHub should rectify this. (&lt;a href=&quot;http://disq.us/p/1j51enm&quot;&gt;Credit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will also need to change the way the Component Class is setup according to ES2016 as JS classes namely &lt;/p&gt;
&lt;pre&gt;
class App extends React.Component{
render() {
return (&lt;div className={styles[&apos;container&apos;]}&gt;Hello world!&lt;/div&gt;)
}
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0012]]></title><description><![CDATA[React Basics, React Dev Tools and Mac Chrome key combos. Completed the  React Basics  course at Treehouse. Install the React Dev Tools…]]></description><link>https://nicholaspretorius.github.io/til0012/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0012/</guid><pubDate>Sat, 16 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;React Basics, React Dev Tools and Mac Chrome key combos.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Completed the &lt;a href=&quot;https://teamtreehouse.com/library/react-basics&quot;&gt;React Basics&lt;/a&gt; course at Treehouse.&lt;/li&gt;
&lt;li&gt;Install the React Dev Tools Chrome extension, then in chrome://extensions make sure to tick &quot;Allow access to file urls&quot; | &lt;a href=&quot;https://github.com/facebook/react-devtools/blob/master/README.md#the-react-tab-doesnt-show-up&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Switch between Chrome windows on Mac with CMD + `, &lt;/li&gt;
&lt;li&gt;CMD + Alt + Left/Right to switch tabs in a Chrome window. &lt;/li&gt;
&lt;li&gt;Ctrl + Left/Right switches to desktop and back to active pane. &lt;/li&gt;
&lt;li&gt;Alt + Tab (with Left/Right) switches between open applications. &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TWIL 0002]]></title><description><![CDATA[Thoughts on problem solving. When you run into a code problem, bug or challenge - here are some steps to try get you out of your bind…]]></description><link>https://nicholaspretorius.github.io/twil0002/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/twil0002/</guid><pubDate>Sat, 16 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Thoughts on problem solving.&lt;/h3&gt;
&lt;p&gt;When you run into a code problem, bug or challenge - here are some steps to try get you out of your bind: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Acknowledge that you &lt;em&gt;will&lt;/em&gt; find a way to solve the problem. It might not be right now, today or even tomorrow, but at some point in the future you will solve it. As such, each attempt is an experiment. Succeed or fail, at each turn, reconsider what you think you know or what you think is happening. &lt;/li&gt;
&lt;li&gt;Clear some space in your day to think about what you need to do, write down the result you are looking for and how you might go about it. If you have a few options, great! Write them down too. Work backwards and forwards to try and break the problem down into smaller steps. Arrange them, re-arrange them. Basically, break the problem down into pieces and attack those one by one. Programming is far easier in incremental steps. Small results stacked on top of each other go a very long way. &lt;/li&gt;
&lt;li&gt;Consider that part or all of the reason you cannot solve this problem is because you are assuming something is happening that isn&apos;t. Maybe you aren&apos;t actually doing what you think you are doing. Or vice-versa, maybe you are doing the wrong thing. Re-trace your steps.&lt;/li&gt;
&lt;li&gt;Change is progress: If you are getting an error and then you get a different error this is good! Think about what you did, rewind the change and play it back. What is happening? Why did it happen? What does this tell you?&lt;/li&gt;
&lt;li&gt;Change is good in another way too: change of context. Take a break, get a cup of coffee, go for a walk, do something else for a while. It often helps to put the problem at the back of your mind for a little while. If you get to the end of the day with no success. Sleep on it.  &lt;/li&gt;
&lt;li&gt;Google. Google is your fiend. Google your problem, see what you find. &lt;em&gt;Read&lt;/em&gt; the source documentation. Try the example code. Look for similar examples. Read through Stack Overflow answers. Get ideas. Try different things. Most importantly, read the code. Maybe you are missing something? Chances are good someone has encountered the same or at least a similar problem to yours. &lt;/li&gt;
&lt;li&gt;If you are getting really stuck, try and separate the problem out into a simplified version of things. If you can get a basic example right, maybe you can build something up to contribute towards a more complex one. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubberduckdebugging.com/&quot;&gt;Rubber-duck debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you are still stuck, search for a video course that is similar or matching your problem. You will be amazed at the courses and content you can find online. Sometimes, spending a few hours and few rands/dollars/euros on solidifying your knowledge and skills can go a very long way. &lt;/li&gt;
&lt;li&gt;If you have tried all of the above, and I mean really tried, then enlist some help. Before you do though, take a break, retrace your steps one by one and repeat the Rubber Duck strategy before you do. It&apos;s always worth one more shot. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;TILs of the week:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/til0007/&quot;&gt;Touch and pipe file to VS Code, git fetch and more Gatsby.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0008/&quot;&gt;VS Code Auto format, AngularJS $state, $stateChangeSuccess &amp;#x26; Angular Translate.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0009&quot;&gt;CSS left:auto, strikethroughs on OneNote and Bootstrap Modal trickery. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0010/&quot;&gt;Web.Config exception, Ng-Map miscellaneous and Hotel. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0011/&quot;&gt;Ng-Map grey area fix, &apos;pre-merge&apos; branches, better conflict resolution tools? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0012/&quot;&gt;React, React Dev Tools and Mac Chrome key combos.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0011]]></title><description><![CDATA[Ng-Map grey area fix, 'pre-merge' branches, better conflict resolution tools? If you get a grey area on first load of your Ng-Map, try this…]]></description><link>https://nicholaspretorius.github.io/til0011/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0011/</guid><pubDate>Fri, 15 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Ng-Map grey area fix, &apos;pre-merge&apos; branches, better conflict resolution tools?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you get a grey area on first load of your Ng-Map, try this | &lt;a href=&quot;https://github.com/allenhwkim/angularjs-google-maps#grey-area-in-google-maps&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
//vm.map is the Ng-Map instance
var center = vm.map.getCenter();
google.maps.event.trigger(vm.map, &quot;resize&quot;);
vm.map.setCenter(center);
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I had to do a fairly large merge with many conflicts today. My suggestion is to: &lt;/p&gt;
&lt;pre&gt;
git checkout branch-to-be-merged-into
git checkout -b pre-merge-branchname
git merge longlast-merged-branch
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have resolved all the conflicts, create a pull request from the pre-merge-branchname to the branch-to-be-merged-into. Then merge from there. This will, in theory, prevent you from screwing up your main branches by utilizing the pre-merge-branchname as a kind of &lt;em&gt;staging&lt;/em&gt; area for your merge. However, it is best you do not let your branches get too far out of sync if possible. This will reduce the number of conflicts and be easier to manage. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On that note, VS Code is useful in that it highlights merge conflicts in the &quot;map&quot; on the right along with the purple highlights and C indicators. The trick is that, these colours/codes do not change once you have resolved, so you need to be sure to keep track and do your resolutions in a very methodical manner. I would however like to discover a better way to manage these conflicts? I am thinking something along the lines of a &lt;em&gt;Beyond Compare-like&lt;/em&gt; side-by-side view with easy to use -&gt; and &amp;#x3C;- buttons for &apos;Approve current&apos; or &apos;Approve incoming&apos; or to make a merge/manual edit of the conflicting lines. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I will be investigating this possibility next week: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/jfromaniello/9207698&quot;&gt;Integrate Beyond Compare with Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.scootersoftware.com/support.php?zz=kb_vcs#gitlinux&quot;&gt;Beyond Compare and Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0010]]></title><description><![CDATA[Web.Config exception, Ng-Map miscellaneous and Hotel. If you want to exclude a specific folder from a blanket redirect rule in Web.Config…]]></description><link>https://nicholaspretorius.github.io/til0010/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0010/</guid><pubDate>Thu, 14 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Web.Config exception, Ng-Map miscellaneous and Hotel.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you want to exclude a specific folder from a blanket redirect rule in Web.Config and this to your &amp;#x3C;condition&gt;&lt;/p&gt;
&lt;pre&gt;&amp;lt;add input=&quot;{URL}&quot; pattern=&quot;/path/folder/.*$&quot; negate=&quot;true&quot; ignoreCase=&quot;true&quot; /&amp;gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;When using the AngularJS plugin Ng-Map, you can lazy load Google Maps - Make sure not include the regular Google Maps script in your HTML | &lt;a href=&quot;https://ngmap.github.io/#/!map-lazy-load-params.html&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you want to initialise the map in Ng-Map based on an action you can do this | &lt;a href=&quot;https://ngmap.github.io/#/!map-lazy-inint.html&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hotel is a nifty utility that lets you launch your local servers from one place npm install -g hotel &amp;#x26;&amp;#x26; hotel start | &lt;a href=&quot;https://github.com/typicode/hotel&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then run: hotel add &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; (or whatever your server is)&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Impostor Syndrome and Expert Beginners]]></title><description><![CDATA[Impostor Syndrome and Expert Beginners . Great article by Erik Dietrich on the expert beginner: Expert beginner Ring a bell? If it did, let…]]></description><link>https://nicholaspretorius.github.io/impostor-syndrome-expert-beginners/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/impostor-syndrome-expert-beginners/</guid><pubDate>Wed, 13 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;&lt;a href=&quot;https://www.daedtech.com/impostor-syndrome-and-expert-beginners/&quot;&gt;Impostor Syndrome and Expert Beginners&lt;/a&gt;.&lt;/h3&gt;
&lt;p&gt;Great article by Erik Dietrich on the expert beginner:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expert beginner&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&quot;An expert beginner is a small king in a small kingdom [...] Management gives him the run of the place in spite of the fact that, as it turns out, he’s not really very good at what he does.&quot; - Erik Dietrich&lt;/blockquote&gt;
&lt;p&gt;Ring a bell?&lt;/p&gt;
&lt;p&gt;If it did, let&apos;s try tease this out a little more since it touches on some of wider themes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&quot;&gt;Dunning-Kruger Effect&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&quot;In the field of psychology, the Dunning–Kruger effect is a cognitive bias wherein people of low ability suffer from illusory superiority, mistakenly assessing their cognitive ability as greater than it is. The cognitive bias of illusory superiority derives from the metacognitive inability of low-ability persons to recognize their own ineptitude; without the self-awareness of metacognition, low-ability people cannot objectively evaluate their actual competence or incompetence.&quot; - Wikipedia&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=4627373&quot;&gt;10 Years Experience VS 10 x 1 Year Experience&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&quot;Ask yourself: Have you got 10 years of experience or do you have 10 x 1 year&apos;s experience?&quot; - Don&apos;t know who&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Impostor syndrome&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&quot;Those suffering from impostor syndrome believe their achievements the result of luck or favor rather than merit.&quot; - Erik Dietrich&lt;/blockquote&gt;
&lt;p&gt;As Erik delineates in his piece, the expert beginner and the impostor-syndrome-afflicted are two sides of the same coin. Each side reflecting the positive aspect and negative aspect of the issue. Essentially, we dislike expert beginners and we like the impostors. As Erik points out, the difference stems from feedback blindness and the inability to internalize feedback. I would add to this that, the difference also stems from the mixture of the following factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internal validation or external praise&lt;/li&gt;
&lt;li&gt;Lifelong learning or fixed mindset&lt;/li&gt;
&lt;li&gt;How it looks or how it works&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will tend to find that the expert beginner is motivated by an alignment on the negative side of the items above. They are looking for external praise to validate their internal insecurities. They have a fixed mindset because they have found their comfort zone in an area in which they know enough to be dangerous and they do not want to venture beyond that border for fear of being found out. In that sense, you can see they are cut from the impostor cloth, but they do not want to admit it and actively argue against it. Lastly, because the expert beginner knows enough to be dangerous, they can produce something that looks like it works. Yet when you scratch beneath the surface you start to realise that the room is only clean because all the junk has been hidden under the bed (Unfortunately, the dirty socks are sticking out from under it). The irony is that, as illustrated by the Dunning-Kruger effect, the expert beginner does not have the ability to recognise their incompetence. (If they do, they will not admit it)&lt;/p&gt;
&lt;p&gt;The expert beginner shies away from the positive side of the 3 items because the external validation is a replacement for the lack of the internal. The fixed mindset is more concerned with consolidating power and influence as opposed to improving upon (or even realising their own shortcomings). When you have a hammer, everything is a nail. Since they fear being caught out of their comfort zone for all to see, they essentially relive the same year of experience many times over. Lastly, the expert beginner is primarily concerned with the outward appearance because in fact they know the internal mechanisms are just cobbled together.&lt;/p&gt;
&lt;p&gt;The reason, I think, that people dislike the expert beginner is that we can see past the facade. We know the plaster is cracking and that the bricks are not aligned as they should be, yet the expert beginner illustriously keeps painting over the cracks hoping that enough layers of plaster and paint will keep the house from falling. This gets to why I think we like the impostors. Impostors tend to be somewhat realistic (more or less) about their limitations and tend to be actively looking to improve on their shortcomings. Any time an impostor speaks about feeling like an impostor, people relate because it speaks to that impostor in all of us.&lt;/p&gt;
&lt;p&gt;Lastly, I think the difference between the two is that the impostor is willing to venture out into their discomfort. They are willing to make mistakes and own them. To lay the bricks again. Not just continue painting over the cracks everyone can see.&lt;/p&gt;
&lt;p&gt;PS. I use the word impostor in the sense that if you are in some way honest about your abilities, you will realise there are factors beyond your pure skill that lead you to where you are. It takes a village and all that. I do not mean impostor in the myopic I&apos;m not good enough sense.&lt;/p&gt;
&lt;p&gt;Remember, as Seth Godin says, &lt;a href=&quot;http://sethgodin.typepad.com/seths_blog/2017/10/imposter-syndrome.html&quot;&gt;we are all impostors&lt;/a&gt;, so get out and dance with your fear!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TIL 0009]]></title><description><![CDATA[CSS left:auto, strikethroughs on OneNote and Bootstrap Modal trickery. If you need to overwrite an absolutely positioned element to the…]]></description><link>https://nicholaspretorius.github.io/til0009/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0009/</guid><pubDate>Wed, 13 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;CSS left:auto, strikethroughs on OneNote and Bootstrap Modal trickery.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you need to overwrite an absolutely positioned element to the other side of the container&lt;/p&gt;
&lt;pre&gt;.rtl {
.className {
    right:0; 
    left: auto; /* this will overwrite the original left: 0; */
}
}&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;If you use Microsoft OneNote you can strikethrough text by selecting it and pressing: CTRL + -&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a Bootstrap 3 modal, you can create a space of clickable content above the modal backdrop by:&lt;/p&gt;
&lt;pre&gt;/* Say we want to push it down 50px */
.modal-backdrop, .modal {
top:50px;
}
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;/* If you then wanted to stretch the modal to cover the whole screen */
.modal-dialog, .modal-content{
height:100%;
}&lt;/p&gt;
&lt;p&gt;.modal-dialog {
width: 100%;
}       &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Another useful Bootstrap modal trick - if you want to make sure the user clicks on a modal button.&lt;/p&gt;
&lt;pre&gt;$(&apos;#myModal&apos;).show({
backdrop: &apos;static&apos;,
keyboard: false
});&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0008]]></title><description><![CDATA[VS Code Auto format, AngularJS $state, $stateChangeSuccess & Angular Translate. VS Code auto format code: ALT + SHIFT + F AngularJS $state…]]></description><link>https://nicholaspretorius.github.io/til0008/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0008/</guid><pubDate>Tue, 12 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;VS Code Auto format, AngularJS $state, $stateChangeSuccess &amp;#x26; Angular Translate.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VS Code auto format code: ALT + SHIFT + F&lt;/li&gt;
&lt;li&gt;AngularJS $state.current to get the current route&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AngularJS $stateChangeSuccess for UI-Router &amp;#x3C; 1.0 | &lt;a href=&quot;https://github.com/angular-ui/ui-router/wiki&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;$rootScope.$on(&apos;$stateChangeSuccess&apos;, 
function(event, toState, toParams, fromState, fromParams){ ... });&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Angular Translate service | Link&lt;/p&gt;
&lt;pre&gt;$translate(&apos;HEADLINE&apos;).then(function (headline) {
$scope.headline = headline;
}, function (translationId) {
$scope.headline = translationId;
});&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0007]]></title><description><![CDATA[Touch and pipe file to VS Code, git fetch and more Gatsby. More Gatsby |  Link console.log in a Node.js/React.js context may mean the…]]></description><link>https://nicholaspretorius.github.io/til0007/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0007/</guid><pubDate>Mon, 11 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Touch and pipe file to VS Code, git fetch and more Gatsby.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;touch file.js | code file.js&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git fetch --all&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;More Gatsby | &lt;a href=&quot;https://www.gatsbyjs.org/tutorial/part-four/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;console.log in a Node.js/React.js context may mean the terminal&lt;/li&gt;
&lt;li&gt;Ctrl + C to quit the task: gatsby develop&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thoughts on today&apos;s learning:&lt;/h3&gt;
&lt;p&gt;Sometimes you miss crucial words in tutorials which have a big impact on progress. In the above tutorial, whenever you update gatsyb-node.js you need to stop and start the gatsby server. Added to that, console.log in the exports.onCreateNode function will log to the terminal, not the browser console. This had me thinking my code was not working for quite some time as I was looking to the browser console for the logged data. Regardless, the lesson is persevere! Re-trace your steps, with a fine-tooth comb if necessary, there is something you are assuming that is happening that isn&apos;t.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TWIL 0001]]></title><description><![CDATA[Forget perfect! Ship. Last week I was investigating how to display Arabic from right-to-left for a project I am working on. During my…]]></description><link>https://nicholaspretorius.github.io/twil0001/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/twil0001/</guid><pubDate>Sun, 10 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Forget perfect! Ship.&lt;/h3&gt;
&lt;p&gt;Last week I was investigating how to display Arabic from right-to-left for a project I am working on. During my investigation, I found a dead link on the W3C page explaining the topic. As I scrolled to the bottom of the page, I noticed a &quot;Leave a Comment&quot; link. On a whim, I figured, &quot;Why not?&quot;. As a developer, I appreciate it when someone gives me a heads-up on a dead link so that I can fix it. I don&apos;t know why, but I half-expected a mailto link to open up and that I would send an email out like a message in a bottle, never to hear back. I was pleasantly surprised to be greeted with a GitHub page prompting me to log in. (This is a reflection of my outdated ideas than on W3C processes)&lt;/p&gt;
&lt;p&gt;To put this into perspective. My GitHub account tells me that I joined on 23 May, 2011. Up until last week it was a skeleton in my closet. I created it, and then never used it again. Even now, it is in the ICU. There are several reasons for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The company I work for does not share its work on GitHub.&lt;/li&gt;
&lt;li&gt;I have until very recently, only used Subversion for version control, and that was behind a corporate proxy.&lt;/li&gt;
&lt;li&gt;I had no experience using Git. (Yes, in 2017, sad, but true)&lt;/li&gt;
&lt;li&gt;To date, I have not taken part in open source development nor do I have a side-project to share publicly. (Also sad, but true)&lt;/li&gt;
&lt;li&gt;All of the above are just excuses &lt;em&gt;really&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Never the less, I logged in with my dormant GitHub account and created an Issue. I can&apos;t recall ever having done this before. Usually, at this point, I don&apos;t proceed since I tend to think &quot;They are probably already aware of it&quot;. Out of curiosity, I went ahead and logged the issue and thought nothing of it. Several minutes later, I got a response saying that a server at MIT (of all places) was down and that the problem would be recitifed shortly. This blew my mind!&lt;/p&gt;
&lt;p&gt;Firstly, in my experience, people do not respond. They are busy, they are important, maybe they already know, maybe they don&apos;t care, maybe all of the above or none of the above. Secondly, I have a clear-cut case of impostor syndrome. My code smells. No-one is going to look at my work and marvel. Most of the time, I am trying to make deadlines as best I can with what I can. On the upside, I know I can do better. Every day, I get to work and I try do a little better.&lt;/p&gt;
&lt;p&gt;From the early days when I first read about the W3C, web standards, CSS layouts and the people who were leading the so-called Web2.0 movement. These were visible people, connected in a group that through whatever avenue had established themselves in a meaningful way. They were pioneers, leaders in the field and clearly, way smarter than I would ever be. In my own way, as a coder not knowing his absolute from his relative positioning, I looked up to these people. I saw something I wanted to learn. Much in the way a kid might look up to someone they admire. You think, maybe one day I will be like them...&lt;/p&gt;
&lt;p&gt;The reality is that you won&apos;t be like them.&lt;/p&gt;
&lt;p&gt;Not if you don&apos;t ship. Not if you don&apos;t get better at the hard stuff. Not if you don&apos;t put your work out there for everyone to see. And even if you do, it might not happen. Deal with it. Keep coding, keep learning and keep shipping. We aren&apos;t all on that level. Not everyone is pro. Most people aren&apos;t even second-division or even third. To make matters worse, on top of the impostor, sits a thinker. I think way too much. Over think, under do has been my motto for a long time.&lt;/p&gt;
&lt;p&gt;And that is what this hideous looking website is about. It is about putting work out there. As it is.&lt;/p&gt;
&lt;h3&gt;TILs of the week:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/til0001/&quot;&gt;VS Code, TypeScript 101, Emmet and delete branches in Git. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0002/&quot;&gt;Generate CSR, VS Code Multi-cursor and Git Stash. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0003/&quot;&gt;Git Log, cURL, TypeScript, Launch Chrome from VS Code. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0004/&quot;&gt;Curl through proxy, variables in Postman, multiple terminals in VS Code, Insomnia App. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0005/&quot;&gt;Git tagging and secure copy. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0006/&quot;&gt;Update npm, Semver notes and Gatsby.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0006]]></title><description><![CDATA[Update npm, Semver notes and Gatsby. npm i -g npm | To update npm Major.Minor.Patch. Breaking changes. Features backwards compatible. Bug…]]></description><link>https://nicholaspretorius.github.io/til0006/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0006/</guid><pubDate>Sat, 09 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Update npm, Semver notes and Gatsby.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;npm i -g npm | To update npm&lt;/li&gt;
&lt;li&gt;Major.Minor.Patch.&lt;/li&gt;
&lt;li&gt;Breaking changes. Features backwards compatible. Bug fixes backwards compatible.&lt;/li&gt;
&lt;li&gt;~ Major, minor is fixed. Any patch&lt;/li&gt;
&lt;li&gt;^ Major is fixed. Any minor or patch&lt;/li&gt;
&lt;li&gt;* Any major, minor or patch&lt;/li&gt;
&lt;li&gt;Gatsby Tutorials | &lt;a href=&quot;https://www.gatsbyjs.org/tutorial/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0005]]></title><description><![CDATA[Git tagging and secure copy. Git tag |  Link Enable Emmet in .jsx files |  Link]]></description><link>https://nicholaspretorius.github.io/til0005/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0005/</guid><pubDate>Fri, 08 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Git tagging and secure copy.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Git tag | &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Tagging&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git tag -l&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git tag -a v0.01 -m &quot;Version 0.01&quot;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git push origin v0.01&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;scp file.zip user@0.0.0.0&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Enable Emmet in .jsx files | &lt;a href=&quot;https://github.com/Microsoft/vscode/issues/4962&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0004]]></title><description><![CDATA[Curl through proxy, variables in Postman, multiple terminals in VS Code, Insomnia App. Create variable in Postman: postman.setGlobalVariable…]]></description><link>https://nicholaspretorius.github.io/til0004/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0004/</guid><pubDate>Thu, 07 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Curl through proxy, variables in Postman, multiple terminals in VS Code, Insomnia App.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;curl -x proxy:port -U username:password http://www.google.com&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Create variable in Postman: postman.setGlobalVariable(&quot;variable&quot;, &quot;value&quot;);&lt;/li&gt;
&lt;li&gt;Discovered the Insomnia App | &lt;a href=&quot;https://insomnia.rest/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create multiple terminals in VS Code | CMD + Shift + `&lt;/li&gt;
&lt;li&gt;You can set the languge on Google Maps API by adding parameter &amp;#x26;language=ar | &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/localization&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome DevTools screenshots! CMD + Shift + C then hold CMD and drag | &lt;a href=&quot;https://developers.google.com/web/updates/2017/08/devtools-release-notes#screenshots&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0003]]></title><description><![CDATA[Git Log, cURL, TypeScript, Launch Chrome from VS Code. Git Log |  Link curl -i yourUrlHere | Gives you data and headers for the provided URL…]]></description><link>https://nicholaspretorius.github.io/til0003/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0003/</guid><pubDate>Wed, 06 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Git Log, cURL, TypeScript, Launch Chrome from VS Code.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Git Log | &lt;a href=&quot;https://git-scm.com/book/en/v1/Git-Basics-Viewing-the-Commit-History&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git log&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git log -p&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git log --pretty=oneline&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git log --pretty=format:&quot;%h: %an: %ad: %s&quot;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;curl -i yourUrlHere | Gives you data and headers for the provided URL&lt;/li&gt;
&lt;li&gt;curl -o output.txt yourUrlHere | Stores the response from yourUrlHere in output.txt&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;let name: string = &apos;Nicholas&apos;;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;let greeting: string = `Hello ${name}`;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Launch Chrome on file from VS Code | &lt;a href=&quot;https://stackoverflow.com/questions/30039512/how-to-view-my-html-code-in-browser-with-visual-studio-code&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0002]]></title><description><![CDATA[Generate CSR, VS Code Multi-cursor and Git Stash. VS Code keybinding for multi-cursor select is:  CMD + Shift + L Git stash! |  Link]]></description><link>https://nicholaspretorius.github.io/til0002/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0002/</guid><pubDate>Tue, 05 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;Generate CSR, VS Code Multi-cursor and Git Stash.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;openssl req -new -newkey rsa:2048 -nodes -keyout yourdomain.key -out yourdomain.csr&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;VS Code keybinding for multi-cursor select is: &lt;pre&gt;CMD + Shift + L&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Git stash! | &lt;a href=&quot;https://git-scm.com/book/en/v1/Git-Tools-Stashing&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash list&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash pop&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash apply&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash apply stash@{0}&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash drop stash@{0}&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL 0001]]></title><description><![CDATA[VS Code, TypeScript 101, Emmet and delete branches in Git. How to launch VS Code from the command line |  Link   VS Code key binding for…]]></description><link>https://nicholaspretorius.github.io/til0001/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0001/</guid><pubDate>Mon, 04 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;VS Code, TypeScript 101, Emmet and delete branches in Git.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;How to launch VS Code from the command line | &lt;a href=&quot;https://code.visualstudio.com/docs/setup/mac&quot;&gt;Link&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;VS Code key binding for moving a line up or down is: &lt;pre&gt;Alt + Up or Alt + Down&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;I started learning about TypeScript and the first step is: &lt;pre&gt;npm install -g typescript&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;That the awesome Emmet is installed by default in VS Code | &lt;a href=&quot;https://code.visualstudio.com/blogs/2017/08/07/emmet-2.0&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Are you a Git rookie like me? This is how you delete a branch on local: &lt;pre&gt;git branch -d oldBranch01 oldBranch02 oldBranch03&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[This is my first blog post using Gatsby, React and Markdown!]]></description><link>https://nicholaspretorius.github.io/hello-world/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/hello-world/</guid><pubDate>Sun, 03 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is my first blog post using Gatsby, React and Markdown!&lt;/p&gt;</content:encoded></item></channel></rss>