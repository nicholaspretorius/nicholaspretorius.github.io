<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[PostCode]]></title><description><![CDATA[Rudimentary 'Today I Learned' log.]]></description><link>https://nicholaspretorius.github.io</link><generator>RSS for Node</generator><lastBuildDate>Mon, 24 Dec 2018 14:52:30 GMT</lastBuildDate><item><title><![CDATA[Gatsby and GitHub Pages.]]></title><description><![CDATA[Since my site runs on Gatsby, and the setup of my source branch in respect to my GitHub page was not ideal, I set about to update this setup…]]></description><link>https://nicholaspretorius.github.io/til0051/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0051/</guid><pubDate>Mon, 24 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Since my site runs on Gatsby, and the setup of my source branch in respect to my GitHub page was not ideal, I set about to update this setup. The steps I planned to take were two-fold: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update Gatsby and all the plugin dependencies.&lt;/li&gt;
&lt;li&gt;Sort out my repo structure so that I can keep both my source and serving folders in one repo. (Thus enabling a Circle CI build)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Updating Gatsby was simple enough, after a few false starts, I took the following approach: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deleted my node_modules folder.&lt;/li&gt;
&lt;li&gt;Deleted all my dependencies and devDependencies.&lt;/li&gt;
&lt;li&gt;Re-installed all the necessary dependencies.&lt;/li&gt;
&lt;li&gt;Made a few code updates in order to enable the migration. (These steps are highlighted &lt;a href=&quot;https://www.gatsbyjs.org/docs/migrating-from-v1-to-v2/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once that was sorted out, I set about updating my repo structure. A few points on this topic: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User repositories that use GitHub pages with same username can &lt;em&gt;only&lt;/em&gt; serve their GitHub pages from &lt;em&gt;master&lt;/em&gt; branch. (Only project accounts have the option to serve from either a &lt;em&gt;master&lt;/em&gt; or &lt;em&gt;gh-pages&lt;/em&gt; branch.)&lt;/li&gt;
&lt;li&gt;Within master, you can serve your site from a /docs folder. &lt;/li&gt;
&lt;li&gt;The challenge here is that Gatsby only builds into a /public folder. Changing the name of the output folder is &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/issues/1878#issuecomment-419614298&quot;&gt;not supported&lt;/a&gt; by Gatsby. &lt;/li&gt;
&lt;li&gt;A workaround here is to create a new script in your package.json to rename the public folder to dist once the build task has completed. Something like: &lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;...
&quot;rename&quot;: &quot;mv public docs&quot;,
&quot;rebuild&quot;: &quot;gatsby build &amp;#x26;&amp;#x26; npm run rename&quot;,
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once running the task, the site will be built as per usual and the folder renamed. This folder then needs to be added to the repo (since public is excluded via .gitignore): git add docs&lt;/p&gt;
&lt;p&gt;Then push to master. &lt;/p&gt;
&lt;p&gt;In my case, my GitHub page is now serving me README.md file at the homepage. However, I am hoping that, it is just taking some time for GitHub to realise that my index.html file has moved to my /docs folder. &lt;/p&gt;
&lt;p&gt;Hence me writing this post in order to kickstart another deployment. Fingers crossed! &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nicholaspretorius/nicholaspretorius.github.io/deployments&quot;&gt;Deployments&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Gatsby and Circle CI.]]></title><description><![CDATA[My GitHub page runs on Gatsby, currently, I use a deploy task to push my published HTML pages to GitHub, this however, has lead to my repo…]]></description><link>https://nicholaspretorius.github.io/til0050/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0050/</guid><pubDate>Sat, 22 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My GitHub page runs on Gatsby, currently, I use a deploy task to push my published HTML pages to GitHub, this however, has lead to my repo being somewhat confused since the repo on GitHub is actually the published files, not the source. &lt;/p&gt;
&lt;p&gt;In an attempt to resolve this, I have started experimenting with Circle CI as a build tool. Circle CI promises &quot;power, flexibility and control&quot; and the ability to automate from commit to deploy. Circle CI offers a generous unlimited amount of repos and users, with up to 1000 build minutes on 1 container and 1 concurrent job. Sounds great! That is more than enough for my use case. &lt;/p&gt;
&lt;p&gt;Similar to Azure Pipelines, Circle CI uses .yml files to setup the necessary instructions for your pipeline. I worked from the default Node.js Circle CI configuration. &lt;a href=&quot;https://circleci.com/docs/2.0/language-javascript/&quot;&gt;More here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On first pass, when importing my source into GitHub, I was greeted with numerous GitHub security warnings, many of them &apos;High&apos;, which was a little concerning! In order to resolve these, I updated Gatsby to the latest version. While this resolved the security warnings, it broke my Gatsby local Gatsby develop task. &lt;/p&gt;
&lt;p&gt;After some digging around, I found that some of the older Gatsby versions were incompatible with the latest versions. Since I want to keep publishing posts on my blog, I did not want to sit with a broken blog while I migrate the site to a completely revamped Gatsby site. As a result, I downgraded Gatsby to the latest suggested version according to the installed dependencies. After some tweaking and upgrading some individual dependencies, I was able to get my local gatsby develop and build tasks working again! &lt;/p&gt;
&lt;p&gt;Then it was back to Circle CI to build... which failed again! This time complaining about unresolved dependencies. Namely Gatsby CLI was looking for resolve-cwd (by the prolific Sindre Sorhus). I then added Gatsby CLI to my dev dependencies and tried again. To my delight, this resolved the issue and Circle CI was able to successfully install and build my Gatsby site. &lt;/p&gt;
&lt;p&gt;Next up, sorting out the deployment! &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sourcerer.]]></title><description><![CDATA[Sourcerer  is a'visual profile for software engineers'. Effectively, it is a service and command-line app that scans your Git repos and…]]></description><link>https://nicholaspretorius.github.io/til0049/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0049/</guid><pubDate>Fri, 21 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://sourcerer.io/&quot;&gt;Sourcerer&lt;/a&gt; is a&apos;visual profile for software engineers&apos;. Effectively, it is a service and command-line app that scans your Git repos and builds a visual representation of the technology you work with in your projects. &lt;/p&gt;
&lt;p&gt;You link the service up with your GitHub (or GitLab or BitBucket) account and then the service will scan your public (not private) repos and build a Sourcerer profile page representing your code. &lt;/p&gt;
&lt;p&gt;To my mind, this page serves as a far more interesting talking point than a resume or CV. The problem with CVs is that, while someone &apos;says&apos; that they can code this and have that experience - how do you really know? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does it mean that they code a little bit of JavaScript or a lot? &lt;/li&gt;
&lt;li&gt;When they list PHP on their resume, does that actually mean they edited a WordPress template that one time?&lt;/li&gt;
&lt;li&gt;When they say they know Angular, did they just do a Hello World and call it a day? &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Granted, once can provide provide links to work, but unless it is a personal portfolio or project, it is not a very good gauge on an individual&apos;s contributions. Often times, people work in teams on larger projects, with multiple contributors and different stages of the project. Viewing any particular site shows what the team has done over a period of time, not necessarily the individual in the team. &lt;/p&gt;
&lt;p&gt;GitHub profiles are also very useful, since you can see what someone has actually done. But GitHub comes with the downside that, if you work for a company that keeps its repos private, then chances are that, unless you contribute to open source prolifically, your GitHub repos are probably more a collection of oddities than a true representation of ability. That is unless you have a convincing side project on there, publicly available. &lt;/p&gt;
&lt;p&gt;Sourcerer fills the gap between resume and public GitHub profile very well! In addition to their online service, Sourcerer provide a command-line app that lets you scan your local repos and send the various stats and facts to your Sourcerer profile. This way, you can provide real stats on your day-to-day work if your GitHub profile is not that significant. &lt;/p&gt;
&lt;p&gt;You can find the command-line app &lt;a href=&quot;https://github.com/sourcerer-io/sourcerer-app&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You install it from the command-line by: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -s https://sourcerer.io/app/install | bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From there, you run: &lt;code&gt;sourcerer&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;The app will prompt you to provide the file path and Sourcerer will scan the repo. One thing to note here is that you need to provide the email address linked to your Git commits for that repo in order for them to appear on your profile. &lt;/p&gt;
&lt;p&gt;Note: Your personal email will not appear on your profile anywhere, nor is your code sent to any servers or made public. Sourcerer just scans the repos for the data such as: number of commits, technology/frameworks used, lines of code, dates/times etc. &lt;/p&gt;
&lt;h4&gt;Profile&lt;/h4&gt;
&lt;p&gt;On the Sourcere profile page itself, as an example, you can see mine &lt;a href=&quot;https://sourcerer.io/nicholaspretorius&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Up top if shows the number of commits, repos and lines of code. Below that is a colourful timeline/graph that highlights the different technologies you work with. Beneath that, it shows a breakdown of the broader technology categories you work with and then below that goes into more details in terms of the libraries and frameworks. Finally, it wraps up with some &quot;Fun facts&quot; with graphs showing your most active times, days on which you commit most and then some stats indicating some demographics in terms of how much you use certain tech in contract with generalised stats. &lt;/p&gt;
&lt;p&gt;As cool as all of this is, it should be taken with a pinch of salt in that, these stats look at numbers... they do not look at code quality. So one still needs to take the time to dig deeper. However, a service like, at a glance, provides a great, high-level overview of the work a developer does! &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Azure DevOps.]]></title><description><![CDATA[We host one of our applications on an Azure App Service. The project is deployed manually (not ideal). As a result, I have been looking into…]]></description><link>https://nicholaspretorius.github.io/til0048/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0048/</guid><pubDate>Thu, 20 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;We host one of our applications on an Azure App Service. The project is deployed manually (not ideal). As a result, I have been looking into options for running builds. &lt;/p&gt;
&lt;p&gt;Keeping in mind we are a corporate company, with some restrictions around &apos;blueprint&apos;. Typically, we use Jenkins as a CI solution, however, this is typically hosted within our network. Additionally, CIaaS (CI as a Service) that is offered internally, is limited in scope to our Java or C# projects. As a result, our solution is not quite suited to purpose since we need to deploy outside the network and likely need to manage our own dependencies outside the corporate Nexus repo. &lt;/p&gt;
&lt;p&gt;Since we already host on Azure, and use VS Code, I was curious to see what the recently re-branded Azure DevOps (&lt;a href=&quot;https://azure.microsoft.com/en-us/services/devops/&quot;&gt;formerly known as Visual Studio Team Services&lt;/a&gt;), would have in store. What I found was interesting and compelling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Free up to 5 users with 1800 build minutes per month. &lt;/li&gt;
&lt;li&gt;Unlimited repos (private or public)&lt;/li&gt;
&lt;li&gt;Despite the name, Azure DevOps is not limited to Azure but can deploy to AWS or GCP as well. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we already have an existing Azure account, I signed up, what I found was surprising. But, first, some background: &lt;/p&gt;
&lt;p&gt;About two years ago, our company started making use of the Atlassian suit of products, namely: Jira, Confluence and most importantly BitBucket. As such, we moved away from our very old and ungainly ticketing system as well as migrated from Subversion (Tortoise SVN) towards Git. &lt;/p&gt;
&lt;p&gt;However, we did not take up Bamboo, Atlassian&apos;s CI product. Additionally, we stuck to using HP ALM for testing and defect management along with Nexus for dependency management.&lt;/p&gt;
&lt;p&gt;Logging into Azure DevOps, I was greeted with a pleasantly laid out hub design, presenting an ever-present side-menu containing the following items (which equate to more or less comparitive competitor products): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wiki (+- Confluence)&lt;/li&gt;
&lt;li&gt;Repos (+- BitBucket)&lt;/li&gt;
&lt;li&gt;Boards (+- Jira)&lt;/li&gt;
&lt;li&gt;Pipelines (+- Bamboo/Jenkins)&lt;/li&gt;
&lt;li&gt;Test Plan (+- XRay)&lt;/li&gt;
&lt;li&gt;Artefacts (+- Nexus)&lt;/li&gt;
&lt;li&gt;Marketplace (for integrations into other things)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To my eyes, this is a pretty compelling product and competes directly with Atlassian&apos;s toolkit. Considering the easy integration options into Azure, I was convinced to give it a shot. As a result, I decided to forge ahead and migrated our master branch into Azure Repos and set about building up the pipeline. &lt;/p&gt;
&lt;p&gt;More to follow in a future post...&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Thoughts on API Specifications and Swagger.]]></title><description><![CDATA[Having spent the better part of the last year working on one project that is completely reliant on a third-party API. As well as another…]]></description><link>https://nicholaspretorius.github.io/til0047/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0047/</guid><pubDate>Wed, 19 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Having spent the better part of the last year working on one project that is completely reliant on a third-party API. As well as another project, that is heavily reliant on several third-party APIs, I have developed some opinions on the matter that, in my own journey to improve as a developer has inspired some of my own behaviour. &lt;/p&gt;
&lt;h4&gt;Challenges&lt;/h4&gt;
&lt;p&gt;In particular, one of the mentioned third-party APIs has been somewhat difficult to work with due to the fact that: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There is no Swagger UI (or equivalent) to interact with. As such, I needed to construct my own PostMan collection to make testing/exploration easier.&lt;/li&gt;
&lt;li&gt;The documentation, while decent, is separate from the tool I use to test, as such, I need to continually switch between a developer portal and PostMan. (If you account for the 15 minute time out on the developer portal, it can get painful having to switch and login continually)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As a result of the above, after some searching, I came across Swagger and the concept of API-First design and development. As I see them, the benefits of designing (and sharing) the Swagger document up front are as follows: &lt;/p&gt;
&lt;h4&gt;Benefits&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;API&apos;s can be designed and distributed (thus starting the feedback loop earlier) before any code is written.&lt;/li&gt;
&lt;li&gt;Tests can start to be written sooner.&lt;/li&gt;
&lt;li&gt;Mocks can be setup sooner, which enables the front-end team to work without having to wait on the back-end team. &lt;/li&gt;
&lt;li&gt;Deliverables can then be validated against the specification to make sure all is as it should be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these in mind, and with the goal of improving my own development skills and habits, I set about with the following goals when starting to build my example &lt;a href=&quot;https://github.com/nicholaspretorius/itemly&quot;&gt;Itemly&lt;/a&gt; todo API:&lt;/p&gt;
&lt;h4&gt;Goals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I first wrote, and included a swagger.yml API specification document in the repo. &lt;/li&gt;
&lt;li&gt;I have included Swagger UI from the beginning (using @nestjs/swagger). Despite the app being rudimentary, it is important to enable a mechanism whereby anyone can start to interact with, and manually test the APIs while in development.&lt;/li&gt;
&lt;li&gt;I have included Typedoc early on for code documentation. &lt;/li&gt;
&lt;li&gt;In future, I will add an API collection document (i.e. PostMan or Insomnia) to the repo so that, if needed, these collections can be shared or used in API testing should someone not have access to Swagger UI for some reason.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Process&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I write my .yml in VS code (in order to better learn the structure)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While writing, I run the file through the swagger-cli in order to validate as I go.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i -g swagger-cli
swagger-cli validate swagger.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once ready, or when completing endpoints, I will paste the spec into the online Swagger Editor for validation (the validation and error messages are pretty good here)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Improvements&lt;/h4&gt;
&lt;p&gt;Looking at the API writing process above, admittedly, it is not particularly efficient. Some areas for improvement are:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I could include swagger-cli into an npm task - &lt;code&gt;swagger-cli validate&lt;/code&gt; error messages, while useful, do not include line numbers - hence the pasting into the Swagger Editor. &lt;/li&gt;
&lt;li&gt;On that note, the Swagger Editor has the great benefit of being able to instantly generate the Swagger UI on the fly, which really helps one &quot;see&quot; the API a lot better.&lt;/li&gt;
&lt;li&gt;I will look for a VS Code extension which can validate the Swagger document within VS Code itself.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Research&lt;/h4&gt;
&lt;p&gt;Another area I am currently looking into is how to effectively mock the API - either by using a tool such as WireMock or Mock Server, or by finding a tool to which I can pass the Swagger document and it will generate the mocks for me - something like Swagger Hub, PostMan or Stoplight might be candidates in this area. However, I will share more on this in a future post! &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Reset.]]></title><description><![CDATA[As we reach the end of the year, and work slows down that little bit, we have a brief moment to reflect, reset and refocus. For me, that…]]></description><link>https://nicholaspretorius.github.io/til0046/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0046/</guid><pubDate>Tue, 18 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As we reach the end of the year, and work slows down that little bit, we have a brief moment to reflect, reset and refocus. For me, that starts with starting to pick up on some of where I left off. Writing, both words and code.&lt;/p&gt;
&lt;p&gt;At present, I am working on a rudimentary Todo API using Nest.js. You can find it here: &lt;a href=&quot;https://github.com/nicholaspretorius/itemly&quot;&gt;Itemly&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The idea here is try and build an improved habit for writing cleaner, more modular code, better tests and documenting in Swagger and Typedoc. &lt;/li&gt;
&lt;li&gt;What I have written so far has been from following the examples in the &lt;a href=&quot;https://docs.nestjs.com/&quot;&gt;Nest.js documentation&lt;/a&gt; as well as taking some cues from other repos. &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Thoughts on Agile and Lean.]]></title><description><![CDATA[The Lean Startup by Eric Ries should be required reading for any person contributing to the creation of software (or other) products. While…]]></description><link>https://nicholaspretorius.github.io/til0045/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0045/</guid><pubDate>Wed, 26 Sep 2018 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Lean Startup by Eric Ries should be required reading for any person contributing to the creation of software (or other) products. While the focus of the book is entrepreneurs and startups, Ries rightly points out that even if you work within a company, you can adopt an entrepreneurial mindset and the lean startup process. An intrapreneur. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In particular I have been incredibly interested in the &quot;Build Measure Learn&quot; (BML) loop. Having adopted Agile where I work, coming from a traditional waterfall background, I feel as though our particular flavour of Agile sits primarily in the &quot;Build&quot; phase. While Agile has holds the Retrospective as an opportunity to learn, and has the Burndown as a means to measure velocity, it feels much to me like that learning is limited to development and the rituals that lead to development work being allocated. The application of measuring and learning about the product, market, customer and how that fuels development is largely ignored. The Lean mindset applies the build/measure/learn method to the entire cycle. This, while obvious when you read it, feels very much to be missing from our own development cycles. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I work in &quot;IT&quot; at a fairly &lt;em&gt;traditional&lt;/em&gt; company. In the company structure, there is a divide between &quot;business&quot; and &quot;IT&quot;. &quot;Business&quot; makes the money (the product is not software) and IT is there generally to support or enable the business. Agile advocates to bring the two groups closer so that the business can be directly involved via the product owner, write stories, prioritize the backlog and be more engaged in product creation. However, while this relationship begins to traverse the &lt;em&gt;divide&lt;/em&gt;, I feel this structure disincentivizes IT from adopting and advocating for the tighter, more nuanced improvements products and customers demand. You get what you tolerate and my feeling is that unless IT in so-called traditional companies step up to actively feed and contribute to the BML cycle, the products and means by which they are delivered will always be lacking in some aspect. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile focuses on delivery - delivery of working software specifically. But what good is delivery of a functional product that does not deliver true customer value?
Successful products require alignment of business model, incentives, product-market fit all wrapped up in effective software delivery. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whether there is an IT and business, or both or neither, it does not matter. If you are building software products that are not paid for by the consumer or are only used internally, all the more reason to focus on the BML cycle in order to understand the true value you should deliver. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even if you do not buy the above arguments, I think it would be wise to accept that you need build measurements, metrics and validated learnings directly into your product process. If you are not able to answer the questions required for business to answer value questions, how, as a professional in the workforce can you effectively evaluate your effectiveness or the value you generate? &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The further I progress in my career, the more I realise you need to OWN your work like never before. Even if you are not a founder, a CEO, a manager or project lead, you would do well to consider yourself the CEO of your own value generation. If not, how can you value or shape your own progress? &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To some extent, reading The Lean Startup has been as revelatory to me as when I was first introduced to the nature of functional and dvisional organisations. Working in a functional organisation serving a divisional one, it became clear that many of the frustrations and challenges we faced were not unique, that is to say, caused by our business as much as a lot of it is inherent to the structure. Divisions, by their nature only see or appreciate what is relevant to their division as that is the direction the incentives are aligned. As you begin to understand the structures, cycles and challenges inherent in the chosen setup, it really helps you identify what can at times be difficult to understand without the framework on which to hang your view. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Hello Stack Exchange.]]></title><description><![CDATA[While I missed posting about this earlier this year (this post has been backdates and manually entered after the fact), I wanted to make a…]]></description><link>https://nicholaspretorius.github.io/til0045.1/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0045.1/</guid><pubDate>Sun, 02 Sep 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;While I missed posting about this earlier this year (this post has been backdates and manually entered after the fact), I wanted to make a mention of it regardless. &lt;/p&gt;
&lt;p&gt;Stack Exchange has been an (almost) daily companion for me in my day to day work as a developer. I could not count the number of times Stack Exchange has provided me with the answers I was looking for. Admittedly, I am more of a consumer, than a contributor (which is a subject for another post, another time). However, I did finally endeavour to post my first &lt;a href=&quot;https://stackoverflow.com/questions/51373464/nodejs-error-listen-eaddrinuse-3000/52137477#52137477&quot;&gt;Answer&lt;/a&gt; this year. An incredibly minor achievement, and likely not worth a mention to most, but still, I feel like it&apos;s a step in the right direction! &lt;/p&gt;
&lt;p&gt;So far it has amassed a grand total of 1 up-votes! :)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Liferay on Azure.]]></title><description><![CDATA[I spent some time today getting to grips with the pricing structures on Azure in terms of putting together a proof of concept for running a…]]></description><link>https://nicholaspretorius.github.io/til0044/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0044/</guid><pubDate>Tue, 12 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I spent some time today getting to grips with the pricing structures on Azure in terms of putting together a proof of concept for running a Liferay application in our Azure PoC environments. Liferay is a Java-based CMS running a Postgres database, on an Apache Tomcat server and interestingly, Elasticsearch. I have previously setup a small Java microservice on Azure before and enjoyed the experience, so this has been an interesting exercise. &lt;/p&gt;
&lt;p&gt;At present, the decision we face is how to set the stack up. The options as I see them are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run the application in a VM with a Bitnami Liferay image as well as an Elasticsearch image. I am not sure this will be cost-effective since the team is already under a lot of pressure and running their own stack within the VM might not be the best option. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Manually&lt;/em&gt; set the stack up inside a VM, however, this may also be a challenge since the team is not experienced in devops culture and running what gets built. &lt;/li&gt;
&lt;li&gt;Find a way to run the app inside an App Service with a managed instance of Postgres along with blob storage and a CDN. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am still investigating the options, but I am excited about the possibilities and options for expanding my Azure knowledge further! &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Tips for writing Stack Exchange Job Posts Supported by Medium Posts.]]></title><description><![CDATA[My first Medium comment!  see here]]></description><link>https://nicholaspretorius.github.io/til0043/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0043/</guid><pubDate>Mon, 11 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My first Medium comment! &lt;a href=&quot;https://medium.com/@nicholaspretorius/hi-gijs-27df73d0c301&quot;&gt;see here&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Competencies Proficiency Scale.]]></title><description><![CDATA[How do you measure or represent your ability to do your job?  In thinking through this question and reading up on some sources, I came…]]></description><link>https://nicholaspretorius.github.io/til0042/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0042/</guid><pubDate>Sun, 10 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;How do you measure or represent your ability to do your job? &lt;/p&gt;
&lt;p&gt;In thinking through this question and reading up on some sources, I came across this page, which I think is a good frame from which to work. The &lt;a href=&quot;https://hr.nih.gov/working-nih/competencies/competencies-proficiency-scale&quot;&gt;NIH Competencies Proficiency Scale&lt;/a&gt;. Essentially, your proficiency is broken down into 5 levels: &lt;/p&gt;
&lt;h1&gt;Their words:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fundamental Awareness (basic knowledge) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have a common knowledge or an understanding of basic techniques and concepts. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Novice (limited experience) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have the level of experience gained in the classroom or as a trainee. &lt;/li&gt;
&lt;li&gt;You are expected to need help performing this skill. &lt;/li&gt;
&lt;li&gt;You understand and can discuss terminology, concepts, principles and issues related to this competency. &lt;/li&gt;
&lt;li&gt;You utilize the full range of reference and resource materials in this competency. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate (practical application)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are able to successfully complete tasks in this competency as requested. &lt;/li&gt;
&lt;li&gt;Help from an expert may be required from time to time, but you can usually perform the skill independently. &lt;/li&gt;
&lt;li&gt;You have applied this competency to situations occassionally while needing minimal guidance to perform successfully. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced (applied theory)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can perform the actions associated with this skill without assistance. &lt;/li&gt;
&lt;li&gt;You are certainly recognized within your immediate organization as a &quot;person to ask&quot; when difficult questions arise regarding this skill. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expert (recognized authority) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are known as an expert in this area. &lt;/li&gt;
&lt;li&gt;You can provide guidance, troubleshoot and answer questions related to this area of expertise and the field where the skill is used.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;My words:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fundamental awareness&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have watched a Udemy course or two on the topic and you can start to incorporate this into your own work. &lt;/li&gt;
&lt;li&gt;You will need to Google and Stack Exchange. A lot.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You know enough to start. &lt;/li&gt;
&lt;li&gt;You can cobble things together, figure them out as you go but chances are good you will be spending a lot of time on things, that a more experienced developer will solve quite quickly. &lt;/li&gt;
&lt;li&gt;Trial and error is a big part of your repertoire. &lt;/li&gt;
&lt;li&gt;You are primarily concerned with getting something to work rather than to work well. &lt;/li&gt;
&lt;li&gt;You don&apos;t know what you don&apos;t know. &lt;/li&gt;
&lt;li&gt;Your ability to read and comprehend code is limited. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can build stuff and you know enough to have opinions on what you have built (good and bad). &lt;/li&gt;
&lt;li&gt;You refer more to the MDN and developer docs directly, because you are looking for the &lt;em&gt;gist&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;You understand the building blocks and are looking for information that is more directional, than it is specific. &lt;/li&gt;
&lt;li&gt;Likely, once you have built a few things, you will start to recognise the short-comings of your implementations and become more concerned with patterns, structure, efficiency and style. &lt;/li&gt;
&lt;li&gt;Importantly, you can, for the most part, solve your own problems. &lt;/li&gt;
&lt;li&gt;You are becoming aware of what you don&apos;t know, you have pretty good ideas on what you need to get better at.&lt;/li&gt;
&lt;li&gt;You know bad code when you see it, but you aren&apos;t thoroughly versed in how to improve it - you know it should be improved and you have some ideas to go on. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have been round the block more than a few times. &lt;/li&gt;
&lt;li&gt;You can solve small problems quite quickly and most importantly, you can solve hard problems others are struggling with. &lt;/li&gt;
&lt;li&gt;Your code is generally well structured, well written and hopefully shows good style. &lt;/li&gt;
&lt;li&gt;People tend to call on you to help solve issues they are facing. &lt;/li&gt;
&lt;li&gt;You know bad code when you see it and you immediately have solid suggestions and approaches to improving it.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expert&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are solving problems most people don&apos;t even know exist. &lt;/li&gt;
&lt;li&gt;You are creating what everyone else uses. &lt;/li&gt;
&lt;li&gt;You are likely proficient in more than one language and could pick another up quickly. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Swagger.yaml.]]></title><description><![CDATA[In my journey from front-end developer to full-stack developer, coming to grips with API creation and functionality is a major part of the…]]></description><link>https://nicholaspretorius.github.io/til0041/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0041/</guid><pubDate>Mon, 04 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In my journey from front-end developer to full-stack developer, coming to grips with API creation and functionality is a major part of the learning curve. Enter the Open API Specification and swagger.yaml.&lt;/p&gt;
&lt;p&gt;For those who don&apos;t know, Swagger, is not only a tool enabled by annotations to allow for browsing, testing and documentation of existing APIs. It also enables the design and specifications of APIs. Typically, writing working code is expensive and takes times. Discovering errors during and after creation are costly to the development process and good design can reduce and avoid these errors.  &lt;/p&gt;
&lt;p&gt;As such, an API can be designed and documented via a .yaml (or .json) file. This file can then be displayed and interacted with via the Swagger UI to better design and visualise the API being created. Importantly, this .yaml file can be committed to a repo and shared with the team, which means it can be collaborated upon. &lt;/p&gt;
&lt;p&gt;Having spent the majority of the past few years working with completely undocumented APIs and more recently, having spent the better part of the last year working on a web application which consumes a third party API (poorly designed - in my opinion). I believe, I have become acutely aware of the following shortcomings in API design: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requires manual testing (i.e. each API needs to be setup and tested manually through PostMan or Insomnia)&lt;/li&gt;
&lt;li&gt;Authorisation needs to be manually created each time.&lt;/li&gt;
&lt;li&gt;Documentation (while pretty good) is separate from the above tooling. &lt;/li&gt;
&lt;li&gt;API is unpredictable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the benefits of Swagger in terms of the first three points above have been clear to me for some time. By creating a .yaml file in conjunction with the SwaggerUI the real power of Swagger and the OpenAPI spec comes to the fore. You are now able to avoid the final point by thinking through the API, step by step, using the guidance and best practice of the Open API via the low cost and low impact of the .yaml file. One is then able to share and easily modify an API before a single line of code is written. As such, in the case of a team project, the architect or lead developer could design the API and then share it with the team in order to get feedback from the others. Being able to see the entire API as well as interact with it to some extent, allows the development team to better understand the scope and possible shortcoming of the desired implementation. &lt;/p&gt;
&lt;p&gt;Being able to view and share these specifications means you can quickly and easily learn from other specs while designing and collaborating on your own spec. This spec can then, once ready to get started, be run through a mock generator to allow the front-end team to start working without having to wait for the backend developers to complete the API. Now that the API spec is known, both front and back-end developers have a contract against which to develop and more importantly, know what to expect! &lt;/p&gt;
&lt;p&gt;Changes in API spec are now more easily known and discoverable since the spec is committed to repo and can be included into the PR process. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://editor.swagger.io/&quot;&gt;Swagger Editor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://openapi-map.apihandyman.io/?version=2.0&quot;&gt;OpenAPI Map&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://apihandyman.io/writing-openapi-swagger-specification-tutorial-part-1-introduction/&quot;&gt;API Specification Tutorial&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Node.js Testing with Mocha, Chai, Sinon and Istanbul.]]></title><description><![CDATA[Unit tests seem to be like flossing - everyone says you should do it... but do you really?  Unit testing has been on my development todo…]]></description><link>https://nicholaspretorius.github.io/til0040/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0040/</guid><pubDate>Fri, 27 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Unit tests seem to be like flossing - everyone says you should do it... but do you really? &lt;/p&gt;
&lt;p&gt;Unit testing has been on my development todo list for the past while and despite a few false starts, I have not really managed to get to grips with it. Today I decided to change all that and spent the day thrashing out some tests and here are some of my initial thoughts: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First and foremost - you need to actually build something to be tested. For me, I started a new Node.js/Express API from scratch and completed a set of CRUD operations on a route with the goal being that would be one complete set of routes that needed to be tested in completion. A unit of units if you will. On to the details: &lt;/li&gt;
&lt;li&gt;Mocha is a test runner. That is to say, it is the frame upon which your tests hang. Mocha is the delivery guy to your pizza. &lt;/li&gt;
&lt;li&gt;Chai is a TDD/BDD style assertion framework. In English, it means you can write your tests in a natural-language-like syntax. &lt;/li&gt;
&lt;li&gt;Sinon is for spies, stubs and mocks. Basically, this means Sinon wholesale replaces segements of code in order to effectively test. Without Sinon you are basically doing integration tests. &lt;/li&gt;
&lt;li&gt;Istanbul is a code coverage tool. This means, it compares your test code to your overall code and lets you know how much of your code is &apos;covered&apos; by tests. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, with that out the way, you basically have 4x types of testing to my mind: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Naive testing: This is what you &lt;em&gt;probably&lt;/em&gt; do day to day. Manually running your API tests in Postman/Insomnia or clicking through your application. &lt;/li&gt;
&lt;li&gt;Unit testing is isolating a &apos;unit&apos; of your code and testing it alone without dependencies or by mocking these dependencies. The smaller the better. &lt;/li&gt;
&lt;li&gt;Integration testing is basically taking parts of your application and testing them together. For example, when testing your API you are testing your routes with the database. &lt;/li&gt;
&lt;li&gt;End-to-end testing is (hopefully) programmatically going through your application (not something I have covered yet - Selenium seems to be a widley used tool here)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, my path to testing has been driven primarily by need. Working on applications that run in multiple markets, with multiple configurations in the cloud means that with each new market or entity, you have one more application area to test, and it quickly gets out of hand when you are running UAT and Production environments with agile release schedules. As such, I have gotten to the point where I &lt;em&gt;need&lt;/em&gt; tests to back my team and I up when it comes to quality control. There just is not enough time to test every possible area with every code change and have the confidence you should that you have not broken something somewhere. While I am ashamed to admit it, I have been cowboy coding for far too long. Not cowboy cowboy, but the reality is that with the fast pace of development these days, one needs to have the following backups: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linting (to help you code better in the moment - more on this soon)&lt;/li&gt;
&lt;li&gt;Testing (to help you help yourself after the moment)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Something to keep in mind when testing is to have a &apos;validation&apos; mindset. What I mean by that is, you need to be thinking about what you are testing with a hygenic mindset. Basically, if you have a round hole, you are specifying what fits in that round hole as well as specifying what does not fit. Essentially, you are being pedantic to some level. &lt;/p&gt;
&lt;p&gt;Something that does come to mind as one goes through this is that testing is not very straightforward. It is kind of obscure at times and seems strange to get your head around. But, even if you find it uncomfortable, stick with it, because, I think, even the process of going through this, and getting yourself to think about your code from a different perspective will on some level, improve your code regardless of how the tests go. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello Merge Commit.]]></title><description><![CDATA[In the spirit of reflection on the year passed. (This post has been backdated and added after the fact.)  I made my first (tiny)  commit  to…]]></description><link>https://nicholaspretorius.github.io/til0040.1/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0040.1/</guid><pubDate>Tue, 17 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In the spirit of reflection on the year passed. (This post has been backdated and added after the fact.) &lt;/p&gt;
&lt;p&gt;I made my first (tiny) &lt;a href=&quot;https://github.com/howtographql/howtographql/pull/617&quot;&gt;commit&lt;/a&gt; to open source - particularly, the site Howtographql. It really is not anything to shout about, but I felt it was worth mentioning. A journey of a thousand steps start with the smallest step! (Even if that step was 8 moths ago!) :O&lt;/p&gt;</content:encoded></item><item><title><![CDATA[TypeScript Basics.]]></title><link>https://nicholaspretorius.github.io/til0039/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0039/</guid><pubDate>Fri, 02 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;pre&gt;
function LogBook() { 
    this.trips = [];
}

LogBook.prototype.addTrip = function (trip) {
    this.trips = this.trips.concat([trip]);
    //immutable way of adding - Angular favours this. 
    // Alternatvie to this.trips.push(trip);
};

LogBook.prototype.removeTrip = function (trip) { 
    this.trips = this.trips.filter(function (log) { 
        return trip !== log;
    })
}

var myLog = new LogBook();

myLog.addTrip(43);
myLog.addTrip(7);
myLog.addTrip(29);

console.log(&quot;My Log: &quot;, myLog);
console.log(typeof (myLog));
console.log(&quot;My Trips: &quot;, myLog.trips);

myLog.removeTrip(7);

console.log(&quot;My Trips: &quot;, myLog.trips);

// ES6/2015 class - TS Classes

class ShoppingList { 

    groceries: string[]; // array of string

    constructor() { 
        this.groceries = [];
    }

    // Public property on ShoppingList class
    addItem(item) {
        // Use ES6 spread operator to add item, alternative to concat and push
        this.groceries = [...this.groceries, item];
     }

    removeItem(item) {
        // implicit return using an ES6 arrow function
        this.groceries = this.groceries.filter((grocery) =&gt; item !== grocery);
        // same as in Trips 
        
     }
}

const myList = new ShoppingList();

myList.addItem(&quot;Apple&quot;);
myList.addItem(&quot;Banana&quot;);

console.log(myList.groceries);

myList.removeItem(&quot;Apple&quot;);

console.log(myList.groceries);

&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[One of those days.]]></title><description><![CDATA[First day of a new month. It seems to me that while we are adopting agile, we are still very much in a waterfall mindset. I imagine it will…]]></description><link>https://nicholaspretorius.github.io/til0038/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0038/</guid><pubDate>Thu, 01 Feb 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;First day of a new month. It seems to me that while we are adopting agile, we are still very much in a waterfall mindset. I imagine it will take some time to move through this. In any event, the day was spent mostly working on estimates on unknowns far in advance. Something I wonder is how do developments teams trying to work agile quote for departments that expect waterfall? &lt;/p&gt;
&lt;p&gt;The very nature of providing a quote for work to be done, on a system to be built to completion for departments that have set budgets that they have to spend in a set amount of time with expectations of delivery of a highly specified product that looks good in a PowerPoint inevitably leads to waterfall. &lt;/p&gt;
&lt;p&gt;Something to think about...&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Azure Shell.]]></title><description><![CDATA[We are going to be getting a Java developer to do some work with us next week, as result I needed to prepare an environment for him to…]]></description><link>https://nicholaspretorius.github.io/til0037/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0037/</guid><pubDate>Wed, 31 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;We are going to be getting a Java developer to do some work with us next week, as result I needed to prepare an environment for him to deploy to. You can then deploy your .war file into the site ROOT folder that gets created by Azure once you have created your Java App Service. If you are deploying a .jar, the deployment location is a little different. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you need to ping from Azure, you can do so from Kudu by using: tcpping www.google.com&lt;/li&gt;
&lt;li&gt;az group list | List your resource groups&lt;/li&gt;
&lt;li&gt;az account set -s subscriptionId | If you do not see your resource group, your Azure Shell may be linked to the wrong subscription. &lt;/li&gt;
&lt;li&gt;az webapp create --name webAppName --resource-group resourceGroupName --plan appServicePlanName | Create a webapp service&lt;/li&gt;
&lt;li&gt;az webapp config set --name webAppName --resource-group resourceGroupName --java-version 1.8 --java-container Tomcat --java-container-version 8.0 | Set that webapp to use Java&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Sprint 1 Retrospective.]]></title><description><![CDATA[We finish our first sprint tomorrow. As explained earlier this week, we are running a 1 week sprint since we are a small team. I completed…]]></description><link>https://nicholaspretorius.github.io/til0036/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0036/</guid><pubDate>Thu, 25 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;We finish our first sprint tomorrow. As explained earlier this week, we are running a 1 week sprint since we are a small team. I completed all my issues this afternoon, so I think it makes for a good time to reflect on the week. &lt;/p&gt;
&lt;p&gt;For context, our application sits on top of a third party API and application. As such we are reliant on that third party doing there part when it comes to config. As such, when doing rollouts, our tasks have a direct dependency on third party completion. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In future, we need the third party config complete the Friday before we include that work into the sprint. Otherwise time is spent &quot;waiting&quot;. This puts testing under pressure. For example, we only received our config this morning (Thursday). That means I had to do my bit, test and push it to both UAT and &quot;pre-live&quot; rapidly. This is all well and good, but it put our tester under pressure.&lt;/li&gt;
&lt;li&gt;We only scoped half my time for the week towards development, since the config and testing was estimated at 10 hours (primarily because we often run into config issues which take some time iron out). The remainder was left open in case we got access to our new market&apos;s setups and would require testing on my party to confirm all was in order. As a result, I pushed and worked on stories that were not in the sprint but in the backlog. &lt;/li&gt;
&lt;li&gt;Scope in some of the trickier features next sprint. We have an important few weeks coming up as the app will be setup, tested and released in 3 Arabic markets with a bi-lingual front-end as well as right-to-left layout. The team doing config that side is new to the product, so we may be in for some &lt;em&gt;fun&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;Allocate time towards filling out our Confluence pages and getting our clients involved in the process in a more hands-on fashion. &lt;/li&gt;
&lt;li&gt;On the technical side, the WebJob which is setup to automatically renew the Let&apos;s Encrypt SSLs was generating the SSLs using a -staging flag and a &quot;fake&quot; certificate. I need to investigate next week and resolve it. Fortunately I was able to quickly regenerate these accordingly. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was a good first sprint. We hit our goals (though we underscoped slightly) and there are areas for improvement. I am excited to see how we do next week!  &lt;/p&gt;</content:encoded></item><item><title><![CDATA[David Ogilvy's Ten Tips on Writing.]]></title><description><![CDATA[I used to have a printout of this on the office divider at my desk:  Link Read the Roman Raphaelson book on writing. Read it three times…]]></description><link>https://nicholaspretorius.github.io/til0035/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0035/</guid><pubDate>Wed, 24 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I used to have a printout of this on the office divider at my desk: &lt;a href=&quot;https://www.brainpickings.org/2012/02/07/david-ogilvy-on-writing/&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read the Roman Raphaelson book on writing. Read it three times. &lt;/li&gt;
&lt;li&gt;Write the way you talk. Naturally. &lt;/li&gt;
&lt;li&gt;Use short words, short sentences and short paragraphs. &lt;/li&gt;
&lt;li&gt;Never use jargon words like &lt;em&gt;reconceptualize&lt;/em&gt;, &lt;em&gt;demassification&lt;/em&gt;, &lt;em&gt;attitudinally&lt;/em&gt;, &lt;em&gt;judgmentally&lt;/em&gt;. They are hallmarks of a pretensious ass. &lt;/li&gt;
&lt;li&gt;Never write more than two pages on any subject. &lt;/li&gt;
&lt;li&gt;Check your quotations.&lt;/li&gt;
&lt;li&gt;Never send a letter or memo on the day you write it. Read it aloud the next morning - then edit it. &lt;/li&gt;
&lt;li&gt;If it is something important, get a colleague to improve it. &lt;/li&gt;
&lt;li&gt;Before you send your letter or your memo, make sure it is crystal clear what you want the recipient to do. &lt;/li&gt;
&lt;li&gt;If you want ACTION, don&apos;t write. Go and tell the guy what you want. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my experience, workplace email culture often fails dismally on points: 2, 4, 7, 8, 9 and 10.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Assumptions.]]></title><description><![CDATA[As the saying goes "Assumptions are the mother of all ^*&#-ups". The difficulty, at least in building software, is that the specific…]]></description><link>https://nicholaspretorius.github.io/til0034/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0034/</guid><pubDate>Tue, 23 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As the saying goes &quot;Assumptions are the mother of all ^*&amp;#x26;#-ups&quot;.&lt;/p&gt;
&lt;p&gt;The difficulty, at least in building software, is that the specific assumptions we may have differ from project to project. These assumptions are often difficult to spot ahead of time. Many may be cut from similar cloth, but one tends to discover that assumptions get dressed up in different disguises. Almost inevitably, it is our assumptions gone wrong that takes us most by surpise and leave us feeling most confounded since they seem so obvious in hindsight. &lt;/p&gt;
&lt;p&gt;So what can we do to spot those deviously disguised assumptions and prevent their antics? &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Despite our better judgements, we often tend to assume things will go well. All I can say is that you need to acknowledge that this a highly unlikely situation. Before you even knew it, you have made your first and worst assumption. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Make a note of this.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Now that your are looking at your plan in a new light. Take a look at those dates you have in mind and ask yourself and your team what leads you to expect that X, Y and Z will happen when you think it will? &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Write the reasons down. &lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;For each of those expectations you have, consider that they are actually assumptions. Now take another look at that list. Suddenly you start to realise how easy it is to be lead astray by assumptions. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, ask and answer the following questions: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What would cause X, Y and Z &lt;em&gt;not&lt;/em&gt; to happen? &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Based on those answers, then ask what can be done in order to: &lt;/p&gt;
&lt;p&gt;a. Avoid each one of these happening at all? &lt;/p&gt;
&lt;p&gt;b. If we cannot avoid it, what can be done to mitigate the chance of it happening? &lt;/p&gt;
&lt;p&gt;c. If it can&apos;t be mitigated, what can be done to recover from, or reduce the impact of, it happening?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do those things. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While it can be difficult to see our blindspots and assumptions at all times, I do believe that by asking these questions, we can at least begin to better indentify the assumptions, that while obvious in hindsight, often sneak up on us unawares and catch us napping.  &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jira Sundry.]]></title><description><![CDATA[Our team has very recently begun using Jira. Our current setup is that we have a Backlog (Kanban style) and a Sprint board. This week is our…]]></description><link>https://nicholaspretorius.github.io/til0033/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0033/</guid><pubDate>Mon, 22 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Our team has very recently begun using Jira. Our current setup is that we have a Backlog (Kanban style) and a Sprint board.&lt;/li&gt;
&lt;li&gt;This week is our first sprint and will run for one week with Retrospective and Sprint Planning on Fridays. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our basic flow is this: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scoped, groomed and prioritised stories are moved from Backlog to Active Sprint. &lt;/li&gt;
&lt;li&gt;Our sprintboard has 4 columns To Do, In Progress, In Test, Done&lt;/li&gt;
&lt;li&gt;To Do and In Progress are self-explanatory.&lt;/li&gt;
&lt;li&gt;In Test means that once the Definition of Done is reached, the developer will release to the UAT environment so that testing can begin. &lt;/li&gt;
&lt;li&gt;Once the tester is happy, the story is moved to Done. &lt;/li&gt;
&lt;li&gt;Since our project relies on a 3rd party API and frequent support thereof or therearound, we have an Epic for the third party. As such, any items that are waiting for their response/input/feedback are put into that epic. Once resolved/responded, the issues is moved back into play. &lt;/li&gt;
&lt;li&gt;In theory, this means that our Project Lead only needs to keep an eye on this Epic in terms of follow-up with the third party. &lt;/li&gt;
&lt;li&gt;Since the third party uses a separate board called Teamwork, all communication with them is logged there with the link to that thread added to the issue so that the thread can be followed in full there. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When it comes to testing, we are using HP ALM as per company standard, however, since we are a small team, we are looking to experiment with X-Ray, the Jira add-on. &lt;/li&gt;
&lt;li&gt;While most of our prior project communication is tied up in the MS Office rabbit hole of Outlook, Excel, Word, PowerPoint and share drives, I am doing my best to move as much of the development relevant information to Confluence. &lt;/li&gt;
&lt;li&gt;All our project code was moved into Git and BitBucket in October/November last year. &lt;/li&gt;
&lt;li&gt;We will be using Confluence&apos;s Meeting Notes pages for our meeting memos. &lt;/li&gt;
&lt;li&gt;In terms of the structure of our stories, this is still in early stage, but since we do a lot of config/rollout tasks, we settled on having User Stories for TEST and LIVE config on both the technical and development/server side. Each story then has a Checklist. The first person in the chain assigns the task to themselves using &quot;Assign to me&quot; and moves the story into In Progress. Once complete with their items on the checklist, they assign the story to the next person in the chain. When they are done, they moved the story to In Test and assign the story to the tester. Once the tester is happy, it gets moved to Done. &lt;/li&gt;
&lt;li&gt;We originally tried to use Tasks and sub-tasks for this, but this proved to be one hand too much overhead (creating stories with checlists is far easier and quicker) and our corporate decided workflow means that Tasks cannot be moved to In Test. As such, we stick to checklists inside stories for config. Only items that truly are &quot;tasks&quot; that do not require testing are created as &quot;Tasks&quot;. &lt;/li&gt;
&lt;li&gt;Then we have defects which will go where they are found. &lt;/li&gt;
&lt;li&gt;We have a daily stand-up following the routine of &quot;What I did yesterday? What I did today? Impediments?&quot;&lt;/li&gt;
&lt;li&gt;On that note, we have no Business Analyst (BA) or designer on the team, so many of the user stories need to be written by yours truly. I have little to no experience or trainig on this, so Google is my friend. It also means, I tend to create a lot of my own stories and issues, which, I don&apos;t think is really a good thing, but there you have it! Small teams need to multi-task! &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Taking Stock.]]></title><description><![CDATA[I have been pushing myself hard since November of last year to one again revisit my skills as a developer. Setting high goals with a…]]></description><link>https://nicholaspretorius.github.io/til0032/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0032/</guid><pubDate>Thu, 18 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I have been pushing myself hard since November of last year to one again revisit my skills as a developer. Setting high goals with a demanding schedule and uncertain circumstances has been a challenge.  &lt;/p&gt;
&lt;p&gt;Sometimes it can be a struggle to reach these goals. Since one learns more, one realises how much more there is to learn. It feels at times, that I am not entered into a race as much as a triathlon: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Improving my skills as a JavaScript developer. &lt;/li&gt;
&lt;li&gt;Learning Node.js to add backend JavaScript skills to my repertoire. &lt;/li&gt;
&lt;li&gt;Learning cloud and server managments in order to better adopt the devops role I now play. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Above all of these, trying to improve as colleague, teammate and human being overall.&lt;/p&gt;
&lt;p&gt;While I have no doubt that my skills are improving, some days, I feel as if progress has ground to a halt. One starts to focus on the gap between what is, and where one wants to get to. In that light, I thought it time to reflect on some of what I have learned about in the past year: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Become the lead (and for 95% of the time) only developer on a small but growing, international project.&lt;/li&gt;
&lt;li&gt;Built a multi-lingual, multi-directional interface (LTR - RTL).&lt;/li&gt;
&lt;li&gt;Taken responsiblity for the hosting and management of hosting for the project.&lt;/li&gt;
&lt;li&gt;Learned/learning to use Git daily after using Subversion for many years. &lt;/li&gt;
&lt;li&gt;Using Atlassian tools such as BitBucket, Jira and Confluence daily.&lt;/li&gt;
&lt;li&gt;Learning Azure and working hard to upskill myself in devops.&lt;/li&gt;
&lt;li&gt;Learning Node.js in order to deliver backend JavaScript functionality and APIs.&lt;/li&gt;
&lt;li&gt;Learned Sketch in order to mockup/design interfaces.&lt;/li&gt;
&lt;li&gt;Trying React in order to see what is out there other than AngularJS. (Angular, TypeScript, Unit Testing... all the things still to come)&lt;/li&gt;
&lt;li&gt;Learned to navigate my way around Linux, generating CSRs/SSLs, getting increasingly comfortable with the command line. &lt;/li&gt;
&lt;li&gt;Implemented app and server updates in order to meet Penetration/Security Test criteria.&lt;/li&gt;
&lt;li&gt;Spent some time learning Java in order to get a better handle on the language, environment and mindset the larger company works in. &lt;/li&gt;
&lt;li&gt;Adopting Agile in project and team work. &lt;/li&gt;
&lt;li&gt;Becoming increasingly efficient on a Mac (after a lifetime of Windows usage).&lt;/li&gt;
&lt;li&gt;Working remotely. &lt;/li&gt;
&lt;li&gt;Taking reponsibility, ownership and trying to improve my work in general. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is still a mountain to climb and most likely a further mountain range behind it. Here&apos;s to the journey, more than the destination! &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Rabbit Holes.]]></title><description><![CDATA[Late last year I resolved to unlearn and relearn my skills as a developer. While I have done this at various points in my career, what was…]]></description><link>https://nicholaspretorius.github.io/til0031/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0031/</guid><pubDate>Wed, 17 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Late last year I resolved to unlearn and relearn my skills as a developer. While I have done this at various points in my career, what was important to me this time round was to write about it. To put what I learn and some of my thoughts around the topic on the internet. Regularly. And to learn a whole lot of new things along the way. For the past month or so, I have kept to it. Almost daily. However, since Thursday night last week, like Alice into Wonderland, I found myself heading down a rabbit hole into a collection of strange errors and poor choices. I am still not quite sure I am out of the rabbit hole, but at least I am putting a post out there! So where to begin? &lt;/p&gt;
&lt;p&gt;This site, has been developed on a MacBook Pro Retina 13-inch late 2012 model, with a 2.5 GHz Intel Core i5 and 8GB of memory and 120GB of storage. Up until I bought this machine a few years back, I had only ever worked on Windows machines. The company I work for uses Windows exclusively, except for two iOS developers. As such, I am a Windows-user by day, and Mac user by night. Due to my travels and several relocations over the past few years, I have not had a continuous, fast internet connection, often relying on mobile data via mifi hotspots, wifi or whatever internet may be available where I am staying at any particular time. As such, on both my iPhone and MacBook Pro, I have never configured continous backups to iCloud or any other service like that. Hand in hand with these same travels and movements, my photo collection has expanded rapidly over the same time period and space has become a rare commidty on this machine. To the point that, actively managing the meagre space I have left over after Photos has become an almost daily chore. I am greeted with modals telling my memory is full or near to it, multiple times a night. &lt;/p&gt;
&lt;p&gt;At the very same time, as this site may indicate, I have been learning Node.js, Express and Azure and eventually wound my way to MongoDB. Which, in turn, lead me to the crux of the matter. In order to install MongoDB on a Mac, you use Homebrew. When installing MongodDB via Homebrew, I was rather unceremoniously informed that my XCode was out of date. Considering I hardly ever use XCode, I decided to be done with it and removed it completely. Because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As mentioned, I do not use XCode. &lt;/li&gt;
&lt;li&gt;XCode takes a lot of space and removing it would free up a scarce resource.&lt;/li&gt;
&lt;li&gt;XCode Command Line Tools are available as a separate install, which, for the most part, means Homebrew can run smoothly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But... it was not to be. Despite cleaning up my brewery according to brew doctors helpful recommendations. Installing XCode Command Line Tools brought no respite. The brew install mongodb command informed me, no, I need the full XCode. &lt;/p&gt;
&lt;p&gt;Damn. Enough was enough. After some grumblings to my own self along the lines of &quot;Why the %^&amp;#x26;$ would MongoDB REQUIRE a full XCode?&quot;, I took a breath and reflected on what I could learn from this experience? &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I need to free up space on my machine so I can continue working without losing my memory management mind. &lt;/li&gt;
&lt;li&gt;I really do need to backup my Photos and other files to the cloud (a single external HD is not enough!)&lt;/li&gt;
&lt;li&gt;The obstacle is the path. &lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Backup Blaze&lt;/h4&gt;
&lt;p&gt;My first thought was to backup all my Photos and videos to iCloud. Easier said than done. &lt;/p&gt;
&lt;p&gt;After running into some strange iCloud username and password scenarios and it getting late after a long day, I decided to drop iCloud and find out whether all these good things I hear about Backblaze are true? &lt;/p&gt;
&lt;p&gt;So I signed up for the Trial Period and started backing up. After following the link saying &quot;How long will my backup take?&quot; How long indeed I wondered?
Answer: Twenty. Five. Days! &lt;/p&gt;
&lt;p&gt;Now, this ADSL connection runs at more or less 7-9 Mbps download and hovers in the region of 1-2 Mbps upload. Not exactly Speedy Gonzalez. Helpfully, Backblaze said I can continue using my laptop as normal...
Not quite. When your connection is not that fast to begin with (even slower during peak-evening times) and your laptop periodically loses wifi signal when it sleeps... Well, I am 7 days into my backup and to be honest, I have no idea if it is closer to being done or further way from being done. On Saturday Backblaze said there were only about 9000 files left, and today there are apparently over 18000 left. So what&apos;s a guy to do Backblaze? &lt;/p&gt;
&lt;p&gt;Part of my resolution to learn new things, is, due to my limited time after hours, made up of watching and coding along with tutorial videos which I (usually) stream at around 1.5x speed. This helps me see other coders work, code along, struggle and learn in an accerlated environment. With my backup happening, this slowed to a crawl since streaming video was now more like a stuttering/buffering contest than anything. Listening to a continually buffering video is a sure way to lose your mind and patience.  &lt;/p&gt;
&lt;p&gt;At the same time, my past few work days have included less coding/problem solving than I usually do. We are busy onboarding a new tester and this highlighted the fact that our Confluence pages were woefully underpopulated and our Jira workflows needed some revisiting. Alongside this, I was mostly preparing, testing and revising some existing code and functionality for a release this week. As such, the &quot;Today I Learned&quot; side of things has been somewhat underpopulated in terms of pure code and tech the past week. &lt;/p&gt;
&lt;p&gt;Granted, there is a lot more I can write about than just code snippets, commands and steps. I decided however, that since it was the weekend, and since my machine had a lot of backing up to do, I would take a break. Curiously, on Monday, after getting home quite late and performing my ritual &quot;Backblaze Progress Check&quot; I tried to open Chrome and get coding again. Chrome would not open. As in, click to open Chrome. Nothing happens. Maybe Backblaze is hogging up some resource Chrome uses. Onto Safari. It opens. Sweet! Type in a URL and... Safari closes. No crash. Just. Closes. Every. Time. Being Monday and being late I decided to leave it to another day. Come Tuesday, and we are gearing up for a release Wedneday, so work turns into a long day and I decide to just leave it one more day. &lt;/p&gt;
&lt;p&gt;So that is how you lose your habits! The same way you build them. One day at a time. &lt;/p&gt;
&lt;p&gt;Be vigilant with your breaks from habit! No matter how small, and for what reasons. This is how you go from daily, to weekly, to monthly, to your annual &quot;New Year&apos;s Resolution&quot;. If you go down the rabbit hole. Take a moment to stop and reflect on how and why you ended up there before burrowing even further. If not, at least write about it!&lt;/p&gt;
&lt;p&gt;The road to hell is paved with good intentions. As well as bad backup practices and not having enough space on your MacBook.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Miscellaneous confusions...]]></title><description><![CDATA[Why does installing MongoDB require the installation of XCode?  
Before you say 'Hold on there buddy! You can run Homebrew on X Code's…]]></description><link>https://nicholaspretorius.github.io/til0030/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0030/</guid><pubDate>Wed, 10 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Why does installing MongoDB require the installation of XCode? &lt;br/&gt;&lt;br/&gt;
Before you say &apos;Hold on there buddy! You can run Homebrew on X Code&apos;s standalone Command Line Tools.&apos;. Yes, I know. And no, not always. Yes, I successfully installed, for example, the Azure CLI via brew with &lt;strong&gt;only&lt;/strong&gt; the Command Line Tools installed. However, when trying for brew install mongodb I was told explicitly by brew that the standalone tools were not enough. It makes little sense to me that I need to install a 9-10GB application in order to install MongoDB. Why?&lt;/li&gt;
&lt;li&gt;Why is iCloud Keychain so complicated? &lt;br/&gt;&lt;br/&gt;
After numerous attempts and combinations of password resets, signing in with AppleID password, then laptop password, then SMS verification code and then some strange 6 digit &apos;iPhone&apos; passcode (which was not my iPhone&apos;s passcode) continually failed despite me entering verification codes generated from my iPhone. I eventually managed to get in with the details it had to date been failing with. How? I have no idea. &lt;/li&gt;
&lt;li&gt;Then we come to Azure Portal. Now, I have been using Azure at work and been experimenting with it at home and I have noticed on several occassions: &lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;I have had to have my Azure password at work reset at least twice because, for some strange reason, Azure sometimes signs out and then seemingly will not allow you to sign back in. &lt;/li&gt;
&lt;li&gt;In addition to this, when you do sign out, Azure often asks you to close the window - why? &lt;/li&gt;
&lt;li&gt;Lastly, today, after signing out of my Azure account this morning, when I returned this evening, Azure informed me my account was temporarily suspended due to suspicious activity and that I need to send an SMS code to my phone to re-activate. Firstly - what suspicious activity? I was not even signed in. Secondly - when sending the SMS, the loading spinner just spun and spun and spun... &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Azure Blob Storage.]]></title><description><![CDATA[npm i busboy azure-storage --save In your Express Generator app/controllers/home.js: (Note that this is just a basic example without login…]]></description><link>https://nicholaspretorius.github.io/til0029/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0029/</guid><pubDate>Tue, 09 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm i busboy azure-storage --save&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your Express Generator app/controllers/home.js: (Note that this is just a basic example without login)&lt;/p&gt;
&lt;pre&gt;
    ...
    const Busboy = require(&apos;busboy&apos;);
    const blobStorage = require(&apos;../services/blobStorage&apos;);
    ...
    router.post(&apos;/upload&apos;, function(req, res) {

        var busboy = new Busboy({ headers: req.headers });

        busboy.on(&apos;file&apos;, function(fieldname, file, filename, encoding, mimetype) {
            blobStorage.saveToBlob(filename, file, function(err, result){
            if(err) {
                res.setEncoding(500, err);
            } else {
                res.redirect(&apos;/show?name=&apos; + encodeURI(filename));
            }
            });
        });
        req.pipe(busboy);
        });

    router.get(&apos;/show&apos;, function (req, res) {
        res.render(&apos;show&apos;, {
            name: req.query.name,
            url: blobStorage.getUrl(req.query.name)
        });
    });
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In blobStorage.js | Note, you should not hardcode your details like this, they should be retrieved from Azure directly.&lt;/p&gt;
&lt;pre&gt;
    process.env[&apos;AZURE_STORAGE_ACCOUNT&apos;] = &apos;your-storage-name&apos;;
    process.env[&apos;AZURE_STORAGE_ACCESS_KEY&apos;] = &apos;your-storage-access-key&apos;;

    var azure = require(&apos;azure-storage&apos;);
    var blobService = azure.createBlobService();
    var images = &apos;images&apos;;

    function saveToBlob(name, stream, cb) {

        // cb is callback
        stream.pipe(blobService.createWriteStreamToBlockBlob(images, name, cb));
    }

    function getUrl(name) {

        var startDate = new Date();
        startDate.setMinutes(startDate.getMinutes() - 15);

        var expiryDate = new Date(startDate);
        expiryDate.setMinutes(startDate.getMinutes() + 30);

        var permissions = azure.BlobUtilities.SharedAccessPermissions.READ;

        var sharedAccessPolicy = {
            AccessPolicy: {
            Permissions: azure.BlobUtilities.SharedAccessPermissions.READ,
            Start: startDate,
            Expiry: expiryDate
            },
        };

        var sasToken = blobService.generateSharedAccessSignature(images, name, sharedAccessPolicy);

        return blobService.getUrl(images, name, sasToken);
    }

    module.exports = {
        saveToBlob: saveToBlob,
        getUrl: getUrl
    };
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your .pug form&lt;/p&gt;
&lt;pre&gt;
    form(action=&quot;/upload&quot;, method=&quot;post&quot;, enctype=&quot;multipart/form-data&quot;)
        input(type=&quot;file&quot;, name=&quot;image&quot;)
        button(type=&quot;submit&quot;, value=&quot;Upload&quot;) Upload photo
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In your .pug redirected page&lt;/p&gt;
&lt;pre&gt;
    p Showing #{name}
    img(src=url)
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[More Azure & Node.js.]]></title><description><![CDATA[When deploying Node.js to Azure, the default entry file is server.js.  Make sure to set the port in your app to something like: const port…]]></description><link>https://nicholaspretorius.github.io/til0028/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0028/</guid><pubDate>Mon, 08 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;When deploying Node.js to Azure, the default entry file is server.js. &lt;/li&gt;
&lt;li&gt;Make sure to set the port in your app to something like: const port = process.env.port || 8000; so that Azure can use it&apos;s preferred port. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2 ways to setup up Node.js on Azure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In a Virtual Machine&lt;/li&gt;
&lt;li&gt;In an App Service&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Azure Virtual Machines&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Machine: In the Azure Portal, select &apos;Virtual machines&apos; and follow the prompts: e.g. Ubuntu, SSD + SSH public key for authentication&lt;/li&gt;
&lt;li&gt;In iterm2/terminal: ssh-keygen -t rsa -b 2084&lt;/li&gt;
&lt;li&gt;Remember your passphrase if you set one&lt;/li&gt;
&lt;li&gt;Once setup: ssh username@IP.ADD.RES.S &lt;/li&gt;
&lt;li&gt;I had trouble using a non-standard key, as such, I ended up using the default: rsa_id&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once logged in, run: &lt;/p&gt;
&lt;pre&gt;
sudo apt-get update
sudo apt-get install nodejs
sudo apt-get install npm
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then run: nodejs -v to check your version and if all is well.
*On your local, install the Azure CLI via Homebrew: &lt;/p&gt;
&lt;pre&gt;
brew update 
brew install azure-cli
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A few commands to get you started: &lt;/p&gt;
&lt;pre&gt;
az -h 
az vm -h
az login
az stop
az deallocate
az start
az account set --subscription your-subcription-name
az vm list --output-table
az vm deallocate --name your-vm-name --resource-group your-resource-group
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can then setup Local Git as a deployment source to Azure. &lt;/p&gt;
&lt;pre&gt;
cd your-project
git init
git add .
git commit -m &apos;First commit&apos;
git add remote azure http://the-azure-git-url.git
git push azure master
az webapp browse --name your-app-name --resource-group your-resource-group 
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once that is done, you can setup deployment slots as: &lt;/p&gt;
&lt;pre&gt;
az webapp -h
az webapp deployment slot swap --slot your-slot-name --name your-app-name --resource-group your-resource-group-name
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Azure App Service&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;az group create --location &apos;location-name&apos; --name your-app-service-name&lt;/li&gt;
&lt;li&gt;az appservice plan create --name your-app-service-name --resource your-resource-name --sku FREE&lt;/li&gt;
&lt;li&gt;az webapp create --name your-app-name --resource-group your-resource-group-name --plan your-plan-name&lt;/li&gt;
&lt;li&gt;az webapp deployment source config-local-git --name your-app-name --resource-group your-resource-group-name&lt;/li&gt;
&lt;li&gt;Then connect your add your Azure git remote, add/commit and push. &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Azure &amp; Node.js, PowerShell.]]></title><description><![CDATA[Check the OS and architecture in PowerShell:  2 Ways to check which version of Node is running on Azure:  Open the Kudu Console (via…]]></description><link>https://nicholaspretorius.github.io/til0027/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0027/</guid><pubDate>Fri, 05 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check the OS and architecture in PowerShell: &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
    wmic os get caption
    wmic os get osarchitecture
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2 Ways to check which version of Node is running on Azure: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the Kudu Console (via Advanced Tools, CMD) and run: node -v or npm -v&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the Azure Portal, in the App Service blade, in Application Settings look for:                     &lt;pre&gt;
WEBSITE_NODE_DEFAULT_VERSION&lt;/p&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3 Ways to specify the Node.js version to run in Azure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In package.json set the following:&lt;/p&gt;
&lt;pre&gt;
    &quot;engines&quot;:{
        &quot;node&quot;: &quot;0.6.22 || 0.8.x&quot;
    }
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &apos;node_env&apos; by changing the value mentioned above in Application settings. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &apos;node_env&apos; in your web.config in the system.webServer block:&lt;/p&gt;
&lt;pre&gt;
    &amp;lt;system.webServer&amp;gt;
        ...
        &amp;lt;iisnode node_env=&quot;production&quot; /&amp;gt;
        ...
    &amp;lt;/system.webServer&amp;gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set it via the iisnode.yml file | &lt;a href=&quot;https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/iisnode.yml&quot;&gt;Link&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;
Note: The web.config or iisnode.yml values will override the value in Application Settings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploying Node.js to Azure: &lt;br/&gt;
&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service/app-service-web-tutorial-rest-api&quot;&gt;Link&lt;/a&gt;
&lt;br/&gt;
Further reading:
&lt;br/&gt;
&lt;a href=&quot;http://mosshowto.blogspot.co.za/2017/10/quick-tutorial-nodejs-app-service-azure.html&quot;&gt;Link&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://mosshowto.blogspot.co.za/2017/10/nodejs-swaggerize-api-into-azure-app.html&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first article above introduced me to Swaggerize, which, via a Yo generator, lets you generate boilerplate code for your API via a Swagger.json document specifying your routes. It will then also setup the Swagger UI for you to enable testing. Very cool! &lt;a href=&quot;https://www.npmjs.com/package/swaggerize-express&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a reminder, when working with GitHub or Azure via a proxy, remember to: &lt;/p&gt;
&lt;pre&gt;
    git config --global http.proxy http://proxyuser:proxypassword@proxy.server.domain:port
    git config --global --unset http.proxy
    git config --global --get http.proxy
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Express, Express, Express.]]></title><description><![CDATA[Add static resources to Node.js server Modularize your routes, for example, in /routes/index.js: Then in your main app.js Setup CORS for…]]></description><link>https://nicholaspretorius.github.io/til0026/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0026/</guid><pubDate>Thu, 04 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add static resources to Node.js server&lt;/p&gt;
&lt;pre&gt;
    app.use(&apos;/static&apos;, express.static(&apos;public&apos;));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modularize your routes, for example, in /routes/index.js:&lt;/p&gt;
&lt;pre&gt;
    const express = require(&quot;express&quot;);
    const router = express.Router();

    router.get(&apos;/&apos;, (req, res) =&gt; {
        ...
    });
    ...
    module.export = router;
&lt;/pre&gt;
&lt;p&gt;Then in your main app.js&lt;/p&gt;
&lt;pre&gt;
    const routes = require(&apos;./routes&apos;);
    app.use(routes);
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup CORS for your API app | npm i cors --save&lt;/p&gt;
&lt;pre&gt;
    ...
    var cors = require(&quot;cors&quot;);
    ...
    app.use(cors({
        origin: [&quot;http://localhost:8000&quot;],
        methods: [&quot;GET&quot;, &quot;POST&quot;],
        allowedHeaders: [&quot;Content-Type&quot;, &quot;Authorization&quot;]
    }));
    ...
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logging with Morgan | npm i morgan --save&lt;/p&gt;
&lt;pre&gt;
...
var morgan = require(&apos;morgan&apos;);
...
app.use(morgan(&apos;common&apos;));
&lt;/li&gt;
&lt;/ul&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Configuring Node.js clusters in cluster.js | &lt;a href=&quot;https://nodejs.org/dist/latest-v4.x/docs/api/cluster.html&quot;&gt;Clusters&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
    var cluster = require(&quot;cluster&quot;);
    var os = require(&quot;os&quot;);
    
    const CPUS = os.cpus();
    
    if (cluster.isMaster) {
        for (var i = 0; i &lt; CPUS.length; i++) { 
            cluster.fork() 
        });
        
        cluster.on(&quot;listening&quot;, function(worker) {
            console.log(`Cluster ${ worker.process.pid } connected`);
        });
    
        cluster.on(&quot;disconnect&quot;, function(worker) {
            console.log(`Cluster ${ worker.process.pid } disconnected`);
        });

        cluster.on(&quot;exit&quot;, function(worker) {
            console.log(`Cluster ${ worker.process.pid } is dead`);
            // Ensuring a new cluster will start if an old one dies
            cluster.fork();
        });
    } else {
        require(&quot;./index.js&quot;);
    }
&lt;/pre&gt;
&lt;p&gt;Then run: nodemon cluster.js &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GZIP Compression | npm i compression --save | &lt;a href=&quot;http://expressjs.com/en/advanced/best-practice-performance.html#use-gzip-compression&quot;&gt;Compression&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
    ...
    var compression = require(&apos;compression&apos;);
    ...
    app.use(compression(6)); // number indicates level of compression
&lt;/pre&gt;
&lt;br/&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protect from some forms of attach with Helmet | npm i helmet --save&lt;/p&gt;
&lt;pre&gt;
    ...
    var helmet = require(&apos;helmet&apos;);
    ...
    app.use(helmet());
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Credit: &lt;a href=&quot;https://medium.com/@Jscrambler/setting-up-5-useful-middlewares-for-an-express-api-640039cc6708&quot;&gt;JScrambler Blog&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Node.js, Nodemailer + Express Handlebars, Express + TypeScript.]]></title><description><![CDATA[Nodemailer-express-handlebars is a useful plugin for Nodemailer that allows you to use Handlebars templates in your HTML emails |  Link…]]></description><link>https://nicholaspretorius.github.io/til0025/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0025/</guid><pubDate>Wed, 03 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nodemailer-express-handlebars is a useful plugin for Nodemailer that allows you to use Handlebars templates in your HTML emails | &lt;a href=&quot;https://github.com/yads/nodemailer-express-handlebars&quot;&gt;Link&lt;/a&gt; &lt;br/&gt;
The documentation on that page does not provide a full usage example and is really short on details. I then found this article which was incredibly helpful! | &lt;a href=&quot;http://excellencenodejsblog.com/express-nodemailer-sending-mails/&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
...
var hbs = require(&apos;nodemailer-express-handlebars&apos;);
var options = {
viewEngine : {
    extname: &apos;.hbs&apos;, // handlebars extension
    layoutsDir: &apos;views/email/&apos;, // location of handlebars templates
    defaultLayout: &apos;template&apos;, // name of main template
    partialsDir: &apos;views/email/&apos;, // location of your subtemplates aka. header, footer etc
},
viewPath: &apos;views/email&apos;,
extName: &apos;.hbs&apos;
};
...
mailer.use(&apos;compile&apos;, hbs(options));
mailer.sendMail({
from: &apos;test@test.com&apos;,
to: req.body.to,
subject: req.body.subject,
template: &apos;template&apos;,
context: {
    firstName: req.body.firstName,
    lastName: req.body.lastName,
    ...
}
}, function(error, response)...) 
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Most of my day was then spent trying to figure out how best to put Node.js, Express and its dependencies into a working app via Webpack. I have not been very successful so far... My main issue at present is that when I run Webpack I get a lot of errors that say things like: Module not found: Error: Can&apos;t resolve &apos;./decode/&apos; etc &lt;br/&gt;
I did however, find two articles which look promising and that I will be picking for clues:
&lt;br/&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;TypeScript, Express and Node.js | &lt;a href=&quot;http://brianflove.com/2016/11/08/typescript-2-express-node/&quot;&gt;Link&lt;/a&gt; &lt;br/&gt;
This is a great article, however, he uses Grunt to build his TypeScript which is not quite what I am looking for. &lt;/li&gt;
&lt;li&gt;TypeScript, ExpressJS API with Webpack | &lt;a href=&quot;https://medium.com/@Pierre_anthill/typescript-expressjs-api-with-webpack-4655126d884b&quot;&gt;Link&lt;/a&gt;&lt;br/&gt;
Another great article that look to cover most of what I am looking for.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[PowerShell, Plain JS Post, Enabling CORS on Express and Express Body Parser.]]></title><description><![CDATA[Determine the version of PowerShell you are running: $PSVersionTable.PSVersion Determine the execution policy on PowerShell (this is…]]></description><link>https://nicholaspretorius.github.io/til0024/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0024/</guid><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Determine the version of PowerShell you are running: $PSVersionTable.PSVersion&lt;/li&gt;
&lt;li&gt;Determine the execution policy on PowerShell (this is necessary to determine whether you can ru PowerShell scripts): Get-ExecutionPolicy&lt;/li&gt;
&lt;li&gt;Useful resource for setting up Invoke-RestMethod calls via PowerShell scripts | &lt;a href=&quot;https://www.jokecamp.com/blog/invoke-restmethod-powershell-examples/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable CORS on an Express server | &lt;a href=&quot;https://enable-cors.org/server_expressjs.html&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
app.use(function(req, res, next) {
res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept&quot;);
next();
});
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;To use req.body inside of Express you need to load Body Parser | &lt;a href=&quot;https://stackoverflow.com/questions/10005939/how-do-i-consume-the-json-post-data-in-an-express-application/10007542#10007542&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First install it: npm i body-parser&lt;/p&gt;
&lt;pre&gt;
var express = require(&apos;express);
var bodyParser = require(&apos;body-parser&apos;);
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;var app = express();&lt;/p&gt;
&lt;p&gt;app.use(bodyParser.json());&lt;/p&gt;
&lt;p&gt;app.post(&apos;/&apos;, function(req, res) {
console.log(req.body);
})
app.listen(8000);&lt;/p&gt;
&lt;/pre&gt;
* In package.json check: &quot;main&quot;: &quot;app.js&quot;, then you can just run: nodemon instead of: nodemon app.js
* npm i pug --save
* mkdir view &amp;&amp; cd_$
* touch index.pug
* Then:
&lt;pre&gt;
    app.set(&apos;view engine&apos;, &apos;pug&apos;);
    ..
    app.get(&apos;/&apos;, (req, res) =&gt; {
        res.render(&apos;index&apos;, {title=&apos;Hello world!&apos;});
    });
&lt;/pre&gt;
* Pug templating 101 (Assume we have var colors = [&apos;red&apos;, &apos;blue&apos;, &apos;green&apos;])
&lt;pre&gt;
    doctype html
    html(lang=&quot;en&quot;)
        head
            title= title
        body
            div.wrapper
            .content
            ul
                each color in colors
                   li color
            p#main Hi!
            #secondary
            if hint 
                p
                    i Hint: #{hint}
            else 
                p (There is no hint)
&lt;/pre&gt;
* Pug locals
&lt;pre&gt;
    app.get(&apos;/cards&apos;, (req, res) =&gt; {
        res.locals.prompt = &quot;What is your question?&quot;;
        res.locals.hint = &quot;Think about something.&quot;; // interpolated from #{hint} above
        res.render(&apos;card&apos;);
        // res.render(&apos;card&apos;, {prompt: &apos;What is your...&apos;, hint: &apos;Think about...&apos;});
    });
&lt;/pre&gt;
* Pug Partials &lt;br/&gt;
In the layout.pug file (along with a: mkdir includes)
&lt;pre&gt;
...
header 
    include includes/header.pug
...
block content
...
    include includes/footer.pug
&lt;/pre&gt;
In the index.pug file: 
&lt;pre&gt;
extends layout.pug
&lt;p&gt;block content
section#wrapper
h1 Hello world!&lt;/p&gt;
&lt;/pre&gt;
&lt;h3&gt;Eloquent JavaScript Chapter 4: Data Structures&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Almost all JavaScript values have properties except null and undefined.&lt;/li&gt;
&lt;li&gt;value.prop prop must be a valid variable name and directly names the propery.&lt;/li&gt;
&lt;li&gt;value[prop] prop is &lt;strong&gt;evaluated&lt;/strong&gt; to get the property name. &lt;/li&gt;
&lt;li&gt;The elements of an array are stored in properties with numbers for their names. &lt;/li&gt;
&lt;li&gt;Properties that contain functions are called methods. Examples are .toUppercase, .toLowerCase for strings. Array have pop(), push(), .join() amongst others. &lt;/li&gt;
&lt;li&gt;You can delete an object property with: delete object.propertyName;&lt;/li&gt;
&lt;li&gt;console.log(&quot;propertyName&quot; in object); // false&lt;/li&gt;
&lt;li&gt;array.shift(); will return (and remove) the first item in the array, as opposed to .pop() which will return and remove the last item in the array. &lt;/li&gt;
&lt;li&gt;Similarly .unshift() add an item to the beginning of an array and .push() adds an item to the end of an array. &lt;/li&gt;
&lt;li&gt;indexOf(x) returns the index of the first instance of x in the array whereas lastIndexOf(x) returns the index of the last instance of x in the array. Both take an optional second argument to indicate where to start the search from. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.slice() takes two parameters, start(inclusive), end(exclusive) and returns an array of the items between start and end. If no second parameter is supplied, it takes all the items after the start.&lt;/p&gt;
&lt;pre&gt;
console.log([0, 1, 2, 3, 4].slice(2, 4));
console.log([0, 1, 2, 3, 4].slice(2));
&lt;/pre&gt; 
&lt;/li&gt;
&lt;li&gt;array1.concat(array2); will put two arrays into one and return the resulting array. &lt;/li&gt;
&lt;li&gt;&quot;   somestring  \n&quot;.trim(); will remove all the whitespace (spaces, tabs, newlines) from the string&lt;/li&gt;
&lt;li&gt;Strings, numbers and booleans are not objects and are &lt;strong&gt;immutable&lt;/strong&gt; which means you cannot add properties to them. &lt;/li&gt;
&lt;li&gt;Whenever a function is called, a special variable names &apos;arguments&apos; is added to the environment in which the function body runs. arguments has a .length property. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Math.random();&lt;/p&gt;
&lt;pre&gt;
console.log(Math.floor(Math.random()*10));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All global variables are stored in the global object, that is window.&lt;/p&gt;
&lt;pre&gt;
var myVar = 10;
console.log(&quot;myVar&quot; in window);
console.log(window.myVar);
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Eloquent JavaScript Chapter 3: Functions.]]></title><description><![CDATA[Recursion - Generally, recursion can be up to 10 times slower than looping. However, recursion can be more elegant, as such, the programmer…]]></description><link>https://nicholaspretorius.github.io/til0023/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0023/</guid><pubDate>Mon, 01 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recursion - Generally, recursion can be up to 10 times slower than looping. However, recursion can be more elegant, as such, the programmer must determine whether efficiency or simplicity is more appropriate. &lt;/p&gt;
&lt;pre&gt;

function power(base, exponent) {
    if (exponent == undefined) {
        exponent = 2;
    }

    var result = 1;

    for (var count = 0; count &lt; exponent; count++) {
        result *= base;
    }
    
    return result;
}

function powerR(base, exponent) {
    if (exponent == 0)
        return 1;
    else
        return base * power(base, exponent - 1);
}

console.log(&quot;Recursive: &quot;, powerR(2, 3));
console.log(&quot;Loop: &quot;, power(2,3));
&lt;/li&gt;
&lt;/ul&gt;
&lt;/pre&gt;
* Closures - The ability to reference an instance of a local variable in an enclosing function.
&lt;pre&gt;
function multiplier(factor) {
    return function(number) {
            console.log(&quot;Factor: &quot;, factor, &quot; Number: &quot;, number);
            return number * factor;
        };
    }
&lt;pre&gt;&lt;code&gt;var twice = multiplier(3);
console.log(twice(5));
&lt;/code&gt;&lt;/pre&gt;
&lt;/pre&gt;
* Lexical scope is the variable &apos;visibility&apos; of variables within a program via combinations of scope. Essentially, local scopes have access to those scope around them. They do not have access to scopes inside of them.  
* Function declarations can be placed anywhere within the program as they are effectively hoisted to the top of the scope when running. 
&lt;pre&gt;
    foo(&apos;bar&apos;);
    // function declaration
    function foo(string) {
        console.log(&apos;Foo&apos;, string);
    }
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Expression functions need to be declared before they are used. &lt;/p&gt;
&lt;pre&gt;
// function definition
var foo = function(string) {
    return &apos;Foo&apos; + string;
}
console.log(foo(&apos;bar&apos;));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;In JavaScript you can have optional arguments/parameters. If there are too many, the extras get ignored. If there are too few, the missing params get undefined. &lt;/li&gt;
&lt;li&gt;There are basically two ways functions are introduced:
Replication - You find there is code repeated in your program and you write a function to remove this repetition.
Purpose - You have something you need to do, so you write a function to do it. &lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&apos;How difficult it is to find a good name for a function is a good indication of how clear a concept it is that you’re trying to wrap.&apos; - Marijn Haverbeke&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;There are generally three types of functions:
Pure functions - return values and receive values, they do not access global variables or have side effects. They do not rely on side-effects from elsewhere.
Side effect functions - do not return a value and typically adjust globals. These can be difficult to reason about.
Combination functions - these are functions that combine both the approaches&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Thoughts on improving JavaScript coding ability.]]></title><description><![CDATA[As 2018 begins, one of my primary goals for the first quarter is to improve my JavaScript coding abilities. I have been building websites…]]></description><link>https://nicholaspretorius.github.io/twil0003/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/twil0003/</guid><pubDate>Mon, 01 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As 2018 begins, one of my primary goals for the first quarter is to improve my JavaScript coding abilities. I have been building websites for many years, but when I think on my knowledge, I feel as though I am a very reactionary developer. That is to say, I do what needs to be done for the job at hand and move onto the next without too much reflection on what I have just done. This means I am productive and I do a good job, but I feel there is a deeper understanding of the language and how best to use it that is missing. In order to do so, I have decided on the following approach to better understand and code JavaScript. (Keeping in mind that I am writing code as my day job too): &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read JavaScript programming books to better understand the language from the ground up. I will be reading: &lt;br/&gt;&lt;br/&gt;
Eloquent JavaScript by Marijn Haverbeke  (January). &lt;br/&gt;
JavaScript: The Good Parts by Douglas Crockford (February) &lt;br/&gt;
JavaScript Design Patterns by Addy Osmani (March) &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Based on my reading, I will write Feynman Method-like summaries of what I read and publish them to this site. &lt;/li&gt;
&lt;li&gt;Code the challenges and examples from the above books and publish them on this site.&lt;/li&gt;
&lt;li&gt;Spend at least 15-30 minutes a day reading and learning from the Mozilla JavaScript documentation. | &lt;a href=&quot;https://developer.mozilla.org/bm/docs/Web/JavaScript&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Watch JavaScript coding videos and write the code in them along with some summaries. I will be doing the following courses: &lt;br/&gt;&lt;br/&gt;
Ultimate Angular (January) | &lt;a href=&quot;https://ultimateangular.com/&quot;&gt;Link&lt;/a&gt; &lt;br/&gt;
Team Treehouse&apos;s Fullstack JavaScript track | [Link] (&lt;a href=&quot;https://teamtreehouse.com/tracks/full-stack-javascript&quot;&gt;https://teamtreehouse.com/tracks/full-stack-javascript&lt;/a&gt;) &lt;br/&gt;
Tyler McGinnis&apos; React Courses (March) | &lt;a href=&quot;https://tylermcginnis.com/courses/&quot;&gt;Link&lt;/a&gt; &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;Take the knowledge and best practice learned (hopefully) from the above and ACTUALLY apply it. It is one thing to know something, it is quite another to do! &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many people know they should eat healthier, exercise more, eat donuts less and so on. The reality is that we often do not &lt;strong&gt;live&lt;/strong&gt; the way we &lt;strong&gt;know&lt;/strong&gt; we should. In my case it is similar when it comes to coding. Sometimes the knowing goes out the window and I end up writing code that works, but might not be the best code I could write. Much like in life, most people cannot go from the couch to running a marathon in one day. Instead you need to build new habits, day by day, reshape and remove old ones and put one foot in front of the other until you get to the level you aspire to. &lt;/p&gt;
&lt;h5&gt;Updates&lt;/h5&gt;
&lt;h6&gt;02/01/2018&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;I read Chapter 4 of Eloquent JavaScript - my notes can be found here &lt;a href=&quot;/til0024&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I did not review the MDN docs, however, I did spend quite a bit of time learning some Express basics. &lt;/li&gt;
&lt;li&gt;I did not do a Feynman-like method review of the chapter, I will work on this | &lt;a href=&quot;https://mattyford.com/blog/2014/1/23/the-feynman-technique-model&quot;&gt;Link&lt;/a&gt;
&lt;br/&gt;&lt;br/&gt;
Essentially the goal is to: &lt;/li&gt;
&lt;li&gt;Write the title of the topic on the top of the page&lt;/li&gt;
&lt;li&gt;Summarise the concept in plain language using analogies where effective&lt;/li&gt;
&lt;li&gt;Review what you don&apos;t understand to fill in the gaps&lt;/li&gt;
&lt;li&gt;Simplify - pretend you are teaching it to someone else&lt;/li&gt;
&lt;li&gt;I watched around an hours of code, but watched the &lt;a href=&quot;https://teamtreehouse.com/library/express-basics-2&quot;&gt;Treehouse Express Basics&lt;/a&gt; videos instead since it is very relevant to my current tasks at work. &lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;03/01/2018&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;Did not review MDN documents again... I think I need to do this for the first 15-30 minutes in the morning when I get in. Hopefully it will set the tone for the day. &lt;/li&gt;
&lt;li&gt;No Feynman-like reviews either, I think I may need to remove this from the list as I am finding myself short of time. &lt;/li&gt;
&lt;li&gt;I have not yet read Eloquent JavaScript today, pressure to learn Node.js, Express and other things means I am spending my time research these topics and continuing with the video courses. &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[FizzBuzz and other exercises.]]></title><description><![CDATA[Exercise 2 from Eloquent JavaScript  Exercise 3 from Eloquent JavaScript Exercise 4 from Eloquent JavaScript  Exercise 5 from Eloquent…]]></description><link>https://nicholaspretorius.github.io/til0022/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0022/</guid><pubDate>Sat, 30 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Exercise 2 from Eloquent JavaScript &lt;/p&gt;
&lt;pre&gt;
//Problem: Print out all numbers from 1 to 100. When divisible by 3 print Fizz, then divisible by 5 print Buzz, when divisible by both 3 and 5 print FizzBuzz
// Solution: JS - Loop through all the numbers, check modulo 3, 5 and 3 and 5, print appropriate word

function fizzBuzz(min, max) {
    
    function fizzOrBuzz (number, divisorA, divisorB) {
        if (divisorB) {
            return ((number % divisorA === 0) &amp;&amp; (number % divisorB === 0))  
        } else {
            return number % divisorA === 0
        }
    }
    
    for (var i = min; i &lt;= max; i++) {
        if (fizzOrBuzz(i, 3, 5)) {
            console.log(&apos;FizzBuzz (&apos;, i , &apos;)&apos;);
        } else if (fizzOrBuzz(i, 3)) {
            console.log(&apos;Fizz (&apos;, i, &apos;)&apos;);
        } else if (fizzOrBuzz(i, 5)) {
            console.log(&apos;Buzz (&apos;, i , &apos;)&apos;);
        } else {
            console.log(i);
        }
    }
}

fizzBuzz(1, 100);
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exercise 3 from Eloquent JavaScript&lt;/p&gt;
&lt;pre&gt;
// Problem: Draw out a chessboard of 8*8 using the space and # characters, alternating the start character. 
// Solution: JS - Use a loop to draw out the columns then at the end, alternate a boolean to start with one character or the other. 

function chessBoard(spread) {
    var blank = false;
    var a = &apos; &apos;, b = &apos;#&apos;, row = &apos;&apos;;
    
    for (var c = 1; c &lt;= spread*spread; c++) {
        if (c % spread === 0) {
            row += &apos;\n&apos;
        }
        else if(blank) {
            row += a;
            blank = !blank;
        } else {
            row += b
            blank = !blank;
        }
    }
    console.log(row);
}

chessBoard(8);
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exercise 4 from Eloquent JavaScript &lt;/p&gt;
&lt;pre&gt;
// Problem: Return the minimum number between two numbers
// Solution: Accept two arguments and determime which is less

function min(a, b) {
    if (typeof(a) === &apos;number&apos; &amp;&amp; typeof(b) === &apos;number&apos;) {
        var min = a &lt; b;
        return min ? a : b
    } else {
        return NaN;
    }   
}

console.log(min(3,-9));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exercise 5 from Eloquent JavaScript &lt;/p&gt;
&lt;pre&gt;
// Problem: Use recursion to determine whether a number is even, if even, return true
// Solution: Create a function that returns true if number is 0, false if number is 1, else subtract 2 from the number

function isEven(number){
    if(number &lt; 0) {
        number = number * -1;
    }

    if (number === 0) {
        return true;
    } else if (number === 1) {
        return false;
    } else {
        number -= 2;
        return isEven(number);
    }
}

console.log(isEven(-34));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exercise 6 from Eloquent JavaScript &lt;/p&gt;
&lt;pre&gt;
// Problem: Create a function that counts how many times a provided letter appears in a string
// Solution: Loop through the string using .charAt to determine whether the letter is a match
function countChars(string, letter){
    var count = 0;
    for (var i = 0; i &lt; string.length; i++) {
        if (string.charAt(i) === letter) {
            count+=1;
        }
    }
    return count;
}

console.log(countChars(&apos;chakkalakka&apos;, &apos;a&apos;));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate prime numbers in a range&lt;/p&gt;
&lt;pre&gt;
function getPrimes(min, max) {

    function isPrimeBruteForce(number){
        for (var i = 2; i &lt; (number - 1); i++) {
            if (number % i === 0) {
                return false;
            }
        }
        return true
    }

    if (min &lt; max &amp;&amp; min &gt; 1 &amp;&amp; max &gt; 1) {
        var primes = [];
        
        for (var i = min; i &lt; max; i++) {
            if(isPrimeBruteForce(i)) {
                primes.push(i);
            }
        }     
        return primes;
    } else {
        return -1;
    }
}

console.log(getPrimes(3, 100));
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exercise 7 from Eloquent JavaScript&lt;/p&gt;
&lt;pre&gt;
function range(start, end, increment) {
    var arr = [];
    var inc = 1;
    if (increment) {
        inc = increment;
    } 
    for (var i = start; i &lt;= end; i+=inc) {
        arr.push(i);
    }
    return arr;
}

function sum(array) {
    var sum = 0;
    for (var i = 0; i &lt; array.length; i++) {
        sum = sum + array[i];
    }
    return sum;
}

console.log(sum(range(1,10, 2)));
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TypeScript Fundamentals and AngularJS Performance.]]></title><description><![CDATA[Completed the videos for Ultimate Angular Typscript Fundamentals and AngularJS Performance |  Link   ng-repeats through large data…]]></description><link>https://nicholaspretorius.github.io/til0021/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0021/</guid><pubDate>Fri, 29 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Completed the videos for Ultimate Angular Typscript Fundamentals and AngularJS Performance | &lt;a href=&quot;https://ultimateangular.com/courses/&quot;&gt;Link&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;ng-repeats through large data collections can be batched in order to increase performance. | &lt;a href=&quot;https://github.com/UltimateAngular/angular-1-performance-src/blob/master/08-ng-repeat-batching/js/components/todos.component.js#L42&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using &apos;track by&apos; on ng-repeat is more performant as AngularJS does not need to attach its own keys at run-time&lt;/li&gt;
&lt;li&gt;ng-if is more perfomant than ng-show/ng-hide as AngularJS does not need to set watchers on each instance. It destroys them when no longer required. &lt;/li&gt;
&lt;li&gt;Use ng-model-options with debounce on input fields as it will reduce the number of digest cycles required. This also delays the evaluation so that you do not need to instantly display validation and can wait a little while. &lt;/li&gt;
&lt;li&gt;When using AngularJS expressions, you can limit the evaluations required by AngularJS storing an evaluation in a value so that AngularJS does not need to evaluate the terms or function on each digest cycle. If the evaluation is only needed once, the bind-once syntax of :: can be used. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http calls can be batched if within +- 10 milliseconds of each by using &lt;/p&gt;
&lt;pre&gt;
angular
.module(&apos;app&apos;, [])
.config(function ($httpProvider) {
	$httpProvider.useApplyAsync(true);
});
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strict Dependency Injection (Strict DI) can be used for minification for performance as follows: &lt;/p&gt;
&lt;pre&gt;
controller: [&apos;CounterService&apos;, function (CounterService) {
this.$onInit = function () {
  this.count = CounterService.getInitialCount();
};
this.increment = function () {
  this.count = CounterService.incrementCount(this.count);
};
this.decrement = function () {
  this.count = CounterService.decrementCount(this.count);
};
}]
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On production builds, there is no need for all the AngularJS specific .data that gets added at runtime. This can be turned off by doing: &lt;/p&gt;
&lt;pre&gt;
angular
.module(&apos;app&apos;, [])
.config(function($compileProvider) {
	$compileProvider.debugInfoEnabled(false);
})
;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;The $onDestroy lifecycle hook can be used on AngularJS ^1.5 to do garbage collection and remove data bindings, especially when using things like EventHandlers. This can save significantly on memory usage during the lifespan of the Single Page Application. &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Terminal, Node.js Continued, Triangles, Yarn and TypeScript.]]></title><description><![CDATA[ps aux | To show processes running kill -9 processId | processId being the number of the process you want to kill Node.js fs and querystring…]]></description><link>https://nicholaspretorius.github.io/til0020/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0020/</guid><pubDate>Thu, 28 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ps aux | To show processes running&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kill -9 processId | processId being the number of the process you want to kill&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node.js fs and querystring | &lt;a href=&quot;https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback&quot;&gt;Link&lt;/a&gt; and &lt;a href=&quot;https://nodejs.org/api/querystring.html#querystring_querystring_parse_str_sep_eq_options&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Triangle exercise from &lt;a href=&quot;http://eloquentjavascript.net/02_program_structure.html#h_umoXp9u0e7&quot;&gt;Eloquent JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
/* Triangle Exercise from Eloquent JavaScript 28/12/2017 (http://eloquentjavascript.net/02_program_structure.html#h_umoXp9u0e7) */
function drawTriangle(limit, char) {
    var string = &apos;&apos;;
    for (var i = 1; i &lt; limit; i++) {
        for (var j = 0; j &lt; i; j++){ // var j = i; j &lt; limit; j++ for inverted triangle
            string += char;
        }
        string += &apos;\n&apos;
        //string += &apos;!&apos;;
    }
    console.log(string);
}

drawTriangle(8, &apos;#&apos;);
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JS Types: String, Boolean, undefined, null, Object, Number, Symbol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AST = abstract syntax tree | &lt;a href=&quot;http://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hold CMD while hovering on a symbol in VS Code and it will display an overlay of the definition. CMD + Click will open the file at the definition. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMD + D to select next occurrence of a word in VS Code. Shift + CMD + F is find and replace. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Right click &quot;Rename symbol&quot; or FN + F2 shortcut rename symbol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yarn global add typescript&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yarn init -y | -y flag is to answer yes to all init options&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yarn add -D typescript webpack webpack-dev-server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tsc --init | Creates a ts project for you in the folder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tsc -w | Runs tsc in watch mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Union types and type alias&lt;/p&gt;
&lt;pre&gt;
// Specify type alias with union types # or $
type ValidSymbols = &apos;#&apos; | &apos;$&apos;
const symbol = &apos;#&apos;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Gatsby to GitHub Pages, Gatsby RSS and Angular.js.]]></title><description><![CDATA[npm i --save-dev gh-pages |  Link Add RSS to Gatsby |  Link Completed the Ultimate Angular 1.x Pro videos]]></description><link>https://nicholaspretorius.github.io/til0019/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0019/</guid><pubDate>Tue, 26 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;npm i --save-dev gh-pages | &lt;a href=&quot;https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add RSS to Gatsby | &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-feed&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Completed the Ultimate Angular 1.x Pro videos&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Node.js Basics and 200 badges on Treehouse.]]></title><description><![CDATA[You can access the command line arguments in node.js using process.argv console.dir, console.error 200 badges on Treehouse!  Link 200 OK…]]></description><link>https://nicholaspretorius.github.io/til0018/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0018/</guid><pubDate>Sat, 23 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;You can access the command line arguments in node.js using process.argv&lt;/li&gt;
&lt;li&gt;console.dir, console.error&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
    https.get(url, (res) =&gt; {
        const response = &quot;&quot;;
        res.on(&apos;data&apos;, data =&gt; {
            response += data.toString();
        })
        res.on(&apos;end&apos;, () =&gt; {
            const result = JSON.parse(response);
            console.dir(result);
        })
    });
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;200 badges on Treehouse! &lt;a href=&quot;https://teamtreehouse.com/nicholaspretorius&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;200 OK, 500 Internal Server Error, 404 Not Found, 301 Moved permanently&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Node.js, Azure Logic Apps and Terminal.]]></title><description><![CDATA[Node.js. Mind. Blown. |  Link nodemon app.js |  Link Nodemailer |  Link Azure Logic App with SMTP - have not yet found a way to make this…]]></description><link>https://nicholaspretorius.github.io/til0017/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0017/</guid><pubDate>Fri, 22 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Node.js. Mind. Blown. | &lt;a href=&quot;https://nodejs.org/en/docs/guides/getting-started-guide/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nodemon app.js | &lt;a href=&quot;https://nodemon.io/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nodemailer | &lt;a href=&quot;https://nodemailer.com/about/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Azure Logic App with SMTP - have not yet found a way to make this work with TLS? | &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/connectors/connectors-create-api-smtp&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In Mac Terminal: Home is Ctrl + A, End is Ctrl + End&lt;/li&gt;
&lt;li&gt;Next word ESC then f, previous word ESC then b&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Git, Azure and Deploying a AngularJS app from VS Code.]]></title><description><![CDATA[If you are working behind a corporate proxy, first setup Git for this: git config --global http.proxy  http://username:password@proxy:port…]]></description><link>https://nicholaspretorius.github.io/til0016/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0016/</guid><pubDate>Thu, 21 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;If you are working behind a corporate proxy, first setup Git for this: git config --global http.proxy &lt;a href=&quot;http://username:password@proxy:port&quot;&gt;http://username:password@proxy:port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check it looks right: git config --global --get http.proxy&lt;/li&gt;
&lt;li&gt;You can also unset it: git config --global --unset http.proxy&lt;/li&gt;
&lt;li&gt;In the Azure portal, select your App Service, then select Deployment Options and configure your local Git as a deployment source. Take note of your deployment credentials&lt;/li&gt;
&lt;li&gt;git checkout your-branch&lt;/li&gt;
&lt;li&gt;Add your azure instance as a remote via: git remote add azure &lt;a href=&quot;https://your.provided.azure.git&quot;&gt;https://your.provided.azure.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check that the remote added by running: git remote -v&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since the AngularJS app runs from the dist folder,  you will need to: touch .deployment | code .deployment &lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
[config]
folder = dist
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;You will also need to remove the dist/ line from your .gitignore&lt;/li&gt;
&lt;li&gt;git add --all &lt;/li&gt;
&lt;li&gt;git commit -m &quot;.deployment for deploying from repo to Azure. Update .gitignore for this purpose. Adding /dist&quot;&lt;/li&gt;
&lt;li&gt;git push azure your-branch&lt;/li&gt;
&lt;li&gt;Note that Azure deploys from the master branch by default, to change this, you can add an Azure App Setting on your App Service called deployment_branch with the name of your-branch. Remember to stop and start your App Service once this has been done. &lt;/li&gt;
&lt;li&gt;Once your push has been successful, check your App Service URL. &lt;/li&gt;
&lt;li&gt;Next steps: Use Deployment Slots to manage moving your Development service through Staging/UAT to Production.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Regex alternations and dependency depression.]]></title><description><![CDATA[Use | as an alternation in regex patterns The past few days I have been working through some tutorials, one on React and the other on…]]></description><link>https://nicholaspretorius.github.io/til0015/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0015/</guid><pubDate>Wed, 20 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Use | as an alternation in regex patterns&lt;/li&gt;
&lt;li&gt;The past few days I have been working through some tutorials, one on React and the other on AngularJs 1.6. While I am making progress, I am not sure what to make of the incredible amount of config and boilerplate one has to setup in order to get going. I understand that modern JS apps have a lot on their plate and one needs to cater to all these different development processes and build processes, but with it seems to me that the same convenience that makes NPM so powerful is the same thing that makes it so tricky to figure out what is happening when something goes wrong. While I have managed to get the projects running, on one occassion there is a NPM registry completely missing. On the other, I have forked a repo directly and run npm install and out of the box, babel/register cannot load... &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[AngularJs i18n, NPM, Screenshots and More config.]]></title><description><![CDATA[You switch locales for AngularJs by including the necessary i18n locale file |  Link  |  Link Install a specific version of a NPM package…]]></description><link>https://nicholaspretorius.github.io/til0014/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0014/</guid><pubDate>Tue, 19 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;You switch locales for AngularJs by including the necessary i18n locale file | &lt;a href=&quot;https://github.com/angular/angular.js/tree/master/src/ngLocale&quot;&gt;Link&lt;/a&gt; | &lt;a href=&quot;https://docs.angularjs.org/guide/i18n&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install a specific version of a NPM package | npm i -D package-name@1.2.3&lt;/li&gt;
&lt;li&gt;Screenshot on Mac CMD + Shift + 4 then select area on page | Ctrl + CMD + Shift + 4 will save to clipboard. &lt;/li&gt;
&lt;li&gt;Continued with Fullstack.io React tutorial - discovered an empty karma-sourcemap-loader npm package and raised an issue | &lt;a href=&quot;https://github.com/demerzel3/karma-sourcemap-loader/issues/37&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Config, config, congif, ficong, confee, confi, confused...&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Terminal commands, Chrome tabs on Windows, NPM and More React.]]></title><description><![CDATA[mkdir folder name && cd $ . mkdir -p sub folder name/{sub sub1,sub sub2,sub_sub3} && touch filename.js Switch Chrome tabs on Windows with…]]></description><link>https://nicholaspretorius.github.io/til0013/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0013/</guid><pubDate>Sun, 17 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;mkdir folder&lt;em&gt;name &amp;#x26;&amp;#x26; cd $&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;mkdir -p sub&lt;em&gt;folder&lt;/em&gt;name/{sub&lt;em&gt;sub1,sub&lt;/em&gt;sub2,sub_sub3} &amp;#x26;&amp;#x26; touch filename.js&lt;/li&gt;
&lt;li&gt;Switch Chrome tabs on Windows with Ctrl + Tab or Ctrl + Shift + Tab, &lt;/li&gt;
&lt;li&gt;npm i -S dep1 dep2 dep3 &lt;/li&gt;
&lt;li&gt;npm i -D devDep1 devDep2 devDep3&lt;/li&gt;
&lt;li&gt;Following along with the Fullstack.io React Yelp Clone tutorial | &lt;a href=&quot;https://www.fullstackreact.com/articles/react-tutorial-cloning-yelp/&quot;&gt;Link&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;This tutorial seems to be somewhat outdated. It does however, take you through the proces of configuring your environment manually (more or less) which, I think, will be valuable longer term. Note that you may run into issues with npm start when configuring the CSS Modules and loaders. The best thing to do here is to take a look at the packages.json file in the GitHub repo and compare the version numbers. When I installed the dependencies, I received the latest in everything and this broken some of the code. Setting the dependencies to the versions on GitHub should rectify this. ([Credit] (&lt;a href=&quot;http://disq.us/p/1j51enm&quot;&gt;http://disq.us/p/1j51enm&lt;/a&gt;))&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will also need to change the way the Component Class is setup according to ES2016 as JS classes namely &lt;/p&gt;
&lt;pre&gt;
class App extends React.Component{
render() {
return (&lt;div className={styles[&apos;container&apos;]}&gt;Hello world!&lt;/div&gt;)
}
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[React Basics, React Dev Tools and Mac Chrome key combos.]]></title><description><![CDATA[Completed the  React Basics  course at Treehouse. Install the React Dev Tools Chrome extension, then in chrome://extensions make sure to…]]></description><link>https://nicholaspretorius.github.io/til0012/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0012/</guid><pubDate>Sat, 16 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Completed the &lt;a href=&quot;https://teamtreehouse.com/library/react-basics&quot;&gt;React Basics&lt;/a&gt; course at Treehouse.&lt;/li&gt;
&lt;li&gt;Install the React Dev Tools Chrome extension, then in chrome://extensions make sure to tick &quot;Allow access to file urls&quot; | &lt;a href=&quot;https://github.com/facebook/react-devtools/blob/master/README.md#the-react-tab-doesnt-show-up&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Switch between Chrome windows on Mac with CMD + `, &lt;/li&gt;
&lt;li&gt;CMD + Alt + Left/Right to switch tabs in a Chrome window. &lt;/li&gt;
&lt;li&gt;Ctrl + Left/Right switches to desktop and back to active pane. &lt;/li&gt;
&lt;li&gt;Alt + Tab (with Left/Right) switches between open applications. &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Thoughts on problem solving.]]></title><description><![CDATA[When you run into a code problem, bug or challenge - here are some steps to try get you out of your bind:  Acknowledge that you  will  find…]]></description><link>https://nicholaspretorius.github.io/twil0002/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/twil0002/</guid><pubDate>Sat, 16 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;When you run into a code problem, bug or challenge - here are some steps to try get you out of your bind: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Acknowledge that you &lt;em&gt;will&lt;/em&gt; find a way to solve the problem. It might not be right now, today or even tomorrow, but at some point in the future you will solve it. As such, each attempt is an experiment. Succeed or fail, at each turn, reconsider what you think you know or what you think is happening. &lt;/li&gt;
&lt;li&gt;Clear some space in your day to think about what you need to do, write down the result you are looking for and how you might go about it. If you have a few options, great! Write them down too. Work backwards and forwards to try and break the problem down into smaller steps. Arrange them, re-arrange them. Basically, break the problem down into pieces and attack those one by one. Programming is far easier in incremental steps. Small results stacked on top of each other go a very long way. &lt;/li&gt;
&lt;li&gt;Consider that part or all of the reason you cannot solve this problem is because you are assuming something is happening that isn&apos;t. Maybe you aren&apos;t actually doing what you think you are doing. Or vice-versa, maybe you are doing the wrong thing. Re-trace your steps.&lt;/li&gt;
&lt;li&gt;Change is progress: If you are getting an error and then you get a different error this is good! Think about what you did, rewind the change and play it back. What is happening? Why did it happen? What does this tell you?&lt;/li&gt;
&lt;li&gt;Change is good in another way too: change of context. Take a break, get a cup of coffee, go for a walk, do something else for a while. It often helps to put the problem at the back of your mind for a little while. If you get to the end of the day with no success. Sleep on it.  &lt;/li&gt;
&lt;li&gt;Google. Google is your fiend. Google your problem, see what you find. &lt;em&gt;Read&lt;/em&gt; the source documentation. Try the example code. Look for similar examples. Read through Stack Overflow answers. Get ideas. Try different things. Most importantly, read the code. Maybe you are missing something? Chances are good someone has encountered the same or at least a similar problem to yours. &lt;/li&gt;
&lt;li&gt;If you are getting really stuck, try and separate the problem out into a simplified version of things. If you can get a basic example right, maybe you can build something up to contribute towards a more complex one. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubberduckdebugging.com/&quot;&gt;Rubber-duck debugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you are still stuck, search for a video course that is similar or matching your problem. You will be amazed at the courses and content you can find online. Sometimes, spending a few hours and few rands/dollars/euros on solidifying your knowledge and skills can go a very long way. &lt;/li&gt;
&lt;li&gt;If you have tried all of the above, and I mean really tried, then enlist some help. Before you do though, take a break, retrace your steps one by one and repeat the Rubber Duck strategy before you do. It&apos;s always worth one more shot. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;TILs of the week:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/til0007/&quot;&gt;Touch and pipe file to VS Code, git fetch and more Gatsby.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0008/&quot;&gt;VS Code Auto format, AngularJS $state, $stateChangeSuccess &amp;#x26; Angular Translate.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0009&quot;&gt;CSS left:auto, strikethroughs on OneNote and Bootstrap Modal trickery. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0010/&quot;&gt;Web.Config exception, Ng-Map miscellaneous and Hotel. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0011/&quot;&gt;Ng-Map grey area fix, &apos;pre-merge&apos; branches, better conflict resolution tools? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0012/&quot;&gt;React, React Dev Tools and Mac Chrome key combos.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Ng-Map grey area fix, 'pre-merge' branches, better conflict resolution tools?]]></title><description><![CDATA[If you get a grey area on first load of your Ng-Map, try this |  Link I had to do a fairly large merge with many conflicts today. My…]]></description><link>https://nicholaspretorius.github.io/til0011/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0011/</guid><pubDate>Fri, 15 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you get a grey area on first load of your Ng-Map, try this | &lt;a href=&quot;https://github.com/allenhwkim/angularjs-google-maps#grey-area-in-google-maps&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
//vm.map is the Ng-Map instance
var center = vm.map.getCenter();
google.maps.event.trigger(vm.map, &quot;resize&quot;);
vm.map.setCenter(center);
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I had to do a fairly large merge with many conflicts today. My suggestion is to: &lt;/p&gt;
&lt;pre&gt;
git checkout branch-to-be-merged-into
git checkout -b pre-merge-branchname
git merge longlast-merged-branch
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have resolved all the conflicts, create a pull request from the pre-merge-branchname to the branch-to-be-merged-into. Then merge from there. This will, in theory, prevent you from screwing up your main branches by utilizing the pre-merge-branchname as a kind of &lt;em&gt;staging&lt;/em&gt; area for your merge. However, it is best you do not let your branches get too far out of sync if possible. This will reduce the number of conflicts and be easier to manage. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On that note, VS Code is useful in that it highlights merge conflicts in the &quot;map&quot; on the right along with the purple highlights and C indicators. The trick is that, these colours/codes do not change once you have resolved, so you need to be sure to keep track and do your resolutions in a very methodical manner. I would however like to discover a better way to manage these conflicts? I am thinking something along the lines of a &lt;em&gt;Beyond Compare-like&lt;/em&gt; side-by-side view with easy to use -&gt; and &amp;#x3C;- buttons for &apos;Approve current&apos; or &apos;Approve incoming&apos; or to make a merge/manual edit of the conflicting lines. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I will be investigating this possibility next week: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/jfromaniello/9207698&quot;&gt;Integrate Beyond Compare with Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.scootersoftware.com/support.php?zz=kb_vcs#gitlinux&quot;&gt;Beyond Compare and Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Web.Config exception, Ng-Map miscellaneous and Hotel.]]></title><description><![CDATA[If you want to exclude a specific folder from a blanket redirect rule in Web.Config and this to your  < condition > When using the AngularJS…]]></description><link>https://nicholaspretorius.github.io/til0010/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0010/</guid><pubDate>Thu, 14 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you want to exclude a specific folder from a blanket redirect rule in Web.Config and this to your &amp;#x3C;condition&gt;&lt;/p&gt;
&lt;pre&gt;&amp;lt;add input=&quot;{URL}&quot; pattern=&quot;/path/folder/.*$&quot; negate=&quot;true&quot; ignoreCase=&quot;true&quot; /&amp;gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;When using the AngularJS plugin Ng-Map, you can lazy load Google Maps - Make sure not include the regular Google Maps script in your HTML | &lt;a href=&quot;https://ngmap.github.io/#/!map-lazy-load-params.html&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you want to initialise the map in Ng-Map based on an action you can do this | &lt;a href=&quot;https://ngmap.github.io/#/!map-lazy-inint.html&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hotel is a nifty utility that lets you launch your local servers from one place npm install -g hotel &amp;#x26;&amp;#x26; hotel start | &lt;a href=&quot;https://github.com/typicode/hotel&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then run: hotel add &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; (or whatever your server is)&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Impostor Syndrome and Expert Beginners]]></title><description><![CDATA[Impostor Syndrome and Expert Beginners . Great article by Erik Dietrich on the expert beginner: Expert beginner Ring a bell? If it did, let…]]></description><link>https://nicholaspretorius.github.io/impostor-syndrome-expert-beginners/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/impostor-syndrome-expert-beginners/</guid><pubDate>Wed, 13 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;&lt;a href=&quot;https://www.daedtech.com/impostor-syndrome-and-expert-beginners/&quot;&gt;Impostor Syndrome and Expert Beginners&lt;/a&gt;.&lt;/h3&gt;
&lt;p&gt;Great article by Erik Dietrich on the expert beginner:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expert beginner&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&quot;An expert beginner is a small king in a small kingdom [...] Management gives him the run of the place in spite of the fact that, as it turns out, he’s not really very good at what he does.&quot; - Erik Dietrich&lt;/blockquote&gt;
&lt;p&gt;Ring a bell?&lt;/p&gt;
&lt;p&gt;If it did, let&apos;s try tease this out a little more since it touches on some of wider themes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&quot;&gt;Dunning-Kruger Effect&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&quot;In the field of psychology, the Dunning–Kruger effect is a cognitive bias wherein people of low ability suffer from illusory superiority, mistakenly assessing their cognitive ability as greater than it is. The cognitive bias of illusory superiority derives from the metacognitive inability of low-ability persons to recognize their own ineptitude; without the self-awareness of metacognition, low-ability people cannot objectively evaluate their actual competence or incompetence.&quot; - Wikipedia&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=4627373&quot;&gt;10 Years Experience VS 10 x 1 Year Experience&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&quot;Ask yourself: Have you got 10 years of experience or do you have 10 x 1 year&apos;s experience?&quot; - Don&apos;t know who&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Impostor syndrome&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;&quot;Those suffering from impostor syndrome believe their achievements the result of luck or favor rather than merit.&quot; - Erik Dietrich&lt;/blockquote&gt;
&lt;p&gt;As Erik delineates in his piece, the expert beginner and the impostor-syndrome-afflicted are two sides of the same coin. Each side reflecting the positive aspect and negative aspect of the issue. Essentially, we dislike expert beginners and we like the impostors. As Erik points out, the difference stems from feedback blindness and the inability to internalize feedback. I would add to this that, the difference also stems from the mixture of the following factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internal validation or external praise&lt;/li&gt;
&lt;li&gt;Lifelong learning or fixed mindset&lt;/li&gt;
&lt;li&gt;How it looks or how it works&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will tend to find that the expert beginner is motivated by an alignment on the negative side of the items above. They are looking for external praise to validate their internal insecurities. They have a fixed mindset because they have found their comfort zone in an area in which they know enough to be dangerous and they do not want to venture beyond that border for fear of being found out. In that sense, you can see they are cut from the impostor cloth, but they do not want to admit it and actively argue against it. Lastly, because the expert beginner knows enough to be dangerous, they can produce something that looks like it works. Yet when you scratch beneath the surface you start to realise that the room is only clean because all the junk has been hidden under the bed (Unfortunately, the dirty socks are sticking out from under it). The irony is that, as illustrated by the Dunning-Kruger effect, the expert beginner does not have the ability to recognise their incompetence. (If they do, they will not admit it)&lt;/p&gt;
&lt;p&gt;The expert beginner shies away from the positive side of the 3 items because the external validation is a replacement for the lack of the internal. The fixed mindset is more concerned with consolidating power and influence as opposed to improving upon (or even realising their own shortcomings). When you have a hammer, everything is a nail. Since they fear being caught out of their comfort zone for all to see, they essentially relive the same year of experience many times over. Lastly, the expert beginner is primarily concerned with the outward appearance because in fact they know the internal mechanisms are just cobbled together.&lt;/p&gt;
&lt;p&gt;The reason, I think, that people dislike the expert beginner is that we can see past the facade. We know the plaster is cracking and that the bricks are not aligned as they should be, yet the expert beginner illustriously keeps painting over the cracks hoping that enough layers of plaster and paint will keep the house from falling. This gets to why I think we like the impostors. Impostors tend to be somewhat realistic (more or less) about their limitations and tend to be actively looking to improve on their shortcomings. Any time an impostor speaks about feeling like an impostor, people relate because it speaks to that impostor in all of us.&lt;/p&gt;
&lt;p&gt;Lastly, I think the difference between the two is that the impostor is willing to venture out into their discomfort. They are willing to make mistakes and own them. To lay the bricks again. Not just continue painting over the cracks everyone can see.&lt;/p&gt;
&lt;p&gt;PS. I use the word impostor in the sense that if you are in some way honest about your abilities, you will realise there are factors beyond your pure skill that lead you to where you are. It takes a village and all that. I do not mean impostor in the myopic I&apos;m not good enough sense.&lt;/p&gt;
&lt;p&gt;Remember, as Seth Godin says, &lt;a href=&quot;http://sethgodin.typepad.com/seths_blog/2017/10/imposter-syndrome.html&quot;&gt;we are all impostors&lt;/a&gt;, so get out and dance with your fear!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[CSS left:auto, strikethroughs on OneNote and Bootstrap Modal trickery.]]></title><description><![CDATA[If you need to overwrite an absolutely positioned element to the other side of the container If you use Microsoft OneNote you can…]]></description><link>https://nicholaspretorius.github.io/til0009/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0009/</guid><pubDate>Wed, 13 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you need to overwrite an absolutely positioned element to the other side of the container&lt;/p&gt;
&lt;pre&gt;.rtl {
.className {
    right:0; 
    left: auto; /* this will overwrite the original left: 0; */
}
}&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;If you use Microsoft OneNote you can strikethrough text by selecting it and pressing: CTRL + -&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a Bootstrap 3 modal, you can create a space of clickable content above the modal backdrop by:&lt;/p&gt;
&lt;pre&gt;/* Say we want to push it down 50px */
.modal-backdrop, .modal {
top:50px;
}
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;/* If you then wanted to stretch the modal to cover the whole screen */
.modal-dialog, .modal-content{
height:100%;
}&lt;/p&gt;
&lt;p&gt;.modal-dialog {
width: 100%;
}       &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Another useful Bootstrap modal trick - if you want to make sure the user clicks on a modal button.&lt;/p&gt;
&lt;pre&gt;$(&apos;#myModal&apos;).show({
backdrop: &apos;static&apos;,
keyboard: false
});&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[VS Code Auto format, AngularJS $state, $stateChangeSuccess & Angular Translate.]]></title><description><![CDATA[VS Code auto format code: ALT + SHIFT + F AngularJS $state.current to get the current route AngularJS $stateChangeSuccess for UI-Router <…]]></description><link>https://nicholaspretorius.github.io/til0008/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0008/</guid><pubDate>Tue, 12 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;VS Code auto format code: ALT + SHIFT + F&lt;/li&gt;
&lt;li&gt;AngularJS $state.current to get the current route&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AngularJS $stateChangeSuccess for UI-Router &amp;#x3C; 1.0 | &lt;a href=&quot;https://github.com/angular-ui/ui-router/wiki&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;$rootScope.$on(&apos;$stateChangeSuccess&apos;, 
function(event, toState, toParams, fromState, fromParams){ ... });&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Angular Translate service | Link&lt;/p&gt;
&lt;pre&gt;$translate(&apos;HEADLINE&apos;).then(function (headline) {
$scope.headline = headline;
}, function (translationId) {
$scope.headline = translationId;
});&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Touch and pipe file to VS Code, git fetch and more Gatsby.]]></title><description><![CDATA[More Gatsby |  Link console.log in a Node.js/React.js context may mean the terminal Ctrl + C to quit the task: gatsby develop Thoughts on…]]></description><link>https://nicholaspretorius.github.io/til0007/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0007/</guid><pubDate>Mon, 11 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;touch file.js | code file.js&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git fetch --all&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;More Gatsby | &lt;a href=&quot;https://www.gatsbyjs.org/tutorial/part-four/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;console.log in a Node.js/React.js context may mean the terminal&lt;/li&gt;
&lt;li&gt;Ctrl + C to quit the task: gatsby develop&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Thoughts on today&apos;s learning:&lt;/h3&gt;
&lt;p&gt;Sometimes you miss crucial words in tutorials which have a big impact on progress. In the above tutorial, whenever you update gatsyb-node.js you need to stop and start the gatsby server. Added to that, console.log in the exports.onCreateNode function will log to the terminal, not the browser console. This had me thinking my code was not working for quite some time as I was looking to the browser console for the logged data. Regardless, the lesson is persevere! Re-trace your steps, with a fine-tooth comb if necessary, there is something you are assuming that is happening that isn&apos;t.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Forget perfect! Ship.]]></title><description><![CDATA[Last week I was investigating how to display Arabic from right-to-left for a project I am working on. During my investigation, I found a…]]></description><link>https://nicholaspretorius.github.io/twil0001/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/twil0001/</guid><pubDate>Sun, 10 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Last week I was investigating how to display Arabic from right-to-left for a project I am working on. During my investigation, I found a dead link on the W3C page explaining the topic. As I scrolled to the bottom of the page, I noticed a &quot;Leave a Comment&quot; link. On a whim, I figured, &quot;Why not?&quot;. As a developer, I appreciate it when someone gives me a heads-up on a dead link so that I can fix it. I don&apos;t know why, but I half-expected a mailto link to open up and that I would send an email out like a message in a bottle, never to hear back. I was pleasantly surprised to be greeted with a GitHub page prompting me to log in. (This is a reflection of my outdated ideas than on W3C processes)&lt;/p&gt;
&lt;p&gt;To put this into perspective. My GitHub account tells me that I joined on 23 May, 2011. Up until last week it was a skeleton in my closet. I created it, and then never used it again. Even now, it is in the ICU. There are several reasons for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The company I work for does not share its work on GitHub.&lt;/li&gt;
&lt;li&gt;I have until very recently, only used Subversion for version control, and that was behind a corporate proxy.&lt;/li&gt;
&lt;li&gt;I had no experience using Git. (Yes, in 2017, sad, but true)&lt;/li&gt;
&lt;li&gt;To date, I have not taken part in open source development nor do I have a side-project to share publicly. (Also sad, but true)&lt;/li&gt;
&lt;li&gt;All of the above are just excuses &lt;em&gt;really&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Never the less, I logged in with my dormant GitHub account and created an Issue. I can&apos;t recall ever having done this before. Usually, at this point, I don&apos;t proceed since I tend to think &quot;They are probably already aware of it&quot;. Out of curiosity, I went ahead and logged the issue and thought nothing of it. Several minutes later, I got a response saying that a server at MIT (of all places) was down and that the problem would be recitifed shortly. This blew my mind!&lt;/p&gt;
&lt;p&gt;Firstly, in my experience, people do not respond. They are busy, they are important, maybe they already know, maybe they don&apos;t care, maybe all of the above or none of the above. Secondly, I have a clear-cut case of impostor syndrome. My code smells. No-one is going to look at my work and marvel. Most of the time, I am trying to make deadlines as best I can with what I can. On the upside, I know I can do better. Every day, I get to work and I try do a little better.&lt;/p&gt;
&lt;p&gt;From the early days when I first read about the W3C, web standards, CSS layouts and the people who were leading the so-called Web2.0 movement. These were visible people, connected in a group that through whatever avenue had established themselves in a meaningful way. They were pioneers, leaders in the field and clearly, way smarter than I would ever be. In my own way, as a coder not knowing his absolute from his relative positioning, I looked up to these people. I saw something I wanted to learn. Much in the way a kid might look up to someone they admire. You think, maybe one day I will be like them...&lt;/p&gt;
&lt;p&gt;The reality is that you won&apos;t be like them.&lt;/p&gt;
&lt;p&gt;Not if you don&apos;t ship. Not if you don&apos;t get better at the hard stuff. Not if you don&apos;t put your work out there for everyone to see. And even if you do, it might not happen. Deal with it. Keep coding, keep learning and keep shipping. We aren&apos;t all on that level. Not everyone is pro. Most people aren&apos;t even second-division or even third. To make matters worse, on top of the impostor, sits a thinker. I think way too much. Over think, under do has been my motto for a long time.&lt;/p&gt;
&lt;p&gt;And that is what this hideous looking website is about. It is about putting work out there. As it is.&lt;/p&gt;
&lt;h3&gt;TILs of the week:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/til0001/&quot;&gt;VS Code, TypeScript 101, Emmet and delete branches in Git. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0002/&quot;&gt;Generate CSR, VS Code Multi-cursor and Git Stash. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0003/&quot;&gt;Git Log, cURL, TypeScript, Launch Chrome from VS Code. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0004/&quot;&gt;Curl through proxy, variables in Postman, multiple terminals in VS Code, Insomnia App. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0005/&quot;&gt;Git tagging and secure copy. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/til0006/&quot;&gt;Update npm, Semver notes and Gatsby.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Update npm, Semver notes and Gatsby.]]></title><description><![CDATA[npm i -g npm | To update npm Major.Minor.Patch. Breaking changes. Features backwards compatible. Bug fixes backwards compatible. ~ Major…]]></description><link>https://nicholaspretorius.github.io/til0006/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0006/</guid><pubDate>Sat, 09 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;npm i -g npm | To update npm&lt;/li&gt;
&lt;li&gt;Major.Minor.Patch.&lt;/li&gt;
&lt;li&gt;Breaking changes. Features backwards compatible. Bug fixes backwards compatible.&lt;/li&gt;
&lt;li&gt;~ Major, minor is fixed. Any patch&lt;/li&gt;
&lt;li&gt;^ Major is fixed. Any minor or patch&lt;/li&gt;
&lt;li&gt;* Any major, minor or patch&lt;/li&gt;
&lt;li&gt;Gatsby Tutorials | &lt;a href=&quot;https://www.gatsbyjs.org/tutorial/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Git tagging and secure copy.]]></title><description><![CDATA[Git tag |  Link Enable Emmet in .jsx files |  Link]]></description><link>https://nicholaspretorius.github.io/til0005/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0005/</guid><pubDate>Fri, 08 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Git tag | &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Tagging&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git tag -l&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git tag -a v0.01 -m &quot;Version 0.01&quot;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git push origin v0.01&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;scp file.zip user@0.0.0.0&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Enable Emmet in .jsx files | &lt;a href=&quot;https://github.com/Microsoft/vscode/issues/4962&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Curl through proxy, variables in Postman, multiple terminals in VS Code, Insomnia App.]]></title><description><![CDATA[Create variable in Postman: postman.setGlobalVariable("variable", "value"); Discovered the Insomnia App |  Link Create multiple terminals in…]]></description><link>https://nicholaspretorius.github.io/til0004/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0004/</guid><pubDate>Thu, 07 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;curl -x proxy:port -U username:password http://www.google.com&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Create variable in Postman: postman.setGlobalVariable(&quot;variable&quot;, &quot;value&quot;);&lt;/li&gt;
&lt;li&gt;Discovered the Insomnia App | &lt;a href=&quot;https://insomnia.rest/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create multiple terminals in VS Code | CMD + Shift + `&lt;/li&gt;
&lt;li&gt;You can set the languge on Google Maps API by adding parameter &amp;#x26;language=ar | &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/localization&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chrome DevTools screenshots! CMD + Shift + C then hold CMD and drag | &lt;a href=&quot;https://developers.google.com/web/updates/2017/08/devtools-release-notes#screenshots&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[it Log, cURL, TypeScript, Launch Chrome from VS Code.]]></title><description><![CDATA[Git Log |  Link curl -i yourUrlHere | Gives you data and headers for the provided URL curl -o output.txt yourUrlHere | Stores the response…]]></description><link>https://nicholaspretorius.github.io/til0003/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0003/</guid><pubDate>Wed, 06 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Git Log | &lt;a href=&quot;https://git-scm.com/book/en/v1/Git-Basics-Viewing-the-Commit-History&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git log&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git log -p&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git log --pretty=oneline&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git log --pretty=format:&quot;%h: %an: %ad: %s&quot;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;curl -i yourUrlHere | Gives you data and headers for the provided URL&lt;/li&gt;
&lt;li&gt;curl -o output.txt yourUrlHere | Stores the response from yourUrlHere in output.txt&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;let name: string = &apos;Nicholas&apos;;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;let greeting: string = `Hello ${name}`;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Launch Chrome on file from VS Code | &lt;a href=&quot;https://stackoverflow.com/questions/30039512/how-to-view-my-html-code-in-browser-with-visual-studio-code&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Generate CSR, VS Code Multi-cursor and Git Stash.]]></title><description><![CDATA[Generate a CSR from the command line by:  openssl req -new -newkey rsa:2048 -nodes -keyout yourdomain.key -out yourdomain.csr VS Code…]]></description><link>https://nicholaspretorius.github.io/til0002/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0002/</guid><pubDate>Tue, 05 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Generate a CSR from the command line by: &lt;pre&gt;openssl req -new -newkey rsa:2048 -nodes -keyout yourdomain.key -out yourdomain.csr&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;VS Code keybinding for multi-cursor select is: &lt;pre&gt;CMD + Shift + L&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Git stash! | &lt;a href=&quot;https://git-scm.com/book/en/v1/Git-Tools-Stashing&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash list&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash pop&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash apply&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash apply stash@{0}&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;git stash drop stash@{0}&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[VS Code, TypeScript 101, Emmet and delete branches in Git.]]></title><description><![CDATA[Launch VS Code from the command line |  Link   VS Code key binding for moving a line up or down is:  Alt + Up or Alt + Down I started…]]></description><link>https://nicholaspretorius.github.io/til0001/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/til0001/</guid><pubDate>Mon, 04 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;Launch VS Code from the command line | &lt;a href=&quot;https://code.visualstudio.com/docs/setup/mac&quot;&gt;Link&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;VS Code key binding for moving a line up or down is: &lt;pre&gt;Alt + Up or Alt + Down&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;I started learning about TypeScript and the first step is: &lt;pre&gt;npm install -g typescript&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;That the awesome Emmet is installed by default in VS Code | &lt;a href=&quot;https://code.visualstudio.com/blogs/2017/08/07/emmet-2.0&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Are you a Git rookie like me? This is how you delete a branch on local: &lt;pre&gt;git branch -d oldBranch01 oldBranch02 oldBranch03&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[This is my first blog post using Gatsby, React and Markdown!]]></description><link>https://nicholaspretorius.github.io/hello-world/</link><guid isPermaLink="false">https://nicholaspretorius.github.io/hello-world/</guid><pubDate>Sun, 03 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is my first blog post using Gatsby, React and Markdown!&lt;/p&gt;</content:encoded></item></channel></rss>